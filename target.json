{
  "id": "maker",
  "platformid": "codal",
  "nickname": "maker",
  "name": "MakeCode Maker (Cortex class)",
  "title": "MakeCode Maker - Blocks / Javascript editor",
  "description": "A Blocks / JavaScript code editor for MakeCode Maker Boards",
  "corepkg": "core",
  "bundleddirs": [
    "libs/base",
    "libs/core",
    "libs/core---stm32bluepill",
    "libs/stm32bluepill",
    "libs/tests",
    "libs/serial",
    "libs/datalogger"
  ],
  "serial": {
    "useHF2": true,
    "useEditor": true,
    "log": true,
    "editorTheme": {
      "graphBackground": "#d9d9d9",
      "lineColors": [
        "#CC2936",
        "#FFC914",
        "#2EB7ED",
        "#FB48C7",
        "#08415C",
        "#C200C0"
      ]
    }
  },
  "simulator": {
    "autoRun": true,
    "streams": false,
    "aspectRatio": 1,
    "parts": true,
    "partsAspectRatio": 0.69,
    "dynamicBoardDefinition": true
  },
  "cloud": {
    "workspace": false,
    "packages": true,
    "sharing": true,
    "publishing": true,
    "importing": true,
    "preferredPackages": [],
    "githubPackages": true
  },
  "compile": {
    "isNative": true,
    "useUF2": true,
    "webUSB": true,
    "gc": true,
    "hasHex": true,
    "deployDrives": ".*",
    "deployFileMarker": "INFO_UF2.TXT",
    "driveName": "DRIVE",
    "openocdScript": "source [find interface/cmsis-dap.cfg]; set CHIPNAME at91samd21g18; source [find target/at91samdXX.cfg]",
    "flashChecksumAddr": 8372,
    "flashCodeAlign": 256,
    "upgrades": [],
    "nativeType": "thumb",
    "switches": {},
    "jsRefCounting": false,
    "vtableShift": 2
  },
  "runtime": {
    "mathBlocks": true,
    "loopsBlocks": true,
    "logicBlocks": true,
    "variablesBlocks": true,
    "textBlocks": true,
    "listsBlocks": true,
    "functionBlocks": true,
    "onStartNamespace": "loops",
    "onStartColor": "#40bf4a",
    "onStartWeight": 100,
    "pauseUntilBlock": {
      "category": "loops"
    }
  },
  "compileService": {
    "buildEngine": "codal",
    "codalTarget": {
      "name": "codal-circuit-playground",
      "url": "https://github.com/lancaster-university/codal-circuit-playground",
      "branch": "v1.5.6",
      "type": "git",
      "branches": {
        "https://github.com/lancaster-university/codal-core": "f2b9522ed0260bf1c5706d9652d7a23d76086263"
      }
    },
    "codalBinary": "CIRCUIT_PLAYGROUND",
    "yottaConfig": {
      "pxt": {
        "board": {
          "id": "BOARD_ID_CPLAY"
        }
      }
    },
    "githubCorePackage": "lancaster-university/codal",
    "gittag": "v0.6.1",
    "serviceId": "codal2cp",
    "dockerImage": "pext/yotta:latest"
  },
  "variants": {
    "samd51": {
      "compile": {
        "hasHex": true,
        "openocdScriptAlt": "source [find interface/cmsis-dap.cfg]; set CHIPNAME at91samd51g19; source [find target/at91samdXX.cfg]",
        "openocdScript": "source [find interface/stlink-v2.cfg]; set CPUTAPID 0x2ba01477; set CHIPNAME at91samd51g19; source [find target/at91samdXX.cfg]",
        "ramSize": 196608,
        "vtableShift": 4,
        "gc": true
      },
      "compileService": {
        "codalTarget": {
          "name": "codal-itsybitsy-m4",
          "url": "https://github.com/lancaster-university/codal-itsybitsy-m4",
          "branch": "v0.0.14",
          "type": "git"
        },
        "codalBinary": "ITSYBITSY_M4",
        "serviceId": "codal2samd51"
      }
    },
    "nrf52832": {
      "serial": {
        "useHF2": false
      },
      "compile": {
        "openocdScript": "source [find interface/cmsis-dap.cfg]; source [find target/nrf52.cfg]",
        "flashChecksumAddr": 0,
        "deployFileMarker": "MBED.HTM",
        "vtableShift": 3,
        "useUF2": false,
        "webUSB": false,
        "gc": true
      },
      "compileService": {
        "codalTarget": {
          "name": "codal-ble-nano",
          "url": "https://github.com/lancaster-university/codal-ble-nano",
          "branch": "v0.0.3-pktserial.2",
          "type": "git"
        },
        "codalBinary": "BLE_NANO",
        "serviceId": "codal2ble",
        "dockerImage": "pext/yotta:latest",
        "yottaConfig": {
          "pxt": {
            "board": {
              "id": "BOARD_ID_NRF52832"
            }
          }
        }
      }
    },
    "nrf52840": {
      "serial": {
        "useHF2": false
      },
      "compile": {
        "openocdScript": "source [find board/nrf52-dk.cfg]",
        "flashChecksumAddr": 0,
        "deployFileMarker": "MBED.HTM",
        "vtableShift": 4,
        "useUF2": false,
        "webUSB": false
      },
      "compileService": {
        "codalTarget": {
          "name": "codal-nrf52840-dk",
          "url": "https://github.com/mmoskal/codal-nrf52840-dk",
          "branch": "v0.0.12",
          "type": "git"
        },
        "codalBinary": "NRF52840_DK",
        "serviceId": "codal2nrf52840",
        "dockerImage": "pext/yotta:latest",
        "yottaConfig": {
          "pxt": {
            "board": {
              "id": "BOARD_ID_NRF52840"
            }
          }
        }
      }
    },
    "f103re": {
      "serial": {
        "useHF2": false
      },
      "compile": {
        "openocdScript": "source [find board/st_nucleo_f103rb.cfg]",
        "flashChecksumAddr": 0,
        "deployFileMarker": "INFO_UF2.TXT",
        "vtableShift": 4,
        "webUSB": false,
        "gc": true
      },
      "compileService": {
        "codalTarget": {
          "name": "codal-generic-f103re",
          "url": "https://github.com/mmoskal/codal-generic-f103re",
          "branch": "v0.0.3",
          "type": "git"
        },
        "codalBinary": "GENERIC_F103RE",
        "serviceId": "codal2f103re",
        "dockerImage": "pext/yotta:latest",
        "yottaConfig": {
          "pxt": {
            "board": {
              "id": "BOARD_ID_F103RE"
            }
          }
        }
      }
    },
    "stm32f401re": {
      "serial": {
        "useHF2": false
      },
      "compile": {
        "openocdScript": "source [find interface/stlink-v2.cfg]; source [find target/stm32f4x.cfg]",
        "flashChecksumAddr": 0,
        "deployFileMarker": "INFO_UF2.TXT",
        "vtableShift": 4,
        "webUSB": false,
        "gc": true
      },
      "compileService": {
        "codalTarget": {
          "name": "codal-big-brainpad",
          "url": "https://github.com/lancaster-university/codal-big-brainpad",
          "branch": "v1.0.15",
          "type": "git"
        },
        "codalBinary": "STM32",
        "serviceId": "codal2stm32",
        "dockerImage": "pext/yotta:latest",
        "yottaConfig": {
          "pxt": {
            "board": {
              "id": "BOARD_ID_STM32F401RE"
            }
          }
        }
      }
    },
    "samd21": {
      "compile": {
        "hasHex": true,
        "openocdScriptAlt": "source [find interface/cmsis-dap.cfg]; set CHIPNAME at91samd51g19; source [find target/at91samdXX.cfg]",
        "openocdScript": "source [find interface/stlink-v2.cfg]; set CPUTAPID 0x0bc11477; set CHIPNAME at91samd21g18; source [find target/at91samdXX.cfg]",
        "vtableShift": 4,
        "gc": true
      },
      "compileService": {
        "codalTarget": {
          "name": "codal-circuit-playground",
          "url": "https://github.com/lancaster-university/codal-circuit-playground",
          "branch": "v1.5.4-samd-peripherals.5",
          "type": "git"
        },
        "dockerImage": "pext/yotta:latest",
        "codalBinary": "CIRCUIT_PLAYGROUND"
      }
    },
    "stm32bluepill": {
      "serial": {
        "useHF2": true
      },
      "compile": {
        "webUSB": true,
        "useUF2": true,
        "hasHex": true,
        "deployDrives": ".*",
        "deployFileMarker": "INFO_UF2.TXT",
        "driveName": "BLUEPILL",
        "openocdScript": "source [find interface/stlink-v2.cfg]; source [find target/stm32f1x.cfg]",
        "flashChecksumAddr": 0,
        "vtableShift": 4
      },
      "compileService": {
        "codalTarget": {
          "name": "codal-libopencm3",
          "url": "https://github.com/lupyuen/codal-libopencm3",
          "branch": "master",
          "type": "git"
        },
        "codalBinary": "STM32_BLUE_PILL",
        "serviceId": "codal2stm32bluepill",
        "yottaConfig": {
          "pxt": {
            "board": {
              "id": "BOARD_ID_STM32BLUEPILL"
            }
          }
        }
      }
    }
  },
  "appTheme": {
    "accentColor": "#ecf0f1",
    "backgroundColor": "#ffffff",
    "logoUrl": "https://github.com/Microsoft/pxt-maker",
    "logo": "docs/static/logo.svg",
    "docsLogo": "docs/static/logo.svg",
    "portraitLogo": "docs/static/logo.svg",
    "footerLogo": "docs/static/logo.svg",
    "organization": "Microsoft MakeCode",
    "organizationUrl": "https://makecode.com/",
    "organizationLogo": "docs/static/Microsoft-logo_rgb_c-gray-square.png",
    "organizationWideLogo": "docs/static/Microsoft-logo_rgb_c-gray.png",
    "homeUrl": "/",
    "embedUrl": "https://maker.makecode.com/",
    "privacyUrl": "https://go.microsoft.com/fwlink/?LinkId=521839",
    "termsOfUseUrl": "https://go.microsoft.com/fwlink/?LinkID=206977",
    "githubUrl": "https://github.com/Microsoft/pxt-maker",
    "feedbackUrl": "https://github.com/Microsoft/pxt-maker/issues",
    "betaUrl": "https://github.com/Microsoft/pxt-maker",
    "boardName": "board",
    "homeScreenHero": "docs/static/hero.jpg",
    "debugger": true,
    "print": true,
    "chooseBoardOnNewProject": true,
    "lightToc": true,
    "instructions": true,
    "docMenu": [
      {
        "name": "About",
        "path": "/docs/about"
      },
      {
        "name": "Boards",
        "path": "/docs/boards"
      },
      {
        "name": "Blocks",
        "path": "/docs/blocks"
      },
      {
        "name": "JavaScript",
        "path": "/docs/javascript"
      },
      {
        "name": "Reference",
        "path": "/docs/reference"
      },
      {
        "name": "GitHub",
        "path": "https://github.com/Microsoft/pxt-maker"
      }
    ],
    "invertedMenu": false,
    "invertedToolbox": false,
    "invertedMonaco": false,
    "monacoToolbox": true,
    "highContrast": true,
    "greenScreen": true,
    "simAnimationEnter": "fly right in",
    "simAnimationExit": "fly right out",
    "hasAudio": true,
    "usbDocs": "/device/usb",
    "disableBlockIcons": true,
    "blocklyOptions": {
      "grid": {
        "spacing": 20,
        "length": 2,
        "colour": "rgba(189, 195, 199, 0.20)",
        "snap": true
      }
    },
    "blockColors": {
      "loops": "#40bf4a",
      "logic": "#4cbfe6",
      "math": "#9966ff",
      "variables": "#FF6680",
      "text": "#ffab19",
      "advanced": "#00272B",
      "functions": "#005a9e",
      "arrays": "#8A1C7C"
    },
    "allowPackageExtensions": true,
    "extendEditor": true,
    "crowdinProject": "kindscript",
    "scriptManager": true,
    "TOC": [
      {
        "name": "About",
        "subitems": [],
        "path": "/about"
      },
      {
        "name": "FAQ",
        "subitems": [],
        "path": "/faq"
      },
      {
        "name": "Reference",
        "subitems": [
          {
            "name": "music",
            "subitems": [],
            "path": "/reference/music"
          },
          {
            "name": "pins",
            "subitems": [],
            "path": "/reference/pins"
          },
          {
            "name": "control",
            "subitems": [],
            "path": "/reference/control"
          },
          {
            "name": "serial",
            "subitems": [],
            "path": "/reference/serial"
          }
        ],
        "path": "/reference"
      },
      {
        "name": "Blocks",
        "subitems": [
          {
            "name": "On Start",
            "subitems": [],
            "path": "/blocks/on-start"
          },
          {
            "name": "Loops",
            "subitems": [
              {
                "name": "repeat",
                "subitems": [],
                "path": "/blocks/loops/repeat"
              },
              {
                "name": "for",
                "subitems": [],
                "path": "/blocks/loops/for"
              },
              {
                "name": "while",
                "subitems": [],
                "path": "/blocks/loops/while"
              }
            ],
            "path": "/blocks/loops"
          },
          {
            "name": "Logic",
            "subitems": [
              {
                "name": "if",
                "subitems": [],
                "path": "/blocks/logic/if"
              },
              {
                "name": "Boolean",
                "subitems": [],
                "path": "/blocks/logic/boolean"
              }
            ],
            "path": "/blocks/logic"
          },
          {
            "name": "Variables",
            "subitems": [
              {
                "name": "assign",
                "subitems": [],
                "path": "/blocks/variables/assign"
              },
              {
                "name": "change var",
                "subitems": [],
                "path": "/blocks/variables/change"
              },
              {
                "name": "var",
                "subitems": [],
                "path": "/blocks/variables/var"
              }
            ],
            "path": "/blocks/variables"
          },
          {
            "name": "Math",
            "subitems": [],
            "path": "/blocks/math"
          },
          {
            "name": "JavaScript blocks",
            "subitems": [],
            "path": "/blocks/javascript-blocks"
          },
          {
            "name": "Custom blocks",
            "subitems": [],
            "path": "/blocks/custom"
          }
        ],
        "path": "/blocks"
      },
      {
        "name": "JavaScript",
        "subitems": [
          {
            "name": "Calling",
            "subitems": [],
            "path": "/javascript/call"
          },
          {
            "name": "Sequencing",
            "subitems": [],
            "path": "/javascript/sequence"
          },
          {
            "name": "Variables",
            "subitems": [],
            "path": "/javascript/variables"
          },
          {
            "name": "Operators",
            "subitems": [],
            "path": "/javascript/operators"
          },
          {
            "name": "Statements",
            "subitems": [],
            "path": "/javascript/statements"
          },
          {
            "name": "Functions",
            "subitems": [],
            "path": "/javascript/functions"
          },
          {
            "name": "Types",
            "subitems": [],
            "path": "/javascript/types"
          },
          {
            "name": "Classes",
            "subitems": [],
            "path": "/javascript/classes"
          },
          {
            "name": "Interfaces",
            "subitems": [],
            "path": "/javascript/interfaces"
          },
          {
            "name": "Generics",
            "subitems": [],
            "path": "/javascript/generics"
          }
        ],
        "path": "/javascript"
      },
      {
        "name": "Types",
        "subitems": [
          {
            "name": "Number",
            "subitems": [],
            "path": "/types/number"
          },
          {
            "name": "String",
            "subitems": [],
            "path": "/types/string"
          },
          {
            "name": "Boolean",
            "subitems": [],
            "path": "/types/boolean"
          },
          {
            "name": "Array",
            "subitems": [],
            "path": "/types/array"
          },
          {
            "name": "Function",
            "subitems": [],
            "path": "/types/function"
          }
        ],
        "path": "/types"
      },
      {
        "name": "",
        "subitems": [
          {
            "name": "About",
            "subitems": [],
            "path": "/about"
          },
          {
            "name": "Support",
            "subitems": [],
            "path": "/support"
          },
          {
            "name": "Translate",
            "subitems": [],
            "path": "/translate"
          },
          {
            "name": "Sharing projects",
            "subitems": [],
            "path": "/share"
          },
          {
            "name": "Offline support",
            "subitems": [],
            "path": "/offline"
          },
          {
            "name": "Save",
            "subitems": [],
            "path": "/save"
          }
        ]
      },
      {
        "name": "",
        "subitems": [
          {
            "name": "Command Line Interface",
            "subitems": [],
            "path": "/cli"
          },
          {
            "name": "Visual Studio Code support",
            "subitems": [],
            "path": "/code"
          },
          {
            "name": "Blocks Embed",
            "subitems": [],
            "path": "/blocks-embed"
          }
        ]
      }
    ],
    "id": "maker",
    "title": "MakeCode Maker - Blocks / Javascript editor",
    "name": "MakeCode Maker (Cortex class)",
    "description": "A Blocks / JavaScript code editor for MakeCode Maker Boards",
    "htmlDocIncludes": {}
  },
  "ignoreDocsErrors": true,
  "versions": {
    "target": "0.5.73",
    "pxt": "5.2.29"
  },
  "blocksprj": {
    "id": "blocksprj",
    "config": {
      "name": "{0}",
      "dependencies": {
        "stm32bluepill": "*"
      },
      "description": "",
      "files": [
        "main.blocks",
        "main.ts",
        "README.md"
      ],
      "additionalFilePaths": []
    },
    "files": {
      "README.md": "",
      "main.blocks": "<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n  <block type=\"forever\" x=\"176\" y=\"0\"></block>\n</xml>",
      "main.ts": "\n"
    }
  },
  "tsprj": {
    "id": "tsprj",
    "config": {
      "name": "{0}",
      "dependencies": {
        "stm32bluepill": "*"
      },
      "description": "",
      "files": [
        "main.ts",
        "README.md"
      ],
      "additionalFilePaths": []
    },
    "files": {
      "README.md": "",
      "main.ts": "\n"
    }
  },
  "bundledpkgs": {
    "base": {
      "README.md": "# base\n\nThe base library, shared by all C++ targets (not only Codal-based).\n\n\n",
      "advmath.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\nnamespace Math_ {\n\n//%\nTNumber log2(TNumber x){SINGLE(log2)}\n//%\nTNumber exp(TNumber x){SINGLE(exp)}\n//%\nTNumber tanh(TNumber x){SINGLE(tanh)}\n//%\nTNumber sinh(TNumber x){SINGLE(sinh)}\n//%\nTNumber cosh(TNumber x){SINGLE(cosh)}\n//%\nTNumber atanh(TNumber x){SINGLE(atanh)}\n//%\nTNumber asinh(TNumber x){SINGLE(asinh)}\n//%\nTNumber acosh(TNumber x){SINGLE(acosh)}\n\n}",
      "buffer.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n\nusing namespace std;\n\n//% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\nnamespace BufferMethods {\n//%\nuint8_t *getBytes(Buffer buf) {\n    return buf->data;\n}\n\n//%\nint getByte(Buffer buf, int off) {\n    if (buf && 0 <= off && off < buf->length)\n        return buf->data[off];\n    return 0;\n}\n\n//%\nvoid setByte(Buffer buf, int off, int v) {\n    if (buf && 0 <= off && off < buf->length)\n        buf->data[off] = v;\n}\n\nint writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {\n    if (length < 0)\n        length = src->length;\n\n    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)\n        return -1;\n\n    length = min(src->length - srcOffset, buf->length - dstOffset);\n\n    if (length < 0)\n        return -1;\n\n    if (buf == src) {\n        memmove(buf->data + dstOffset, src->data + srcOffset, length);\n    } else {\n        memcpy(buf->data + dstOffset, src->data + srcOffset, length);\n    }\n\n    return 0;\n}\n\n/**\n * Write a number in specified format in the buffer.\n */\n//%\nvoid setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {\n    if (offset < 0)\n        return;\n    setNumberCore(buf->data + offset, buf->length - offset, format, value);\n}\n\n/**\n * Read a number in specified format from the buffer.\n */\n//%\nTNumber getNumber(Buffer buf, NumberFormat format, int offset) {\n    if (offset < 0)\n        return fromInt(0);\n    return getNumberCore(buf->data + offset, buf->length - offset, format);\n}\n\n/** Returns the length of a Buffer object. */\n//% property\nint length(Buffer s) {\n    return s->length;\n}\n\n/**\n * Fill (a fragment) of the buffer with given value.\n */\n//%\nvoid fill(Buffer buf, int value, int offset = 0, int length = -1) {\n    if (offset < 0 || offset > buf->length)\n        return; // DEVICE_INVALID_PARAMETER;\n    if (length < 0)\n        length = buf->length;\n    length = min(length, buf->length - offset);\n    memset(buf->data + offset, value, length);\n}\n\n/**\n * Return a copy of a fragment of a buffer.\n */\n//%\nBuffer slice(Buffer buf, int offset = 0, int length = -1) {\n    offset = min((int)buf->length, offset);\n    if (length < 0)\n        length = buf->length;\n    length = min(length, buf->length - offset);\n    return mkBuffer(buf->data + offset, length);\n}\n\n/**\n * Shift buffer left in place, with zero padding.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid shift(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n    if (offset <= -length || offset >= length) {\n        fill(buf, 0);\n        return;\n    }\n\n    uint8_t *data = buf->data + start;\n    if (offset < 0) {\n        offset = -offset;\n        memmove(data + offset, data, length - offset);\n        memset(data, 0, offset);\n    } else {\n        length = length - offset;\n        memmove(data, data + offset, length);\n        memset(data + length, 0, offset);\n    }\n}\n\n/**\n * Convert a buffer to its hexadecimal representation.\n */\n//%\nString toHex(Buffer buf) {\n    const char *hex = \"0123456789abcdef\";\n    auto res = mkString(NULL, buf->length * 2);\n    for (int i = 0; i < buf->length; ++i) {\n        res->data[i << 1] = hex[buf->data[i] >> 4];\n        res->data[(i << 1) + 1] = hex[buf->data[i] & 0xf];\n    }\n    return res;\n}\n\n/**\n * Rotate buffer left in place.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid rotate(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n\n    if (offset < 0)\n        offset += length << 8; // try to make it positive\n    offset %= length;\n    if (offset < 0)\n        offset += length;\n\n    uint8_t *data = buf->data + start;\n\n    uint8_t *n_first = data + offset;\n    uint8_t *first = data;\n    uint8_t *next = n_first;\n    uint8_t *last = data + length;\n\n    while (first != next) {\n        uint8_t tmp = *first;\n        *first++ = *next;\n        *next++ = tmp;\n        if (next == last) {\n            next = n_first;\n        } else if (first == n_first) {\n            n_first = next;\n        }\n    }\n}\n\n/**\n * Write contents of `src` at `dstOffset` in current buffer.\n */\n//%\nvoid write(Buffer buf, int dstOffset, Buffer src) {\n    // srcOff and length not supported, we only do up to 4 args :/\n    writeBuffer(buf, dstOffset, src, 0, -1);\n}\n}\n\nnamespace control {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n}\n\nnamespace pxt {\nstatic int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = dst + length;\n        for (int i = 0; i < length; ++i)\n            *--p = src[i];\n    } else {\n        if (length == 4 && ((uint32_t)dst & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uint32_t)dst & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nstatic int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        memset(dst, 0, length);\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = src + length;\n        for (int i = 0; i < length; ++i)\n            dst[i] = *--p;\n    } else {\n        if (length == 4 && ((uint32_t)src & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uint32_t)src & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nvoid setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define WRITEBYTES(isz, swap, toInt)                                                               \\\n    isz = toInt(value);                                                                            \\\n    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \\\n    break\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        WRITEBYTES(i8, false, toInt);\n    case NumberFormat::UInt8LE:\n        WRITEBYTES(u8, false, toInt);\n    case NumberFormat::Int16LE:\n        WRITEBYTES(i16, false, toInt);\n    case NumberFormat::UInt16LE:\n        WRITEBYTES(u16, false, toInt);\n    case NumberFormat::Int32LE:\n        WRITEBYTES(i32, false, toInt);\n    case NumberFormat::UInt32LE:\n        WRITEBYTES(u32, false, toUInt);\n\n    case NumberFormat::Int8BE:\n        WRITEBYTES(i8, true, toInt);\n    case NumberFormat::UInt8BE:\n        WRITEBYTES(u8, true, toInt);\n    case NumberFormat::Int16BE:\n        WRITEBYTES(i16, true, toInt);\n    case NumberFormat::UInt16BE:\n        WRITEBYTES(u16, true, toInt);\n    case NumberFormat::Int32BE:\n        WRITEBYTES(i32, true, toInt);\n    case NumberFormat::UInt32BE:\n        WRITEBYTES(u32, true, toUInt);\n\n    case NumberFormat::Float32LE:\n        WRITEBYTES(f32, false, toFloat);\n    case NumberFormat::Float32BE:\n        WRITEBYTES(f32, true, toFloat);\n    case NumberFormat::Float64LE:\n        WRITEBYTES(f64, false, toDouble);\n    case NumberFormat::Float64BE:\n        WRITEBYTES(f64, true, toDouble);\n    }\n}\n\nTNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define READBYTES(isz, swap, conv)                                                                 \\\n    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \\\n    return conv(isz)\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        READBYTES(i8, false, fromInt);\n    case NumberFormat::UInt8LE:\n        READBYTES(u8, false, fromInt);\n    case NumberFormat::Int16LE:\n        READBYTES(i16, false, fromInt);\n    case NumberFormat::UInt16LE:\n        READBYTES(u16, false, fromInt);\n    case NumberFormat::Int32LE:\n        READBYTES(i32, false, fromInt);\n    case NumberFormat::UInt32LE:\n        READBYTES(u32, false, fromUInt);\n\n    case NumberFormat::Int8BE:\n        READBYTES(i8, true, fromInt);\n    case NumberFormat::UInt8BE:\n        READBYTES(u8, true, fromInt);\n    case NumberFormat::Int16BE:\n        READBYTES(i16, true, fromInt);\n    case NumberFormat::UInt16BE:\n        READBYTES(u16, true, fromInt);\n    case NumberFormat::Int32BE:\n        READBYTES(i32, true, fromInt);\n    case NumberFormat::UInt32BE:\n        READBYTES(u32, true, fromUInt);\n\n    case NumberFormat::Float32LE:\n        READBYTES(f32, false, fromFloat);\n    case NumberFormat::Float32BE:\n        READBYTES(f32, true, fromFloat);\n    case NumberFormat::Float64LE:\n        READBYTES(f64, false, fromDouble);\n    case NumberFormat::Float64BE:\n        READBYTES(f64, true, fromDouble);\n    }\n\n    return 0;\n}\n}",
      "buffer.ts": "namespace pins {\n    /**\n     * Get the size in bytes of specified number format.\n     */\n    //%\n    export function sizeOf(format: NumberFormat) {\n        switch (format) {\n            case NumberFormat.Int8LE:\n            case NumberFormat.UInt8LE:\n            case NumberFormat.Int8BE:\n            case NumberFormat.UInt8BE:\n                return 1;\n            case NumberFormat.Int16LE:\n            case NumberFormat.UInt16LE:\n            case NumberFormat.Int16BE:\n            case NumberFormat.UInt16BE:\n                return 2;\n            case NumberFormat.Int32LE:\n            case NumberFormat.Int32BE:\n            case NumberFormat.UInt32BE:\n            case NumberFormat.UInt32LE:\n            case NumberFormat.Float32BE:\n            case NumberFormat.Float32LE:\n                return 4;\n            case NumberFormat.Float64BE:\n            case NumberFormat.Float64LE:\n                return 8;\n        }\n        return 0;\n    }\n\n    /**\n     * Create a new buffer initalized to bytes from given array.\n     * @param bytes data to initalize with\n     */\n    //%\n    export function createBufferFromArray(bytes: number[]) {\n        let buf = control.createBuffer(bytes.length)\n        for (let i = 0; i < bytes.length; ++i)\n            buf[i] = bytes[i]\n        return buf\n    }\n\n    function getFormat(pychar: string, isBig: boolean) {\n        switch (pychar) {\n            case 'B':\n                return NumberFormat.UInt8LE\n            case 'b':\n                return NumberFormat.Int8LE\n            case 'H':\n                return isBig ? NumberFormat.UInt16BE : NumberFormat.UInt16LE\n            case 'h':\n                return isBig ? NumberFormat.Int16BE : NumberFormat.Int16LE\n            case 'I':\n            case 'L':\n                return isBig ? NumberFormat.UInt32BE : NumberFormat.UInt32LE\n            case 'i':\n            case 'l':\n                return isBig ? NumberFormat.Int32BE : NumberFormat.Int32LE\n            case 'f':\n                return isBig ? NumberFormat.Float32BE : NumberFormat.Float32LE\n            case 'd':\n                return isBig ? NumberFormat.Float64BE : NumberFormat.Float64LE\n            default:\n                return null as NumberFormat\n        }\n    }\n\n    function packUnpackCore(format: string, nums: number[], buf: Buffer, isPack: boolean, off = 0) {\n        let isBig = false\n        let idx = 0\n        for (let i = 0; i < format.length; ++i) {\n            switch (format[i]) {\n                case ' ':\n                case '<':\n                case '=':\n                    isBig = false\n                    break\n                case '>':\n                case '!':\n                    isBig = true\n                    break\n                case 'x':\n                    off++\n                    break\n                default:\n                    let fmt = getFormat(format[i], isBig)\n                    if (fmt === null) {\n                        control.fail(\"Not supported format character: \" + format[i])\n                    } else {\n                        if (buf) {\n                            if (isPack)\n                                buf.setNumber(fmt, off, nums[idx++])\n                            else\n                                nums.push(buf.getNumber(fmt, off))\n                        }\n\n                        off += pins.sizeOf(fmt)\n                    }\n                    break\n            }\n        }\n        return off\n    }\n\n    export function packedSize(format: string) {\n        return packUnpackCore(format, null, null, true)\n    }\n\n    export function packBuffer(format: string, nums: number[]) {\n        let buf = control.createBuffer(packedSize(format))\n        packUnpackCore(format, nums, buf, true)\n        return buf\n    }\n\n    export function packIntoBuffer(format: string, buf: Buffer, offset: number, nums: number[]) {\n        packUnpackCore(format, nums, buf, true, offset)\n    }\n\n    export function unpackBuffer(format: string, buf: Buffer, offset = 0) {\n        let res: number[] = []\n        packUnpackCore(format, res, buf, false, offset)\n        return res\n    }\n}\n\n// see http://msgpack.org/ for the spec\n// it currently only implements numbers and their sequances\n// once we handle any type and typeof expressions we can do more\n\nnamespace msgpack {\n    function tagFormat(tag: number) {\n        switch (tag) {\n            case 0xCB: return NumberFormat.Float64BE\n            case 0xCC: return NumberFormat.UInt8BE\n            case 0xCD: return NumberFormat.UInt16BE\n            case 0xCE: return NumberFormat.UInt32BE\n            case 0xD0: return NumberFormat.Int8BE\n            case 0xD1: return NumberFormat.Int16BE\n            case 0xD2: return NumberFormat.Int32BE\n            default:\n                return null\n        }\n    }\n\n    function packNumberCore(buf: Buffer, offset: number, num: number) {\n        let tag = 0xCB\n        if (num == (num << 0) || num == (num >>> 0)) {\n            if (-31 <= num && num <= 127) {\n                if (buf) buf[offset] = num\n                return 1\n            } else if (0 <= num) {\n                if (num <= 0xff) {\n                    tag = 0xCC\n                } else if (num <= 0xffff) {\n                    tag = 0xCD\n                } else {\n                    tag = 0xCE\n                }\n            } else {\n                if (-0x7f <= num) {\n                    tag = 0xD0\n                } else if (-0x7fff <= num) {\n                    tag = 0xD1\n                } else {\n                    tag = 0xD2\n                }\n            }\n        }\n        let fmt = tagFormat(tag)\n        if (buf) {\n            buf[offset] = tag\n            buf.setNumber(fmt, offset + 1, num)\n        }\n        return pins.sizeOf(fmt) + 1\n    }\n\n    /**\n     * Unpacks a buffer into a number array.\n     */\n    export function unpackNumberArray(buf: Buffer, offset = 0): number[] {\n        let res: number[] = []\n\n        while (offset < buf.length) {\n            let fmt = tagFormat(buf[offset++])\n            if (fmt === null) {\n                let v = buf.getNumber(NumberFormat.Int8BE, offset - 1)\n                if (-31 <= v && v <= 127)\n                    res.push(v)\n                else\n                    return null\n            } else {\n                res.push(buf.getNumber(fmt, offset))\n                offset += pins.sizeOf(fmt)\n            }\n            // padding at the end\n            while (buf[offset] === 0xc1) offset++;\n        }\n\n        return res\n    }\n\n    /**\n     * Pack a number array into a buffer.\n     * @param nums the numbers to be packed\n     */\n    export function packNumberArray(nums: number[]): Buffer {\n        let off = 0\n        for (let n of nums) {\n            off += packNumberCore(null, off, n)\n        }\n        let buf = control.createBuffer(off)\n        off = 0\n        for (let n of nums) {\n            off += packNumberCore(buf, off, n)\n        }\n        return buf\n    }\n}\n\ninterface Buffer {\n    [index: number]: number;\n    // rest defined in buffer.cpp\n}",
      "configkeys.h": "#ifndef __PXT_CONFIGKEYS_H\n#define __PXT_CONFIGKEYS_H\n\n// these define keys for getConfig() function\n#define CFG_PIN_ACCELEROMETER_INT 1\n#define CFG_PIN_ACCELEROMETER_SCL 2\n#define CFG_PIN_ACCELEROMETER_SDA 3\n#define CFG_PIN_BTN_A 4\n#define CFG_PIN_BTN_B 5\n#define CFG_PIN_BTN_SLIDE 6\n#define CFG_PIN_DOTSTAR_CLOCK 7\n#define CFG_PIN_DOTSTAR_DATA 8\n#define CFG_PIN_FLASH_CS 9\n#define CFG_PIN_FLASH_MISO 10\n#define CFG_PIN_FLASH_MOSI 11\n#define CFG_PIN_FLASH_SCK 12\n#define CFG_PIN_LED 13\n#define CFG_PIN_LIGHT 14\n#define CFG_PIN_MICROPHONE 15\n#define CFG_PIN_MIC_CLOCK 16\n#define CFG_PIN_MIC_DATA 17\n#define CFG_PIN_MISO 18\n#define CFG_PIN_MOSI 19\n#define CFG_PIN_NEOPIXEL 20\n#define CFG_PIN_RX 21\n#define CFG_PIN_RXLED 22\n#define CFG_PIN_SCK 23\n#define CFG_PIN_SCL 24\n#define CFG_PIN_SDA 25\n#define CFG_PIN_SPEAKER_AMP 26\n#define CFG_PIN_TEMPERATURE 27\n#define CFG_PIN_TX 28\n#define CFG_PIN_TXLED 29\n#define CFG_PIN_IR_OUT 30\n#define CFG_PIN_IR_IN 31\n#define CFG_PIN_DISPLAY_SCK 32\n#define CFG_PIN_DISPLAY_MISO 33\n#define CFG_PIN_DISPLAY_MOSI 34\n#define CFG_PIN_DISPLAY_CS 35\n#define CFG_PIN_DISPLAY_DC 36\n#define CFG_DISPLAY_WIDTH 37\n#define CFG_DISPLAY_HEIGHT 38\n#define CFG_DISPLAY_CFG0 39\n#define CFG_DISPLAY_CFG1 40\n#define CFG_DISPLAY_CFG2 41\n#define CFG_DISPLAY_CFG3 42\n#define CFG_PIN_DISPLAY_RST 43\n#define CFG_PIN_DISPLAY_BL 44\n#define CFG_PIN_SERVO_1 45\n#define CFG_PIN_SERVO_2 46\n#define CFG_PIN_BTN_LEFT 47\n#define CFG_PIN_BTN_RIGHT 48\n#define CFG_PIN_BTN_UP 49\n#define CFG_PIN_BTN_DOWN 50\n#define CFG_PIN_BTN_MENU 51\n#define CFG_PIN_LED_R 52\n#define CFG_PIN_LED_G 53\n#define CFG_PIN_LED_B 54\n#define CFG_PIN_LED1 55\n#define CFG_PIN_LED2 56\n#define CFG_PIN_LED3 57\n#define CFG_PIN_LED4 58\n#define CFG_SPEAKER_VOLUME 59\n\n#define CFG_PIN_JACK_TX 60\n#define CFG_PIN_JACK_SENSE 61\n#define CFG_PIN_JACK_HPEN 62\n#define CFG_PIN_JACK_BZEN 63\n#define CFG_PIN_JACK_PWREN 64\n#define CFG_PIN_JACK_SND 65\n#define CFG_PIN_JACK_BUSLED 66\n#define CFG_PIN_JACK_COMMLED 67\n\n#define CFG_PIN_BTNMX_LATCH 66\n#define CFG_PIN_BTNMX_CLOCK 67\n#define CFG_PIN_BTNMX_DATA 68\n#define CFG_PIN_BTN_SOFT_RESET 69\n#define CFG_ACCELEROMETER_TYPE 70\n\n#define ACCELEROMETER_TYPE_LIS3DH 0x32\n#define ACCELEROMETER_TYPE_MMA8453 0x38\n#define ACCELEROMETER_TYPE_FXOS8700 0x3C\n#define ACCELEROMETER_TYPE_MMA8653 0x3A\n#define ACCELEROMETER_TYPE_MSA300 0x4C\n\n#define CFG_PIN_A0 100\n#define CFG_PIN_A1 101\n#define CFG_PIN_A2 102\n#define CFG_PIN_A3 103\n#define CFG_PIN_A4 104\n#define CFG_PIN_A5 105\n#define CFG_PIN_A6 106\n#define CFG_PIN_A7 107\n#define CFG_PIN_A8 108\n#define CFG_PIN_A9 109\n#define CFG_PIN_A10 110\n#define CFG_PIN_A11 111\n#define CFG_PIN_A12 112\n#define CFG_PIN_A13 113\n#define CFG_PIN_A14 114\n#define CFG_PIN_A15 115\n\n#define CFG_PIN_D0 150\n#define CFG_PIN_D1 151\n#define CFG_PIN_D2 152\n#define CFG_PIN_D3 153\n#define CFG_PIN_D4 154\n#define CFG_PIN_D5 155\n#define CFG_PIN_D6 156\n#define CFG_PIN_D7 157\n#define CFG_PIN_D8 158\n#define CFG_PIN_D9 159\n#define CFG_PIN_D10 160\n#define CFG_PIN_D11 161\n#define CFG_PIN_D12 162\n#define CFG_PIN_D13 163\n#define CFG_PIN_D14 164\n#define CFG_PIN_D15 165\n\n#define CFG_NUM_NEOPIXELS 200\n#define CFG_NUM_DOTSTARS 201\n#define CFG_DEFAULT_BUTTON_MODE 202\n#define CFG_SWD_ENABLED 203\n#define CFG_FLASH_BYTES 204\n#define CFG_RAM_BYTES 205\n#define CFG_SYSTEM_HEAP_BYTES 206\n#define CFG_LOW_MEM_SIMULATION_KB 207\n\n#endif\n",
      "console.ts": "/// <reference no-default-lib=\"true\"/>\n\nenum ConsolePriority {\n    Debug = 0,\n    Log = 1,\n    Warning = 2,\n    Error = 3,\n    Silent = 4\n}\n\n/**\n * Reading and writing data to the console output.\n */\n//% weight=12 color=#002050 icon=\"\\uf120\"\n//% advanced=true\nnamespace console {\n    type Listener = (priority: ConsolePriority, text: string) => void;\n\n    /**\n     * Minimum priority to send messages to listeners\n     */\n    export let minPriority = ConsolePriority.Log;\n\n    //% whenUsed\n    const listeners: Listener[] = [\n        function (priority: ConsolePriority, text: string) { control.__log(priority, text); }\n    ];\n\n    export function add(priority: ConsolePriority, text: string) {\n        if (priority < minPriority) return;\n        // add new line\n        text += \"\\n\";\n        // send to listeners\n        for (let i = 0; i < listeners.length; ++i)\n            listeners[i](priority, text);\n    }\n\n    export function debug(text: string) {\n        this.add(ConsolePriority.Debug, text);\n    }\n\n    export function warning(text: string) {\n        this.add(ConsolePriority.Warning, text);\n    }\n\n    export function error(text: string) {\n        this.add(ConsolePriority.Error, text);\n    }\n\n    /**\n     * Write a line of text to the console output.\n     * @param value to send\n     */\n    //% weight=90\n    //% help=console/log blockGap=8\n    //% blockId=console_log block=\"console|log %text\"\n    //% text.shadowOptions.toString=true\n    export function log(text: string): void {\n        add(ConsolePriority.Log, text);\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the console output.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=console/log-value\n    //% blockId=console_log_value block=\"console|log value %name|= %value\"\n    export function logValue(name: string, value: number): void {\n        log(name ? `${name}: ${value}` : `${value}`)\n    }\n\n    /**\n     * Adds a listener for the log messages\n     * @param listener\n     */\n    //%\n    export function addListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener) return;\n        listeners.push(listener);\n    }\n\n    /**\n     * Removes a listener\n     * @param listener \n     */\n    //%\n    export function removeListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener) return;\n        const i = listeners.indexOf(listener);\n        if (i > -1)\n            listeners.splice(i, 1);\n    }\n}",
      "control.cpp": "#include \"pxtbase.h\"\n\n\nnamespace control {\n    /**\n    * Gets the number of milliseconds elapsed since power on.\n    */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\"\n    int millis() {\n        return current_time_ms();\n    }\n\n    /**\n    * Used internally\n    */\n    //%\n    void internalOnEvent(int src, int value, Action handler, int flags = 16) {\n        registerWithDal(src, value, handler, flags);\n    }\n\n    /**\n     * Reset the device.\n     */\n    //% weight=30 async help=control/reset blockGap=8\n    //% blockId=\"control_reset\" block=\"reset\"\n    void reset() {\n        target_reset();\n    }\n\n    /**\n    * Block the current fiber for the given microseconds\n    * @param micros number of micro-seconds to wait. eg: 4\n    */\n    //% help=control/wait-micros weight=29 async\n    //% blockId=\"control_wait_us\" block=\"wait (µs)%micros\"\n    void waitMicros(int micros) {\n        sleep_us(micros);\n    }\n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8\n    void runInParallel(Action a) {\n        pxt::runInParallel(a);\n    }\n\n    /**\n    * Blocks the calling thread until the specified event is raised.\n    */\n    //% help=control/wait-for-event async\n    //% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\"\n    void waitForEvent(int src, int value) {\n        pxt::waitForEvent(src, value);\n    }\n\n    /**\n    * Derive a unique, consistent serial number of this device from internal data.\n    */\n    //% blockId=\"control_device_serial_number\" block=\"device serial number\" weight=9\n    //% help=control/device-serial-number\n    int deviceSerialNumber() {\n        return pxt::getSerialNumber();\n    }\n\n    /**\n    *\n    */\n    //%\n    void __log(int prority, String text) {\n        if (NULL == text) return;\n        pxt::sendSerial(text->data, text->length);\n    }\n\n    /**\n     * Dump internal information about a value.\n     */\n    //%\n    void dmesgValue(TValue v) {\n        anyPrint(v);\n    }\n\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //%\n    void gc() {\n        pxt::gc(1);\n    }\n\n    /**\n     * Force GC and halt waiting for debugger to do a full heap dump.\n     */\n    //%\n    void heapDump() {\n        pxt::gc(2);\n        target_panic(PANIC_HEAP_DUMPED);\n    }\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //%\n    bool profilingEnabled() {\n#ifdef PXT_PROFILE\n        return true;\n#else\n        return false;\n#endif\n    }\n}\n",
      "control.ts": "/**\n* Program controls and events.\n*/\n//% weight=10 color=\"#31bca3\" icon=\"\\uf110\" advanced=true\nnamespace control {\n    /**\n     * Deprecated, use ``control.runInParallel`` instead.\n     */\n    //% deprecated=1 hidden=1 help=control/run-in-background blockAllowMultiple=1 afterOnStart=true\n    //% blockId=\"control_run_in_background\" block=\"run in background\" blockGap=8 weight=0\n    export function runInBackground(a: () => void) {\n        control.runInParallel(a);\n    }\n\n    /**\n     * Display an error code and stop the program.\n     * @param code an error number to display. eg: 5\n     */\n    //% help=control/panic weight=29\n    //% blockId=\"control_panic\" block=\"panic %code\"\n    //% shim=pxtrt::panic\n    export function panic(code: number) { }\n\n    /**\n     * Enable profiling for current function.\n     */\n    //% shim=TD_NOOP shimArgument=perfCounter\n    export function enablePerfCounter(name?: string) { }\n\n    /**\n     * Dump values of profiling performance counters.\n     */\n    //% shim=pxt::dumpPerfCounters\n    export function dmesgPerfCounters() { }\n\n    /**\n     * Display an error code and stop the program when the assertion is `false`.\n     */\n    //% help=control/assert weight=30\n    //% blockId=\"control_assert\" block=\"assert %cond|with value %code\"\n    export function assert(cond: boolean, code: number) {\n        if (!cond) {\n            fail(\"Assertion failed, code=\" + code)\n        }\n    }\n\n    export function fail(message: string) {\n        console.log(\"Fatal failure: \")\n        console.log(message)\n        panic(108)\n    }\n\n    export class AnimationQueue {\n        running: boolean;\n        eventID: number;\n        public interval: number;\n\n        constructor() {\n            this.running = false;\n            this.eventID = control.allocateNotifyEvent();\n            this.interval = 1;\n        }\n\n        /**\n         * Runs 'render' in a loop until it returns false or the 'stop' function is called\n         */\n        runUntilDone(render: () => boolean) {\n            const evid = this.eventID;\n\n            // if other animation, wait for turn\n            if (this.running)\n                control.waitForEvent(DAL.DEVICE_ID_NOTIFY, evid);\n\n            // check if the animation hasn't been cancelled since we've waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // run animation\n            this.running = true;\n            while (this.running\n                && !this.isCancelled(evid)\n                && render()) {\n                pause(this.interval);\n            }\n\n            // check if the animation hasn't been cancelled since we've been waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // we're done\n            this.running = false;\n            // unblock 1 fiber\n            control.raiseEvent(DAL.DEVICE_ID_NOTIFY_ONE, this.eventID);\n        }\n\n        isCancelled(evid: number) {\n            return this.eventID !== evid;\n        }\n\n        /**\n         * Cancels the current running animation and clears the queue\n         */\n        cancel() {\n            if (this.running) {\n                this.running = false;\n                const evid = this.eventID;\n                this.eventID = control.allocateNotifyEvent();\n                // unblock fibers\n                control.raiseEvent(DAL.DEVICE_ID_NOTIFY, evid);\n            }\n        }\n    }\n\n    class PollEvent {\n        public eid: number;\n        public vid: number;\n        public start: number;\n        public timeOut: number;\n        public condition: () => boolean;\n        public once: boolean;\n        constructor(eid: number, vid: number, start: number, timeOut: number, condition: () => boolean, once: boolean) {\n            this.eid = eid;\n            this.vid = vid;\n            this.start = start;\n            this.timeOut = timeOut;\n            this.condition = condition;\n            this.once = once;\n        }\n    }\n\n    let _pollEventQueue: PollEvent[] = undefined;\n\n    function pollEvents() {\n        while (_pollEventQueue.length > 0) {\n            const now = control.millis();\n            for (let i = 0; i < _pollEventQueue.length; ++i) {\n                const ev = _pollEventQueue[i];\n                if (ev.condition() || (ev.timeOut > 0 && now - ev.start > ev.timeOut)) {\n                    control.raiseEvent(ev.eid, ev.vid);\n                    if (ev.once) {\n                        _pollEventQueue.splice(i, 1);\n                        --i;\n                    }\n                }\n            }\n            pause(50);\n        }\n        // release fiber\n        _pollEventQueue = undefined;\n    }\n\n    export function __queuePollEvent(timeOut: number, condition: () => boolean, handler: () => void) {\n        const ev = new PollEvent(\n            control.allocateNotifyEvent(),\n            1,\n            control.millis(),\n            timeOut,\n            condition,\n            !handler\n        );\n\n        // start polling fiber if needed\n        if (!_pollEventQueue) {\n            _pollEventQueue = [ev];\n            control.runInParallel(pollEvents);\n        }\n        else {\n            // add to the queue\n            _pollEventQueue.push(ev)\n        }\n\n        // register event\n        if (handler)\n            control.onEvent(ev.eid, ev.vid, handler);\n        else // or wait\n            control.waitForEvent(ev.eid, ev.vid);\n    }\n\n    //% shim=pxt::getConfig\n    export declare function getConfigValue(key: int32, defl: int32): number;\n\n    //% shim=pxt::programHash\n    export function programHash(): number { return 0 }\n}\n\n/**\n * Busy wait for a condition to be true\n * @param condition condition to test for\n * @param timeOut if positive, maximum duration to wait for in milliseconds\n */\n//% blockId=\"pxt_pause_until\"\nfunction pauseUntil(condition: () => boolean, timeOut?: number): void {\n    if (!condition || condition()) return; // optimistic path\n    if (!timeOut) timeOut = 0;\n    control.__queuePollEvent(timeOut, condition, undefined);\n}\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true blockNamespace=\"loops\"\n//% blockId=forever block=\"forever\" blockAllowMultiple=1\nfunction forever(a: () => void): void {\n    loops.forever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause blockNamespace=\"loops\"\nfunction pause(ms: number): void {\n    loops.pause(ms);\n}\n\n/**\n * Tagged hex literal converter\n */\n//% shim=@hex\nfunction hex(lits: any, ...args: any[]): Buffer { return null }\n\n// micro:bit compatibility\n// these functions allow some level of reuse\n// between micro:bit and other maker-style editors\nnamespace basic {\n    export function pause(millis: number) {\n        loops.pause(millis);\n    }\n}",
      "core.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n#include <stdlib.h>\n\nusing namespace std;\n\n#define p10(v) __builtin_powi(10, v)\n\nnamespace pxt {\n\nstatic HandlerBinding *handlerBindings;\n\nHandlerBinding *findBinding(int source, int value) {\n    for (auto p = handlerBindings; p; p = p->next) {\n        if (p->source == source && p->value == value) {\n            return p;\n        }\n    }\n    return 0;\n}\n\nvoid setBinding(int source, int value, Action act) {\n    auto curr = findBinding(source, value);\n    incr(act);\n    if (curr) {\n        decr(curr->action);\n        curr->action = act;\n        return;\n    }\n    curr = new HandlerBinding();\n    curr->next = handlerBindings;\n    curr->source = source;\n    curr->value = value;\n    curr->action = act;\n    registerGC(&curr->action);\n    handlerBindings = curr;\n}\n\nPXT_DEF_STRING(emptyString, \"\")\n\nstatic const char emptyBuffer[] __attribute__((aligned(4))) = \"@PXT#:\\x00\\x00\\x00\";\n\nString mkString(const char *data, int len) {\n    if (len < 0)\n        len = strlen(data);\n    if (len == 0)\n        return (String)emptyString;\n    String r = new (gcAllocate(sizeof(BoxedString) + len + 1)) BoxedString();\n    r->length = len;\n    if (data)\n        memcpy(r->data, data, len);\n    r->data[len] = 0;\n    MEMDBG(\"mkString: len=%d => %p\", len, r);\n    return r;\n}\n\nBuffer mkBuffer(const uint8_t *data, int len) {\n    if (len <= 0)\n        return (Buffer)emptyBuffer;\n    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();\n    r->length = len;\n    if (data)\n        memcpy(r->data, data, len);\n    else\n        memset(r->data, 0, len);\n    MEMDBG(\"mkBuffer: len=%d => %p\", len, r);\n    return r;\n}\n\nstatic unsigned random_value = 0xC0DA1;\n\nvoid seedRandom(unsigned seed) {\n    random_value = seed;\n}\n\nunsigned getRandom(unsigned max) {\n    unsigned m, result;\n\n    do {\n        m = (unsigned)max;\n        result = 0;\n\n        do {\n            // Cycle the LFSR (Linear Feedback Shift Register).\n            // We use an optimal sequence with a period of 2^32-1, as defined by Bruce Schneier here\n            // (a true legend in the field!),\n            // For those interested, it's documented in his paper:\n            // \"Pseudo-Random Sequence Generator for 32-Bit CPUs: A fast, machine-independent\n            // generator for 32-bit Microprocessors\"\n            // https://www.schneier.com/paper-pseudorandom-sequence.html\n            unsigned r = random_value;\n\n            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |\n                (r >> 1);\n\n            random_value = r;\n\n            result = ((result << 1) | (r & 0x00000001));\n        } while (m >>= 1);\n    } while (result > (unsigned)max);\n\n    return result;\n}\n\nPXT_DEF_STRING(sTrue, \"true\")\nPXT_DEF_STRING(sFalse, \"false\")\nPXT_DEF_STRING(sUndefined, \"undefined\")\nPXT_DEF_STRING(sNull, \"null\")\nPXT_DEF_STRING(sObject, \"[Object]\")\nPXT_DEF_STRING(sFunction, \"[Function]\")\nPXT_DEF_STRING(sNaN, \"NaN\")\nPXT_DEF_STRING(sInf, \"Infinity\")\nPXT_DEF_STRING(sMInf, \"-Infinity\")\n} // namespace pxt\n\n#ifndef X86_64\n\nnamespace String_ {\n\n//%\nString mkEmpty() {\n    return mkString(\"\", 0);\n}\n\n//%\nString fromCharCode(int code) {\n    char buf[] = {(char)code, 0};\n    return mkString(buf, 1);\n}\n\n//%\nString charAt(String s, int pos) {\n    if (s && 0 <= pos && pos < s->length) {\n        return fromCharCode(s->data[pos]);\n    } else {\n        return mkEmpty();\n    }\n}\n\n//%\nTNumber charCodeAt(String s, int pos) {\n    if (s && 0 <= pos && pos < s->length) {\n        return fromInt(s->data[pos]);\n    } else {\n        return TAG_NAN;\n    }\n}\n\n//%\nString concat(String s, String other) {\n    if (!s)\n        s = (String)sNull;\n    if (!other)\n        other = (String)sNull;\n    if (s->length == 0)\n        return (String)incrRC(other);\n    if (other->length == 0)\n        return (String)incrRC(s);\n    String r = mkString(NULL, s->length + other->length);\n    memcpy(r->data, s->data, s->length);\n    memcpy(r->data + s->length, other->data, other->length);\n    return r;\n}\n\nint compare(String a, String b) {\n    if (a == b)\n        return 0;\n\n    int compareResult = strcmp(a->data, b->data);\n    if (compareResult < 0)\n        return -1;\n    else if (compareResult > 0)\n        return 1;\n    return 0;\n}\n\n//%\nint length(String s) {\n    return s->length;\n}\n\n#define isspace(c) ((c) == ' ')\n\nNUMBER mystrtod(const char *p, char **endp) {\n    while (isspace(*p))\n        p++;\n    NUMBER m = 1;\n    NUMBER v = 0;\n    int dot = 0;\n    if (*p == '+')\n        p++;\n    if (*p == '-') {\n        m = -1;\n        p++;\n    }\n    if (*p == '0' && (p[1] | 0x20) == 'x') {\n        return m * strtol(p, endp, 16);\n    }\n    while (*p) {\n        int c = *p - '0';\n        if (0 <= c && c <= 9) {\n            v *= 10;\n            v += c;\n            if (dot)\n                m /= 10;\n        } else if (!dot && *p == '.') {\n            dot = 1;\n        } else if (*p == 'e' || *p == 'E') {\n            break;\n        } else {\n            while (isspace(*p))\n                p++;\n            if (*p)\n                return NAN;\n            break;\n        }\n        p++;\n    }\n\n    v *= m;\n\n    if (*p) {\n        p++;\n        int pw = strtol(p, endp, 10);\n        v *= p10(pw);\n    } else {\n        *endp = (char *)p;\n    }\n\n    return v;\n}\n\n//%\nTNumber toNumber(String s) {\n    // JSCHECK\n    char *endptr;\n    NUMBER v = mystrtod(s->data, &endptr);\n    if (endptr != s->data + s->length)\n        v = NAN;\n    else if (v == 0.0 || v == -0.0)\n        v = v;\n    else if (!isnormal(v))\n        v = NAN;\n    return fromDouble(v);\n}\n\n//%\nString substr(String s, int start, int length) {\n    if (length <= 0)\n        return mkEmpty();\n    if (start < 0)\n        start = max(s->length + start, 0);\n    length = min(length, s->length - start);\n    return mkString(s->data + start, length);\n}\n\n//%\nint indexOf(String s, String searchString, int start) {\n    if (!s || !searchString)\n        return -1;\n    if (start < 0 || start + searchString->length > s->length)\n        return -1;\n    const char *match = strstr(((const char *)s->data + start), searchString->data);\n    if (NULL == match)\n        return -1;\n    return match - s->data;\n}\n\n//%\nint includes(String s, String searchString, int start) {\n    return -1 != indexOf(s, searchString, start);\n}\n\n} // namespace String_\n\nnamespace Boolean_ {\n//%\nbool bang(int v) {\n    return v == 0;\n}\n} // namespace Boolean_\n\nnamespace pxt {\n\n// ES5 9.5, 9.6\nunsigned toUInt(TNumber v) {\n    if (isNumber(v))\n        return numValue(v);\n    if (isSpecial(v)) {\n        if ((intptr_t)v >> 6)\n            return 1;\n        else\n            return 0;\n    }\n    if (!v)\n        return 0;\n\n    NUMBER num = toDouble(v);\n    if (!isnormal(num))\n        return 0;\n#ifdef PXT_USE_FLOAT\n    float rem = fmodf(truncf(num), 4294967296.0);\n#else\n    double rem = fmod(trunc(num), 4294967296.0);\n#endif\n    if (rem < 0.0)\n        rem += 4294967296.0;\n    return (unsigned)rem;\n}\nint toInt(TNumber v) {\n    return (int)toUInt(v);\n}\n\nNUMBER toDouble(TNumber v) {\n    if (v == TAG_NAN || v == TAG_UNDEFINED)\n        return NAN;\n    if (isTagged(v))\n        return toInt(v);\n\n    ValType t = valType(v);\n    if (t == ValType::Number) {\n        BoxedNumber *p = (BoxedNumber *)v;\n        return p->num;\n    } else if (t == ValType::String) {\n        // TODO avoid allocation\n        auto tmp = String_::toNumber((String)v);\n        auto r = toDouble(tmp);\n        decr(tmp);\n        return r;\n    } else {\n        return NAN;\n    }\n}\n\nfloat toFloat(TNumber v) {\n    // TODO optimize?\n    return (float)toDouble(v);\n}\n\n#if !defined(PXT_HARD_FLOAT) && !defined(PXT_USE_FLOAT)\nunion NumberConv {\n    double v;\n    struct {\n        uint32_t word0;\n        uint32_t word1;\n    };\n};\n\nstatic inline TValue doubleToInt(double x) {\n    NumberConv cnv;\n    cnv.v = x;\n\n    if (cnv.word1 == 0 && cnv.word0 == 0)\n        return TAG_NUMBER(0);\n\n    auto ex = (int)((cnv.word1 << 1) >> 21) - 1023;\n\n    // DMESG(\"v=%d/1000 %p %p %d\", (int)(x * 1000), cnv.word0, cnv.word1, ex);\n\n    if (ex < 0 || ex > 29) {\n        // the 'MININT' case\n        if (ex == 30 && cnv.word0 == 0 && cnv.word1 == 0xC1D00000)\n            return (TValue)(0x80000001);\n        return NULL;\n    }\n\n    int32_t r;\n\n    if (ex <= 20) {\n        if (cnv.word0)\n            return TAG_UNDEFINED;\n        if (cnv.word1 << (ex + 12))\n            return TAG_UNDEFINED;\n        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);\n    } else {\n        if (cnv.word0 << (ex - 20))\n            return TAG_UNDEFINED;\n        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);\n        r |= cnv.word0 >> (32 - (ex - 20));\n    }\n\n    if (cnv.word1 >> 31)\n        return TAG_NUMBER(-r);\n    else\n        return TAG_NUMBER(r);\n}\n#else\nstatic inline TValue doubleToInt(NUMBER r) {\n    int ri = ((int)r) << 1;\n    if ((ri >> 1) == r)\n        return (TNumber)(ri | 1);\n    return TAG_UNDEFINED;\n}\n#endif\n\nTNumber fromDouble(NUMBER r) {\n#ifndef PXT_BOX_DEBUG\n    auto i = doubleToInt(r);\n    if (i)\n        return i;\n#endif\n    if (isnan(r))\n        return TAG_NAN;\n    BoxedNumber *p = NEW_GC(BoxedNumber);\n    p->num = r;\n    MEMDBG(\"mkNum: %d/1000 => %p\", (int)(r * 1000), p);\n    return (TNumber)p;\n}\n\nTNumber fromFloat(float r) {\n    // TODO optimize\n    return fromDouble(r);\n}\n\nTNumber fromInt(int v) {\n    if (canBeTagged(v))\n        return TAG_NUMBER(v);\n    return fromDouble(v);\n}\n\nTNumber fromUInt(unsigned v) {\n#ifndef PXT_BOX_DEBUG\n    if (v <= 0x3fffffff)\n        return TAG_NUMBER(v);\n#endif\n    return fromDouble(v);\n}\n\nTValue fromBool(bool v) {\n    if (v)\n        return TAG_TRUE;\n    else\n        return TAG_FALSE;\n}\n\nTNumber eqFixup(TNumber v) {\n    if (v == TAG_NULL)\n        return TAG_UNDEFINED;\n    if (v == TAG_TRUE)\n        return TAG_NUMBER(1);\n    if (v == TAG_FALSE)\n        return TAG_NUMBER(0);\n    return v;\n}\n\nstatic inline bool eq_core(TValue a, TValue b, ValType ta) {\n#ifndef PXT_BOX_DEBUG\n    int aa = (int)a;\n    int bb = (int)b;\n\n    // if at least one of the values is tagged, they are not equal\n    if ((aa | bb) & 3)\n        return false;\n#endif\n\n    if (ta == ValType::String)\n        return String_::compare((String)a, (String)b) == 0;\n    else if (ta == ValType::Number)\n        return toDouble(a) == toDouble(b);\n    else\n        return a == b;\n}\n\nbool eqq_bool(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return false;\n\n    if (a == b)\n        return true;\n\n    if (bothNumbers(a, b))\n        return false;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if (ta != tb)\n        return false;\n\n    return eq_core(a, b, ta);\n}\n\nbool eq_bool(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return false;\n\n    if (eqFixup(a) == eqFixup(b))\n        return true;\n\n    if (bothNumbers(a, b))\n        return false;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if ((ta == ValType::String && tb == ValType::Number) ||\n        (tb == ValType::String && ta == ValType::Number))\n        return toDouble(a) == toDouble(b);\n\n    if (ta == ValType::Boolean) {\n        a = eqFixup(a);\n        ta = ValType::Number;\n    }\n    if (tb == ValType::Boolean) {\n        b = eqFixup(b);\n        tb = ValType::Number;\n    }\n\n    if (ta != tb)\n        return false;\n\n    return eq_core(a, b, ta);\n}\n\n// TODO move to assembly\n//%\nbool switch_eq(TValue a, TValue b) {\n    if (eq_bool(a, b)) {\n        decr(b);\n        return true;\n    }\n    return false;\n}\n\n} // namespace pxt\n\n#define NUMOP(op) return fromDouble(toDouble(a) op toDouble(b));\n#define BITOP(op) return fromInt(toInt(a) op toInt(b));\nnamespace numops {\n\nint toBool(TValue v) {\n    if (isTagged(v)) {\n        if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NAN || v == TAG_NULL ||\n            v == TAG_NUMBER(0))\n            return 0;\n        else\n            return 1;\n    }\n\n    ValType t = valType(v);\n    if (t == ValType::String) {\n        String s = (String)v;\n        if (s->length == 0)\n            return 0;\n    } else if (t == ValType::Number) {\n        auto x = toDouble(v);\n        if (isnan(x) || x == 0.0 || x == -0.0)\n            return 0;\n        else\n            return 1;\n    }\n\n    return 1;\n}\n\nint toBoolDecr(TValue v) {\n    if (v == TAG_TRUE)\n        return 1;\n    if (v == TAG_FALSE)\n        return 0;\n    int r = toBool(v);\n    decr(v);\n    return r;\n}\n\n// TODO\n// The integer, non-overflow case for add/sub/bit opts is handled in assembly\n\n//%\nTNumber adds(TNumber a, TNumber b){NUMOP(+)}\n\n//%\nTNumber subs(TNumber a, TNumber b){NUMOP(-)}\n\n//%\nTNumber muls(TNumber a, TNumber b) {\n    if (bothNumbers(a, b)) {\n        int aa = (int)a;\n        int bb = (int)b;\n        // if both operands fit 15 bits, the result will not overflow int\n        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {\n            // it may overflow 31 bit int though - use fromInt to convert properly\n            return fromInt((aa >> 1) * (bb >> 1));\n        }\n    }\n    NUMOP(*)\n}\n\n//%\nTNumber div(TNumber a, TNumber b){NUMOP(/)}\n\n//%\nTNumber mod(TNumber a, TNumber b) {\n    if (isNumber(a) && isNumber(b) && numValue(b))\n        BITOP(%)\n    return fromDouble(fmod(toDouble(a), toDouble(b)));\n}\n\n//%\nTNumber lsls(TNumber a, TNumber b){BITOP(<<)}\n\n//%\nTNumber lsrs(TNumber a, TNumber b) {\n    return fromUInt(toUInt(a) >> toUInt(b));\n}\n\n//%\nTNumber asrs(TNumber a, TNumber b){BITOP(>>)}\n\n//%\nTNumber eors(TNumber a, TNumber b){BITOP (^)}\n\n//%\nTNumber orrs(TNumber a, TNumber b){BITOP(|)}\n\n//%\nTNumber bnot(TNumber a) {\n    return fromInt(~toInt(a));\n}\n\n//%\nTNumber ands(TNumber a, TNumber b) {\n    BITOP(&)\n}\n\n#define CMPOP_RAW(op, t, f)                                                                        \\\n    if (bothNumbers(a, b))                                                                         \\\n        return (int)a op((int)b) ? t : f;                                                          \\\n    int cmp = valCompare(a, b);                                                                    \\\n    return cmp != -2 && cmp op 0 ? t : f;\n\n#define CMPOP(op) CMPOP_RAW(op, TAG_TRUE, TAG_FALSE)\n\n// 7.2.13 Abstract Relational Comparison\nstatic int valCompare(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return -2;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if (ta == ValType::String && tb == ValType::String)\n        return String_::compare((String)a, (String)b);\n\n    if (a == b)\n        return 0;\n\n    auto da = toDouble(a);\n    auto db = toDouble(b);\n\n    if (isnan(da) || isnan(db))\n        return -2;\n\n    if (da < db)\n        return -1;\n    else if (da > db)\n        return 1;\n    else\n        return 0;\n}\n\n//%\nbool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<, true, false)}\n\n//%\nTNumber le(TNumber a, TNumber b){CMPOP(<=)}\n\n//%\nTNumber lt(TNumber a, TNumber b){CMPOP(<)}\n\n//%\nTNumber ge(TNumber a, TNumber b){CMPOP(>=)}\n\n//%\nTNumber gt(TNumber a, TNumber b){CMPOP(>)}\n\n//%\nTNumber eq(TNumber a, TNumber b) {\n    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neq(TNumber a, TNumber b) {\n    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber eqq(TNumber a, TNumber b) {\n    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neqq(TNumber a, TNumber b) {\n    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\nvoid mycvt(NUMBER d, char *buf) {\n    if (d < 0) {\n        *buf++ = '-';\n        d = -d;\n    }\n\n    if (!d) {\n        *buf++ = '0';\n        *buf++ = 0;\n        return;\n    }\n\n    int pw = (int)log10(d);\n    int e = 1;\n    int beforeDot = 1;\n\n    if (0.000001 <= d && d < 1e21) {\n        if (pw > 0) {\n            d /= p10(pw);\n            beforeDot = 1 + pw;\n        }\n    } else {\n        d /= p10(pw);\n        e = pw;\n    }\n\n    int sig = 0;\n    while (sig < 17 || beforeDot > 0) {\n        // printf(\"%f sig=%d bd=%d\\n\", d, sig, beforeDot);\n        int c = (int)d;\n        *buf++ = '0' + c;\n        d = (d - c) * 10;\n        if (--beforeDot == 0)\n            *buf++ = '.';\n        if (sig || c)\n            sig++;\n    }\n\n    buf--;\n    while (*buf == '0')\n        buf--;\n    if (*buf == '.')\n        buf--;\n    buf++;\n\n    if (e != 1) {\n        *buf++ = 'e';\n        itoa(e, buf);\n    } else {\n        *buf = 0;\n    }\n}\n\n#if 0\n//%\nTValue floatAsInt(TValue x) {\n    return doubleToInt(toDouble(x));\n}\n\n//% shim=numops::floatAsInt\nfunction floatAsInt(v: number): number { return 0 }\n\nfunction testInt(i: number) {\n    if (floatAsInt(i) != i)\n        control.panic(101)\n    if (floatAsInt(i + 0.5) != null)\n        control.panic(102)\n    if (floatAsInt(i + 0.00001) != null)\n        control.panic(103)\n}\n\nfunction testFloat(i: number) {\n    if (floatAsInt(i) != null)\n        control.panic(104)\n}\n\nfunction testFloatAsInt() {\n    for (let i = 0; i < 0xffff; ++i) {\n        testInt(i)\n        testInt(-i)\n        testInt(i * 10000)\n        testInt(i << 12)\n        testInt(i + 0x3fff0001)\n        testInt(-i - 0x3fff0002)\n        testFloat(i + 0x3fffffff + 1)\n        testFloat((i + 10000) * 1000000)\n    }   \n}\n#endif\n\nString toString(TValue v) {\n    ValType t = valType(v);\n\n    if (t == ValType::String) {\n        return (String)(void *)incr(v);\n    } else if (t == ValType::Number) {\n        char buf[64];\n\n        if (isNumber(v)) {\n            itoa(numValue(v), buf);\n            return mkString(buf);\n        }\n\n        if (v == TAG_NAN)\n            return (String)(void *)sNaN;\n\n        auto x = toDouble(v);\n\n#ifdef PXT_BOX_DEBUG\n        if (x == (int)x) {\n            itoa((int)x, buf);\n            return mkString(buf);\n        }\n#endif\n\n        if (isinf(x)) {\n            if (x < 0)\n                return (String)(void *)sMInf;\n            else\n                return (String)(void *)sInf;\n        } else if (isnan(x)) {\n            return (String)(void *)sNaN;\n        }\n        mycvt(x, buf);\n\n        return mkString(buf);\n    } else if (t == ValType::Function) {\n        return (String)(void *)sFunction;\n    } else {\n        if (v == TAG_UNDEFINED)\n            return (String)(void *)sUndefined;\n        else if (v == TAG_FALSE)\n            return (String)(void *)sFalse;\n        else if (v == TAG_NAN)\n            return (String)(void *)sNaN;\n        else if (v == TAG_TRUE)\n            return (String)(void *)sTrue;\n        else if (v == TAG_NULL)\n            return (String)(void *)sNull;\n        return (String)(void *)sObject;\n    }\n}\n\n} // namespace numops\n\nnamespace Math_ {\n//%\nTNumber pow(TNumber x, TNumber y) {\n#ifdef PXT_POWI\n    // regular pow() from math.h is 4k of code\n    return fromDouble(__builtin_powi(toDouble(x), toInt(y)));\n#else\n    return fromDouble(::pow(toDouble(x), toDouble(y)));\n#endif\n}\n\n//%\nTNumber atan2(TNumber y, TNumber x) {\n    return fromDouble(::atan2(toDouble(y), toDouble(x)));\n}\n\nNUMBER randomDouble() {\n    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +\n           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);\n}\n\n//%\nTNumber random() {\n    return fromDouble(randomDouble());\n}\n\n//%\nTNumber randomRange(TNumber min, TNumber max) {\n    if (isNumber(min) && isNumber(max)) {\n        int mini = numValue(min);\n        int maxi = numValue(max);\n        if (mini > maxi) {\n            int temp = mini;\n            mini = maxi;\n            maxi = temp;\n        }\n        if (maxi == mini)\n            return fromInt(mini);\n        else\n            return fromInt(mini + getRandom(maxi - mini));\n    } else {\n        auto mind = toDouble(min);\n        auto maxd = toDouble(max);\n        if (mind > maxd) {\n            auto temp = mind;\n            mind = maxd;\n            maxd = temp;\n        }\n        if (maxd == mind)\n            return fromDouble(mind);\n        else {\n            return fromDouble(mind + randomDouble() * (maxd - mind));\n        }\n    }\n}\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\n//%\nTNumber log(TNumber x){SINGLE(log)}\n\n//%\nTNumber log10(TNumber x){SINGLE(log10)}\n\n//%\nTNumber tan(TNumber x){SINGLE(tan)}\n\n//%\nTNumber sin(TNumber x){SINGLE(sin)}\n\n//%\nTNumber cos(TNumber x){SINGLE(cos)}\n\n//%\nTNumber atan(TNumber x){SINGLE(atan)}\n\n//%\nTNumber asin(TNumber x){SINGLE(asin)}\n\n//%\nTNumber acos(TNumber x){SINGLE(acos)}\n\n//%\nTNumber sqrt(TNumber x){SINGLE(sqrt)}\n\n//%\nTNumber floor(TNumber x){SINGLE(floor)}\n\n//%\nTNumber ceil(TNumber x){SINGLE(ceil)}\n\n//%\nTNumber trunc(TNumber x){SINGLE(trunc)}\n\n//%\nTNumber round(TNumber x) {\n    // In C++, round(-1.5) == -2, while in JS, round(-1.5) == -1. Align to the JS convention for\n    // consistency between simulator and device. The following does rounding with ties (x.5) going\n    // towards positive infinity.\n    return fromDouble(::floor(toDouble(x) + 0.5));\n}\n\n//%\nint imul(int x, int y) {\n    return x * y;\n}\n\n//%\nint idiv(int x, int y) {\n    return x / y;\n}\n} // namespace Math_\n\nnamespace Array_ {\nRefCollection *mk() {\n    auto r = NEW_GC(RefCollection);\n    MEMDBG(\"mkColl: => %p\", r);\n    return r;\n}\nint length(RefCollection *c) {\n    return c->length();\n}\nvoid setLength(RefCollection *c, int newLength) {\n    c->setLength(newLength);\n}\nvoid push(RefCollection *c, TValue x) {\n    c->head.push(x);\n}\nTValue pop(RefCollection *c) {\n    return c->head.pop();\n}\nTValue getAt(RefCollection *c, int x) {\n    return c->head.get(x);\n}\nvoid setAt(RefCollection *c, int x, TValue y) {\n    c->head.set(x, y);\n}\nTValue removeAt(RefCollection *c, int x) {\n    return c->head.remove(x);\n}\nvoid insertAt(RefCollection *c, int x, TValue value) {\n    c->head.insert(x, value);\n}\nint indexOf(RefCollection *c, TValue x, int start) {\n    auto data = c->head.getData();\n    auto len = c->head.getLength();\n    for (unsigned i = 0; i < len; i++) {\n        if (pxt::eq_bool(data[i], x)) {\n            return (int)i;\n        }\n    }\n    return -1;\n}\nbool removeElement(RefCollection *c, TValue x) {\n    int idx = indexOf(c, x, 0);\n    if (idx >= 0) {\n        decr(removeAt(c, idx));\n        return 1;\n    }\n    return 0;\n}\n} // namespace Array_\n\nnamespace pxt {\n//%\nvoid *ptrOfLiteral(int offset);\n\n//%\nunsigned programSize() {\n    return bytecode[17] * 8;\n}\n\n//%\nint getConfig(int key, int defl) {\n    int *cfgData;\n\n#ifdef PXT_BOOTLOADER_CFG_ADDR\n    cfgData = *(int **)(PXT_BOOTLOADER_CFG_ADDR);\n#ifdef PXT_BOOTLOADER_CFG_MAGIC\n    cfgData++;\n    if ((void *)0x200 <= cfgData && cfgData < (void *)PXT_BOOTLOADER_CFG_ADDR &&\n        cfgData[-1] == (int)PXT_BOOTLOADER_CFG_MAGIC)\n#endif\n        for (int i = 0;; i += 2) {\n            if (cfgData[i] == key)\n                return cfgData[i + 1];\n            if (cfgData[i] == 0)\n                break;\n        }\n#endif\n\n    cfgData = *(int **)&bytecode[18];\n    for (int i = 0;; i += 2) {\n        if (cfgData[i] == key)\n            return cfgData[i + 1];\n        if (cfgData[i] == 0)\n            return defl;\n    }\n}\n\n} // namespace pxt\n\nnamespace pxtrt {\n//%\nTValue ldlocRef(RefRefLocal *r) {\n    TValue tmp = r->v;\n    incr(tmp);\n    return tmp;\n}\n\n//%\nvoid stlocRef(RefRefLocal *r, TValue v) {\n    decr(r->v);\n    r->v = v;\n}\n\n//%\nRefRefLocal *mklocRef() {\n    auto r = NEW_GC(RefRefLocal);\n    MEMDBG(\"mklocRef: => %p\", r);\n    return r;\n}\n\n// Store a captured local in a closure. It returns the action, so it can be chained.\n//%\nRefAction *stclo(RefAction *a, int idx, TValue v) {\n    // DBG(\"STCLO \"); a->print(); DBG(\"@%d = %p\\n\", idx, (void*)v);\n    a->stCore(idx, v);\n    return a;\n}\n\n//%\nvoid panic(int code) {\n    target_panic(code);\n}\n\n//%\nString emptyToNull(String s) {\n    if (!s || s->length == 0)\n        return NULL;\n    return s;\n}\n\n//%\nint ptrToBool(TValue p) {\n    if (p) {\n        decr(p);\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n//%\nRefMap *mkMap() {\n    auto r = NEW_GC(RefMap);\n    MEMDBG(\"mkMap: => %p\", r);\n    return r;\n}\n\n//%\nTValue mapGetByString(RefMap *map, String key) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        return 0;\n    }\n    TValue r = incr(map->values.get(i));\n    return r;\n}\n\n//%\nint lookupMapKey(String key) {\n    auto arr = *(uintptr_t **)&bytecode[22];\n    auto len = *arr++;\n    auto ikey = (uintptr_t)key;\n    auto l = 0U;\n    auto r = len - 1;\n    if (arr[0] <= ikey && ikey <= arr[len - 1]) {\n        while (l <= r) {\n            auto m = (l + r) >> 1;\n            if (arr[m] == ikey)\n                return m;\n            else if (arr[m] < ikey)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n    } else {\n        while (l <= r) {\n            auto m = (l + r) >> 1;\n            auto cmp = String_::compare((String)arr[m], key);\n            if (cmp == 0)\n                return m;\n            else if (cmp < 0)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n    }\n    return 0;\n}\n\n//%\nTValue mapGet(RefMap *map, unsigned key) {\n    auto arr = *(String **)&bytecode[22];\n    auto r = mapGetByString(map, arr[key + 1]);\n    map->unref();\n    return r;\n}\n\n//%\nvoid mapSetByString(RefMap *map, String key, TValue val) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        incrRC(key);\n        map->keys.push((TValue)key);\n        map->values.push(val);\n    } else {\n        map->values.set(i, val);\n    }\n    incr(val);\n}\n\n//%\nvoid mapSet(RefMap *map, unsigned key, TValue val) {\n    auto arr = *(String **)&bytecode[22];\n    mapSetByString(map, arr[key + 1], val);\n    decr(val);\n    map->unref();\n}\n\n//\n// Debugger\n//\n\n// This is only to be called once at the beginning of lambda function\n//%\nvoid *getGlobalsPtr() {\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    return globals;\n}\n\n//%\nvoid runtimeWarning(String s) {\n    // noop for now\n}\n} // namespace pxtrt\n#endif\n\nnamespace pxt {\n\n//%\nValType valType(TValue v) {\n    if (isTagged(v)) {\n        if (!v)\n            return ValType::Undefined;\n\n        if (isNumber(v) || v == TAG_NAN)\n            return ValType::Number;\n        if (v == TAG_TRUE || v == TAG_FALSE)\n            return ValType::Boolean;\n        else if (v == TAG_NULL)\n            return ValType::Object;\n        else {\n            oops(1);\n            return ValType::Object;\n        }\n    } else {\n        auto vt = getVTable((RefObject *)v);\n        if (vt->magic == VTABLE_MAGIC)\n            return vt->objectType;\n        else\n            return ValType::Object;\n    }\n}\n\nPXT_DEF_STRING(sObjectTp, \"object\")\nPXT_DEF_STRING(sBooleanTp, \"boolean\")\nPXT_DEF_STRING(sStringTp, \"string\")\nPXT_DEF_STRING(sNumberTp, \"number\")\nPXT_DEF_STRING(sFunctionTp, \"function\")\nPXT_DEF_STRING(sUndefinedTp, \"undefined\")\n\n//%\nString typeOf(TValue v) {\n    switch (valType(v)) {\n    case ValType::Undefined:\n        return (String)sUndefinedTp;\n    case ValType::Boolean:\n        return (String)sBooleanTp;\n    case ValType::Number:\n        return (String)sNumberTp;\n    case ValType::String:\n        return (String)sStringTp;\n    case ValType::Object:\n        return (String)sObjectTp;\n    case ValType::Function:\n        return (String)sFunctionTp;\n    default:\n        oops(2);\n        return 0;\n    }\n}\n\n// Maybe in future we will want separate print methods; for now ignore\nvoid anyPrint(TValue v) {\n    if (valType(v) == ValType::Object) {\n        if (isRefCounted(v)) {\n            auto o = (RefObject *)v;\n            auto vt = getVTable(o);\n            auto meth = ((RefObjectMethod)vt->methods[1]);\n            if ((void *)meth == (void *)&anyPrint)\n                DMESG(\"[RefObject refs=%d vt=%p cl=%d sz=%d]\", REFCNT(o), o->vtable, vt->classNo,\n                      vt->numbytes);\n            else\n                meth(o);\n        } else {\n            DMESG(\"[Native %p]\", v);\n        }\n    } else {\n#ifndef X86_64\n        String s = numops::toString(v);\n        DMESG(\"[%s %p = %s]\", pxt::typeOf(v)->data, v, s->data);\n        decr((TValue)s);\n#endif\n    }\n}\n\nstatic void dtorDoNothing() {}\n\n#ifdef PXT_GC\n#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \\\n    static uint32_t name##_size(tp *p) { return ((sizeof(tp) + szexpr) + 3) >> 2; }                \\\n    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint, 0,              \\\n               (void *)&name##_size)\n#else\n#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \\\n    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint)\n#endif\n\nPRIM_VTABLE(string, ValType::String, BoxedString, p->length + 1)\nPRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)\nPRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)\n// PRIM_VTABLE(action, ValType::Function, RefAction, )\n\nvoid failedCast(TValue v) {\n    DMESG(\"failed type check for %p\", v);\n    auto vt = getAnyVTable(v);\n    if (vt) {\n        DMESG(\"VT %p - objtype %d classNo %d\", vt, vt->objectType, vt->classNo);\n    }\n\n    int code;\n    if (v == TAG_NULL)\n        code = PANIC_CAST_FROM_NULL;\n    else\n        code = PANIC_CAST_FIRST + (int)valType(v);\n    target_panic(code);\n}\n\nvoid missingProperty(TValue v) {\n    DMESG(\"missing property on %p\", v);\n    target_panic(PANIC_MISSING_PROPERTY);\n}\n\n#ifdef PXT_PROFILE\nstruct PerfCounter *perfCounters;\n\nstruct PerfCounterInfo {\n    uint32_t numPerfCounters;\n    char *perfCounterNames[0];\n};\n\n#define PERF_INFO ((PerfCounterInfo *)(((uintptr_t *)bytecode)[13]))\n\nvoid initPerfCounters() {\n    auto n = PERF_INFO->numPerfCounters;\n    perfCounters = new PerfCounter[n];\n    memset(perfCounters, 0, n * sizeof(PerfCounter));\n}\n\nvoid dumpPerfCounters() {\n    auto info = PERF_INFO;\n    DMESG(\"calls,us,name\");\n    for (uint32_t i = 0; i < info->numPerfCounters; ++i) {\n        auto c = &perfCounters[i];\n        DMESG(\"%d,%d,%s\", c->numstops, c->value, info->perfCounterNames[i]);\n    }\n}\n\nvoid startPerfCounter(PerfCounters n) {\n    auto c = &perfCounters[(uint32_t)n];\n    if (c->start)\n        oops(50);\n    c->start = PERF_NOW();\n}\n\nvoid stopPerfCounter(PerfCounters n) {\n    auto c = &perfCounters[(uint32_t)n];\n    if (!c->start)\n        oops(51);\n    c->value += PERF_NOW() - c->start;\n    c->start = 0;\n    c->numstops++;\n}\n#endif\n\n} // namespace pxt\n",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum NumberFormat {\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    }\n\n\n    declare const enum PerfCounters {\n    GC = 0,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "eventcontext.ts": "namespace control {\n    /**\n     * Run code when a registered event happens.\n     * @param id the event compoent id\n     * @param value the event value to match\n     */\n    //% weight=20 blockGap=8 blockId=\"control_on_event\" block=\"on event|from %src|with value %value\"\n    //% blockExternalInputs=1\n    //% help=\"control/on-event\"\n    export function onEvent(src: number, value: number, handler: () => void, flags = 16) { // EVENT_LISTENER_DEFAULT_FLAGS\n        const ctx = control.eventContext();\n        if (!ctx)\n            control.internalOnEvent(src, value, handler, flags);\n        else\n            ctx.registerHandler(src, value, handler, flags);\n    }\n\n    class FrameCallback {\n        order: number\n        handler: () => void\n    }\n\n    class EventHandler {\n        src: number;\n        value: number;\n        handler: () => void;\n        flags: number;\n\n        constructor(src: number, value: number, handler: () => void, flags: number) {\n            this.src = src;\n            this.value = value;\n            this.handler = handler;\n        }\n\n        register() {\n            control.internalOnEvent(this.src, this.value, () => {\n                if (this.handler) this.handler();\n            }, this.flags)\n        }\n\n        unregister() {\n            control.internalOnEvent(this.src, this.value, doNothing, this.flags);\n        }\n    }\n\n    function doNothing() { }\n\n\n\n    export class EventContext {\n        private handlers: EventHandler[];\n        private frameCallbacks: FrameCallback[];\n        private frameWorker: number;\n        private framesInSample: number;\n        private timeInSample: number;\n        public deltaTime: number;\n        private prevTime: number;\n    \n        static lastStats: string;\n        static onStats: (stats: string) => void;\n\n        constructor() {\n            this.handlers = [];\n            this.framesInSample = 0;\n            this.timeInSample = 0;\n            this.deltaTime = 0;\n            this.frameWorker = 0;\n        }\n\n        private runCallbacks() {\n            control.enablePerfCounter(\"all frame callbacks\")\n\n            let loopStart = control.millis()\n            this.deltaTime = (loopStart - this.prevTime) / 1000.0\n            this.prevTime = loopStart;\n            for (let f of this.frameCallbacks) {\n                f.handler()\n            }\n            let runtime = control.millis() - loopStart\n            this.timeInSample += runtime\n            this.framesInSample++\n            if (this.timeInSample > 1000 || this.framesInSample > 30) {\n                const fps = this.framesInSample / (this.timeInSample / 1000);\n                if (EventContext.onStats) {\n                    EventContext.lastStats = `fps:${Math.round(fps)}`;\n                    EventContext.onStats(EventContext.lastStats)\n                }\n                if (control.profilingEnabled()) {\n                    control.dmesg(`${(fps * 100) | 0}/100 fps - ${this.framesInSample} frames`)\n                    control.gc()\n                    control.dmesgPerfCounters()\n                }\n                this.timeInSample = 0\n                this.framesInSample = 0\n            }\n            let delay = Math.max(1, 20 - runtime)\n            return delay\n        }\n\n        private registerFrameCallbacks() {\n            if (!this.frameCallbacks) return;\n\n            this.framesInSample = 0;\n            this.timeInSample = 0;\n            this.deltaTime = 0;\n            this.prevTime = control.millis();\n            const worker = this.frameWorker;\n            control.runInParallel(() => {\n                while (worker == this.frameWorker) {\n                    let delay = this.runCallbacks()\n                    pause(delay)\n                }\n            })\n        }\n\n        register() {\n            for (const h of this.handlers)\n                h.register();\n            this.registerFrameCallbacks();\n        }\n\n        unregister() {\n            for (const h of this.handlers)\n                h.unregister();\n            this.frameWorker++;\n        }\n\n        registerFrameHandler(order: number, handler: () => void) {\n            if (!this.frameCallbacks) {\n                this.frameCallbacks = [];\n                this.registerFrameCallbacks();\n            }\n\n            const fn = new FrameCallback()\n            fn.order = order\n            fn.handler = handler\n            for (let i = 0; i < this.frameCallbacks.length; ++i) {\n                if (this.frameCallbacks[i].order > order) {\n                    this.frameCallbacks.insertAt(i, fn)\n                    return\n                }\n            }\n            this.frameCallbacks.push(fn)\n        }\n\n        registerHandler(src: number, value: number, handler: () => void, flags: number) {\n            // already there?\n            for (const h of this.handlers) {\n                if (h.src == src && h.value == value) {\n                    h.flags = flags;\n                    h.handler = handler;\n                    return;\n                }\n            }\n            // register and push\n            const hn = new EventHandler(src, value, handler, flags);\n            this.handlers.push(hn);\n            hn.register();\n        }\n    }\n\n    let eventContexts: EventContext[];\n\n    /**\n     * Gets the current event context if any\n     */\n    export function eventContext(): EventContext {\n        return eventContexts ? eventContexts[eventContexts.length - 1] : undefined;\n    }\n\n    /**\n     * Pushes a new event context and clears all handlers\n     */\n    export function pushEventContext(): EventContext {\n        if (!eventContexts)\n            eventContexts = [];\n\n        // unregister previous context\n        const ctx = eventContext();\n        if (ctx) ctx.unregister();\n        // register again\n        const n = new EventContext();\n        eventContexts.push(n);\n        return n;\n    }\n\n    /**\n     * Pops the current event context and restore handlers if any previous context\n     */\n    export function popEventContext() {\n        if (!eventContexts) return;\n\n        // clear current context\n        const ctx = eventContexts.pop();\n        if (!ctx) return;\n        ctx.unregister();\n\n        // register old context again\n        const context = eventContexts[eventContexts.length - 1];\n        if (context)\n            context.register();\n        else\n            eventContexts = undefined;\n    }\n}",
      "gc.cpp": "#include \"pxtbase.h\"\n\n#ifndef GC_BLOCK_SIZE\n#define GC_BLOCK_SIZE (1024 * 16)\n#endif\n\n#ifndef GC_MAX_ALLOC_SIZE\n#define GC_MAX_ALLOC_SIZE (GC_BLOCK_SIZE - 16)\n#endif\n\n#ifndef GC_ALLOC_BLOCK\n#define GC_ALLOC_BLOCK xmalloc\n#endif\n\n#define FREE_MASK 0x80000000\n#define ARRAY_MASK 0x40000000\n#define PERMA_MASK 0x20000000\n#define MARKED_MASK 0x00000001\n#define ANY_MARKED_MASK 0x00000003\n\n// the bit operations should be faster than loading large constants\n#define IS_FREE(vt) ((uint32_t)(vt) >> 31)\n#define IS_ARRAY(vt) (((uint32_t)(vt) >> 30) & 1)\n#define IS_PERMA(vt) (((uint32_t)(vt) >> 29) & 1)\n#define IS_MARKED(vt) ((uint32_t)(vt)&MARKED_MASK)\n#define IS_VAR_BLOCK(vt) ((uint32_t)(vt) >> 30)\n\n#define IS_LIVE(vt) (IS_MARKED(vt) || (((uint32_t)(vt) >> 28) == 0x6))\n\n#define VAR_BLOCK_WORDS(vt) (((vt) << 12) >> (12 + 2))\n\n#define MARK(v) *(uint32_t *)(v) |= MARKED_MASK\n\n//#define PXT_GC_DEBUG 1\n#define PXT_GC_CHECKS 1\n//#define PXT_GC_STRESS 1\n\n#ifdef PXT_GC_DEBUG\n#define LOG DMESG\n#define VLOG DMESG\n#define VVLOG DMESG\n#else\n#define LOG NOLOG\n#define VLOG NOLOG\n#define VVLOG NOLOG\n#endif\n\n#ifdef PXT_GC_CHECKS\n#define GC_CHECK(cond, code)                                                                       \\\n    if (!(cond))                                                                                   \\\n    oops(code)\n#else\n#define GC_CHECK(cond, code) ((void)0)\n#endif\n\nnamespace pxt {\n\n//%\nvoid popThreadContext(ThreadContext *ctx);\n//%\nThreadContext *pushThreadContext(void *sp, void *endSP);\n\nunsigned RefRecord_gcsize(RefRecord *r) {\n    VTable *tbl = getVTable(r);\n    return tbl->numbytes >> 2;\n}\n\n#ifndef PXT_GC\n// dummies, to make the linker happy\nvoid popThreadContext(ThreadContext *ctx) {}\nThreadContext *pushThreadContext(void *sp, void *endSP) {\n    return NULL;\n}\nvoid RefRecord_scan(RefRecord *r) {}\n#else\n\n#ifdef PXT_GC_THREAD_LIST\nThreadContext *threadContexts;\n#endif\n\n#define IN_GC_ALLOC 1\n#define IN_GC_COLLECT 2\n#define IN_GC_FREEZE 4\n\nstatic TValue *tempRoot;\nstatic uint8_t tempRootLen;\nuint8_t inGC;\n\nvoid popThreadContext(ThreadContext *ctx) {\n    VLOG(\"pop: %p\", ctx);\n\n    if (!ctx)\n        return;\n\n    auto n = ctx->stack.next;\n    if (n) {\n        VLOG(\"seg %p\", n);\n        ctx->stack.top = n->top;\n        ctx->stack.bottom = n->bottom;\n        ctx->stack.next = n->next;\n        app_free(n);\n    } else {\n#ifdef PXT_GC_THREAD_LIST\n        if (ctx->next)\n            ctx->next->prev = ctx->prev;\n        if (ctx->prev)\n            ctx->prev->next = ctx->next;\n        else {\n            if (threadContexts != ctx)\n                oops(41);\n            threadContexts = ctx->next;\n            if (threadContexts)\n                threadContexts->prev = NULL;\n        }\n#endif\n        app_free(ctx);\n        setThreadContext(NULL);\n    }\n}\n\n#define ALLOC(tp) (tp *)app_alloc(sizeof(tp))\n\nThreadContext *pushThreadContext(void *sp, void *endSP) {\n    if (PXT_IN_ISR())\n        target_panic(PANIC_CALLED_FROM_ISR);\n\n    auto curr = getThreadContext();\n    tempRoot = (TValue *)endSP;\n    tempRootLen = (uint32_t *)sp - (uint32_t *)endSP;\n    if (curr) {\n#ifdef PXT_GC_THREAD_LIST\n#ifdef PXT_GC_DEBUG\n        auto ok = false;\n        for (auto p = threadContexts; p; p = p->next)\n            if (p == curr) {\n                ok = true;\n                break;\n            }\n        if (!ok)\n            oops(49);\n#endif\n#endif\n        auto seg = ALLOC(StackSegment);\n        VLOG(\"stack %p / %p\", seg, curr);\n        seg->top = curr->stack.top;\n        seg->bottom = curr->stack.bottom;\n        seg->next = curr->stack.next;\n        curr->stack.next = seg;\n    } else {\n        curr = ALLOC(ThreadContext);\n        LOG(\"push: %p\", curr);\n        curr->globals = globals;\n        curr->stack.next = NULL;\n\n#ifdef PXT_GC_THREAD_LIST\n        curr->next = threadContexts;\n        curr->prev = NULL;\n        if (curr->next)\n            curr->next->prev = curr;\n        threadContexts = curr;\n#endif\n        setThreadContext(curr);\n    }\n    tempRootLen = 0;\n    curr->stack.bottom = sp;\n    curr->stack.top = NULL;\n    return curr;\n}\n\nclass RefBlock : public RefObject {\n  public:\n    RefBlock *nextFree;\n};\n\nstruct GCBlock {\n    GCBlock *next;\n    uint32_t blockSize;\n    RefObject data[0];\n};\n\nstatic LLSegment gcRoots;\nstatic LLSegment workQueue;\nstatic GCBlock *firstBlock;\nstatic RefBlock *firstFree;\nstatic uint8_t *midPtr;\n\n#define NO_MAGIC(vt) ((VTable *)vt)->magic != VTABLE_MAGIC\n#define VT(p) (*(uint32_t *)(p))\n#define SKIP_PROCESSING(p)                                                                         \\\n    (isReadOnly(p) || (VT(p) & (ANY_MARKED_MASK | ARRAY_MASK)) || NO_MAGIC(VT(p)))\n\nvoid gcScan(TValue v) {\n    if (SKIP_PROCESSING(v))\n        return;\n    MARK(v);\n    workQueue.push(v);\n}\n\nvoid gcScanMany(TValue *data, unsigned len) {\n    // VLOG(\"scan: %p %d\", data, len);\n    for (unsigned i = 0; i < len; ++i) {\n        auto v = data[i];\n        // VLOG(\"psh: %p %d %d\", v, isReadOnly(v), (*(uint32_t *)v & 1));\n        if (SKIP_PROCESSING(v))\n            continue;\n        MARK(v);\n        workQueue.push(v);\n    }\n}\n\nvoid gcScanSegment(Segment &seg) {\n    auto data = seg.getData();\n    if (!data)\n        return;\n    auto segBl = (uint32_t *)data - 1;\n    GC_CHECK(!IS_MARKED(VT(segBl)), 47);\n    MARK(segBl);\n    gcScanMany(data, seg.getLength());\n}\n\n#define getScanMethod(vt) ((RefObjectMethod)(((VTable *)(vt))->methods[2]))\n#define getSizeMethod(vt) ((RefObjectSizeMethod)(((VTable *)(vt))->methods[3]))\n\nvoid gcProcess(TValue v) {\n    if (SKIP_PROCESSING(v))\n        return;\n    VVLOG(\"gcProcess: %p\", v);\n    MARK(v);\n    auto scan = getScanMethod(VT(v) & ~ANY_MARKED_MASK);\n    if (scan)\n        scan((RefObject *)v);\n    while (workQueue.getLength()) {\n        auto curr = (RefObject *)workQueue.pop();\n        VVLOG(\" - %p\", curr);\n        scan = getScanMethod(curr->vtable & ~ANY_MARKED_MASK);\n        if (scan)\n            scan(curr);\n    }\n}\n\nstatic void mark(int flags) {\n#ifdef PXT_GC_DEBUG\n    flags |= 2;\n#endif\n    auto data = gcRoots.getData();\n    auto len = gcRoots.getLength();\n    if (flags & 2) {\n        DMESG(\"--MARK\");\n        DMESG(\"RP:%p/%d\", data, len);\n    }\n    for (unsigned i = 0; i < len; ++i) {\n        auto d = data[i];\n        if ((uint32_t)d & 1) {\n            d = *(TValue *)((uint32_t)d & ~1);\n        }\n        gcProcess(d);\n    }\n\n#ifdef PXT_GC_THREAD_LIST\n    for (auto ctx = threadContexts; ctx; ctx = ctx->next) {\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(ctx, seg->top);\n            auto end = (TValue *)threadAddressFor(ctx, seg->bottom);\n            VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n#else\n    gcProcessStacks(flags);\n#endif\n\n    if (globals) {\n        auto nonPtrs = bytecode[21];\n        len = getNumGlobals() - nonPtrs;\n        data = globals + nonPtrs;\n        if (flags & 2)\n            DMESG(\"RG:%p/%d\", data, len);\n        VLOG(\"globals: %p %d\", data, len);\n        for (unsigned i = 0; i < len; ++i) {\n            gcProcess(*data++);\n        }\n    }\n\n    data = tempRoot;\n    len = tempRootLen;\n    for (unsigned i = 0; i < len; ++i) {\n        gcProcess(*data++);\n    }\n}\n\nstatic uint32_t getObjectSize(RefObject *o) {\n    auto vt = o->vtable & ~ANY_MARKED_MASK;\n    uint32_t r;\n    GC_CHECK(vt != 0, 49);\n    if (IS_VAR_BLOCK(vt)) {\n        r = VAR_BLOCK_WORDS(vt);\n    } else {\n        auto sz = getSizeMethod(vt);\n        // GC_CHECK(0x2000 <= (intptr_t)sz && (intptr_t)sz <= 0x100000, 47);\n        r = sz(o);\n    }\n    GC_CHECK(1 <= r && (r <= (GC_MAX_ALLOC_SIZE >> 2) || IS_FREE(vt)), 48);\n    return r;\n}\n\n__attribute__((noinline)) static void allocateBlock() {\n    auto sz = GC_BLOCK_SIZE;\n    void *dummy = NULL;\n#ifdef GC_GET_HEAP_SIZE\n    if (firstBlock) {\n        gc(2); // dump roots\n        target_panic(PANIC_GC_OOM);\n    }\n    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);\n    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);\n    auto heapSize = GC_GET_HEAP_SIZE();\n    sz = heapSize - sysHeapSize;\n    if (lowMem) {\n        auto memIncrement = 32 * 1024;\n        // get the memory size - assume it's increment of 32k,\n        // and we don't statically allocate more than 32k\n        auto memSize = ((heapSize + memIncrement - 1) / memIncrement) * memIncrement;\n        int fillerSize = memSize - lowMem * 1024;\n        if (fillerSize > 0) {\n            dummy = GC_ALLOC_BLOCK(fillerSize);\n            sz -= fillerSize;\n        }\n    }\n#endif\n    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);\n    curr->blockSize = sz - sizeof(GCBlock);\n    LOG(\"GC alloc: %p\", curr);\n    GC_CHECK((curr->blockSize & 3) == 0, 40);\n    curr->data[0].vtable = FREE_MASK | curr->blockSize;\n    ((RefBlock *)curr->data)[0].nextFree = firstFree;\n    firstFree = (RefBlock *)curr->data;\n    // make sure reference to allocated block is stored somewhere, otherwise\n    // GCC optimizes out the call to GC_ALLOC_BLOCK\n    curr->data[4].vtable = (uint32_t)dummy;\n    curr->next = NULL;\n    if (!firstBlock) {\n        firstBlock = curr;\n    } else {\n        for (auto p = firstBlock; p; p = p->next) {\n            if (!p->next) {\n                GC_CHECK(p < curr, 40); // required by midPtr stuff\n                p->next = curr;\n                break;\n            }\n        }\n    }\n    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;\n}\n\nstatic void sweep(int flags) {\n    RefBlock *prevFreePtr = NULL;\n    uint32_t freeSize = 0;\n    uint32_t totalSize = 0;\n    firstFree = NULL;\n\n    for (auto h = firstBlock; h; h = h->next) {\n        auto d = h->data;\n        auto words = h->blockSize >> 2;\n        auto end = d + words;\n        totalSize += words;\n        VLOG(\"sweep: %p - %p\", d, end);\n        while (d < end) {\n            if (IS_LIVE(d->vtable)) {\n                VVLOG(\"Live %p\", d);\n                d->vtable &= ~MARKED_MASK;\n                d += getObjectSize(d);\n            } else {\n                auto start = (RefBlock *)d;\n                while (d < end) {\n                    if (IS_FREE(d->vtable)) {\n                        VVLOG(\"Free %p\", d);\n                    } else if (IS_LIVE(d->vtable)) {\n                        break;\n                    } else if (IS_ARRAY(d->vtable)) {\n                        VVLOG(\"Dead Arr %p\", d);\n                    } else {\n                        VVLOG(\"Dead Obj %p\", d);\n                        GC_CHECK(((VTable *)d->vtable)->magic == VTABLE_MAGIC, 41);\n                        d->destroyVT();\n                    }\n                    d += getObjectSize(d);\n                }\n                auto sz = d - (RefObject *)start;\n                freeSize += sz;\n#ifdef PXT_GC_CHECKS\n                memset(start, 0xff, sz << 2);\n#endif\n                start->vtable = (sz << 2) | FREE_MASK;\n                if (sz > 1) {\n                    start->nextFree = NULL;\n                    if (!prevFreePtr) {\n                        firstFree = start;\n                    } else {\n                        prevFreePtr->nextFree = start;\n                    }\n                    prevFreePtr = start;\n                }\n            }\n        }\n    }\n\n    if (midPtr) {\n        uint32_t currFree = 0;\n        auto limit = freeSize >> 1;\n        for (auto p = firstFree; p; p = p->nextFree) {\n            currFree += VAR_BLOCK_WORDS(p->vtable);\n            if (currFree > limit) {\n                midPtr = (uint8_t *)p + ((currFree - limit) << 2);\n                break;\n            }\n        }\n    }\n\n    // convert to bytes\n    freeSize <<= 2;\n    totalSize <<= 2;\n\n    if (flags & 1)\n        DMESG(\"GC %d/%d free\", freeSize, totalSize);\n    else\n        LOG(\"GC %d/%d free\", freeSize, totalSize);\n\n#ifndef GC_GET_HEAP_SIZE\n    // if the heap is 90% full, allocate a new block\n    if (freeSize * 10 <= totalSize) {\n        allocateBlock();\n    }\n#endif\n}\n\nvoid gc(int flags) {\n    startPerfCounter(PerfCounters::GC);\n    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);\n    inGC |= IN_GC_COLLECT;\n    VLOG(\"GC mark\");\n    mark(flags);\n    VLOG(\"GC sweep\");\n    sweep(flags);\n    VLOG(\"GC done\");\n    stopPerfCounter(PerfCounters::GC);\n    inGC &= ~IN_GC_COLLECT;\n}\n\n#ifdef GC_GET_HEAP_SIZE\nstatic bool inGCArea(void *ptr) {\n    for (auto block = firstBlock; block; block = block->next) {\n        if ((void *)block->data < ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))\n            return true;\n    }\n    return false;\n}\n\nextern \"C\" void free(void *ptr) {\n    if (!ptr)\n        return;\n    if (inGCArea(ptr))\n        app_free(ptr);\n    else\n        xfree(ptr);\n}\n\nextern \"C\" void *malloc(size_t sz) {\n    if (PXT_IN_ISR() || inGC)\n        return xmalloc(sz);\n    else\n        return app_alloc(sz);\n}\n\nextern \"C\" void *realloc(void *ptr, size_t size) {\n    if (inGCArea(ptr)) {\n        void *mem = malloc(size);\n\n        if (ptr != NULL && mem != NULL) {\n            auto r = (uint32_t *)ptr;\n            GC_CHECK((r[-1] >> 29) == 3, 41);\n            size_t blockSize = VAR_BLOCK_WORDS(r[-1]);\n            memcpy(mem, ptr, min(blockSize * sizeof(void *), size));\n            free(ptr);\n        }\n\n        return mem;\n    } else {\n        return device_realloc(ptr, size);\n    }\n}\n#endif\n\nvoid *gcAllocateArray(int numbytes) {\n    numbytes = (numbytes + 3) & ~3;\n    numbytes += 4;\n    auto r = (uint32_t *)gcAllocate(numbytes);\n    *r = ARRAY_MASK | numbytes;\n    return r + 1;\n}\n\nvoid *app_alloc(int numbytes) {\n    if (!numbytes)\n        return NULL;\n\n    // gc(0);\n    auto r = (uint32_t *)gcAllocateArray(numbytes);\n    r[-1] |= PERMA_MASK;\n    return r;\n}\n\nvoid *app_free(void *ptr) {\n    auto r = (uint32_t *)ptr;\n    GC_CHECK((r[-1] >> 29) == 3, 41);\n    r[-1] |= FREE_MASK;\n    return r;\n}\n\nvoid gcFreeze() {\n    inGC |= IN_GC_FREEZE;\n}\n\nvoid *gcAllocate(int numbytes) {\n    size_t numwords = (numbytes + 3) >> 2;\n\n    if (numbytes > GC_MAX_ALLOC_SIZE)\n        oops(45);\n\n    if (PXT_IN_ISR() || (inGC & IN_GC_ALLOC))\n        target_panic(PANIC_CALLED_FROM_ISR);\n\n    inGC |= IN_GC_ALLOC;\n\n#ifdef PXT_GC_CHECKS\n    {\n        auto curr = getThreadContext();\n        if (curr && !curr->stack.top)\n            oops(46);\n    }\n#endif\n\n#ifdef PXT_GC_STRESS\n    gc(0);\n#endif\n\n    for (int i = 0;; ++i) {\n        RefBlock *prev = NULL;\n        for (auto p = firstFree; p; p = p->nextFree) {\n            VVLOG(\"p=%p\", p);\n            if (i == 0 && (uint8_t *)p > midPtr)\n                break;\n            GC_CHECK(!isReadOnly((TValue)p), 49);\n            auto vt = p->vtable;\n            if (!IS_FREE(vt))\n                oops(43);\n            int left = VAR_BLOCK_WORDS(vt) - numwords;\n            if (left >= 0) {\n                auto nf = (RefBlock *)((void **)p + numwords);\n                // VLOG(\"nf=%p\", nf);\n                auto nextFree = p->nextFree; // p and nf can overlap when allocating 4 bytes\n                if (left)\n                    nf->vtable = (left << 2) | FREE_MASK;\n                if (left >= 2) {\n                    nf->nextFree = nextFree;\n                } else {\n                    nf = p->nextFree;\n                }\n                if (prev)\n                    prev->nextFree = nf;\n                else\n                    firstFree = nf;\n                p->vtable = 0;\n                GC_CHECK(!nf || !nf->nextFree || ((uint32_t)nf->nextFree) >> 20, 48);\n                VVLOG(\"GC=>%p %d %p\", p, numwords, nf->nextFree);\n                inGC &= ~IN_GC_ALLOC;\n                return p;\n            }\n            prev = p;\n        }\n\n        // we didn't find anything, try GC\n        if (i == 0)\n            gc(0);\n        // GC didn't help, try new block\n        else if (i == 1)\n            allocateBlock();\n        else\n            oops(44);\n    }\n}\n\nstatic void removePtr(TValue v) {\n    auto len = gcRoots.getLength();\n    auto data = gcRoots.getData();\n    for (unsigned i = 0; i < len; ++i) {\n        if (data[i] == v) {\n            if (i == len - 1) {\n                gcRoots.pop();\n            } else {\n                data[i] = gcRoots.pop();\n            }\n            return;\n        }\n    }\n    oops(40);\n}\n\nvoid registerGC(TValue *root, int numwords) {\n    if (!numwords)\n        return;\n\n    if (numwords > 1) {\n        while (numwords-- > 0) {\n            registerGC(root++, 1);\n        }\n        return;\n    }\n\n    gcRoots.push((TValue)((uint32_t)root | 1));\n}\n\nvoid unregisterGC(TValue *root, int numwords) {\n    if (!numwords)\n        return;\n    if (numwords > 1) {\n        while (numwords-- > 0) {\n            unregisterGC(root++, 1);\n        }\n        return;\n    }\n\n    removePtr((TValue)((uint32_t)root | 1));\n}\n\nvoid registerGCPtr(TValue ptr) {\n    if (isReadOnly(ptr))\n        return;\n    gcRoots.push(ptr);\n}\n\nvoid unregisterGCPtr(TValue ptr) {\n    if (isReadOnly(ptr))\n        return;\n    removePtr(ptr);\n}\n\nvoid RefImage::scan(RefImage *t) {\n    gcScan((TValue)t->buffer());\n}\n\nvoid RefCollection::scan(RefCollection *t) {\n    gcScanSegment(t->head);\n}\n\nvoid RefAction::scan(RefAction *t) {\n    gcScanMany(t->fields, t->len);\n}\n\nvoid RefRefLocal::scan(RefRefLocal *t) {\n    gcScan(t->v);\n}\n\nvoid RefMap::scan(RefMap *t) {\n    gcScanSegment(t->keys);\n    gcScanSegment(t->values);\n}\n\nvoid RefRecord_scan(RefRecord *r) {\n    VTable *tbl = getVTable(r);\n    gcScanMany(r->fields, (tbl->numbytes - sizeof(RefRecord)) >> 2);\n}\n\n#define SIZE(off) (sizeof(*t) + (off) + 3) >> 2\n\nunsigned RefImage::gcsize(RefImage *t) {\n    if (t->hasBuffer())\n        return SIZE(0);\n    return SIZE(t->length());\n}\n\nunsigned RefCollection::gcsize(RefCollection *t) {\n    return SIZE(0);\n}\n\nunsigned RefAction::gcsize(RefAction *t) {\n    return SIZE(t->len << 2);\n}\n\nunsigned RefRefLocal::gcsize(RefRefLocal *t) {\n    return SIZE(0);\n}\n\nunsigned RefMap::gcsize(RefMap *t) {\n    return SIZE(0);\n}\n\n#endif\n\n} // namespace pxt\n",
      "json.ts": "namespace JSON {\n    export function parseIntRadix(s: string, base?: number) {\n        if (base == null || base == 10) {\n            return parseFloat(s) | 0\n        }\n\n        let m = false\n        let r = 0\n        for (let i = 0; i < s.length; ++i) {\n            let c = s.charCodeAt(i)\n            if (c == 0x20 || c == 10 || c == 13 || c == 9)\n                continue\n            if (r == 0 && !m && c == 0x2d) {\n                m = true\n                continue\n            }\n\n            let v = -1\n            if (0x30 <= c && c <= 0x39)\n                v = c - 0x30\n            else {\n                c |= 0x20\n                if (0x61 <= c && c <= 0x7a)\n                    v = c - 0x61 + 10\n            }\n\n            if (0 <= v && v < base) {\n                r *= base\n                r += v\n            } else {\n                return undefined\n            }\n        }\n\n        return m ? -r : r\n    }\n\n\n    class Parser {\n        ptr: number\n        s: string\n        errorMsg: string\n\n        error(msg: string) {\n            if (!this.errorMsg) {\n                this.errorMsg = msg + \" at position \" + this.ptr\n                this.ptr = this.s.length\n            }\n        }\n\n        skipWS() {\n            for (; ;) {\n                const c = this.nextChar()\n                if (c == 0x20 || c == 0x0a || c == 0x0d || c == 0x09) {\n                    // OK\n                } else {\n                    this.ptr--\n                    return c\n                }\n            }\n        }\n\n        nextChar() {\n            if (this.ptr < this.s.length)\n                return this.s.charCodeAt(this.ptr++)\n            return 0\n        }\n\n        doString() {\n            let r = \"\"\n            this.ptr++\n            for (; ;) {\n                const c = this.s.charAt(this.ptr++)\n                if (c == \"\\\"\")\n                    return r\n                if (c == \"\\\\\") {\n                    let q = this.s.charAt(this.ptr++)\n                    if (q == \"b\") q = \"\\b\"\n                    else if (q == \"n\") q = \"\\n\"\n                    else if (q == \"r\") q = \"\\r\"\n                    else if (q == \"t\") q = \"\\t\"\n                    else if (q == \"u\") {\n                        q = String.fromCharCode(parseIntRadix(this.s.slice(this.ptr, this.ptr + 4), 16))\n                        this.ptr += 4\n                    }\n                    r += q\n                } else {\n                    r += c\n                }\n            }\n        }\n\n        doArray(): any[] {\n            const r = []\n            this.ptr++\n            for (; ;) {\n                let c = this.skipWS()\n                if (c == 0x5d) {\n                    this.ptr++\n                    return r\n                }\n                const v = this.value()\n                if (this.errorMsg)\n                    return null\n                r.push(v)\n                c = this.skipWS()\n                if (c == 0x2c) {\n                    this.ptr++\n                    continue\n                }\n                if (c == 0x5d)\n                    continue\n                this.error(\"expecting comma\")\n            }\n        }\n\n        doObject() {\n            const r: any = {}\n            this.ptr++\n            for (; ;) {\n                let c = this.skipWS()\n                if (c == 0x7d) {\n                    this.ptr++\n                    return r\n                }\n                if (c != 0x22) {\n                    this.error(\"expecting key\")\n                    return r\n                }\n                const k = this.doString()\n                c = this.skipWS()\n                if (c != 0x3a) {\n                    this.error(\"expecting colon\")\n                    return r\n                }\n                this.ptr++\n                const v = this.value()\n                if (this.errorMsg)\n                    return null\n                r[k] = v\n                c = this.skipWS()\n                if (c == 0x2c) {\n                    this.ptr++\n                    continue\n                }\n                if (c == 0x7d)\n                    continue\n                this.error(\"expecting comma, got \" + String.fromCharCode(c))\n            }\n        }\n\n        doNumber() {\n            const beg = this.ptr\n            for (; ;) {\n                const c = this.nextChar()\n                if ((0x30 <= c && c <= 0x39) || c == 0x2b || c == 0x2d || c == 0x2e || c == 0x45 || c == 0x65) {\n                    // one more\n                } else {\n                    this.ptr--\n                    break\n                }\n            }\n            const ss = this.s.slice(beg, this.ptr)\n            if (ss.length == 0) {\n                this.error(\"expecting number\")\n                return 0\n            }\n            return parseFloat(ss)\n        }\n\n        checkKw(k: string) {\n            if (this.s.slice(this.ptr, this.ptr + k.length) == k) {\n                this.ptr += k.length\n                return true\n            }\n            return false\n        }\n\n        value() {\n            if (this.errorMsg)\n                return null\n\n            const c = this.skipWS()\n            if (c == 0x7b)\n                return this.doObject()\n            else if (c == 0x5b)\n                return this.doArray()\n            else if ((0x30 <= c && c <= 0x39) || c == 0x2d)\n                return this.doNumber()\n            else if (c == 0x22)\n                return this.doString()\n            else if (c == 0x74 && this.checkKw(\"true\"))\n                return true\n            else if (c == 0x66 && this.checkKw(\"false\"))\n                return false\n            else if (c == 0x6e && this.checkKw(\"null\"))\n                return null\n\n            this.error(\"unexpected token\")\n            return null\n        }\n    }\n\n    class Stringifier {\n        currIndent: string\n        indentStep: string\n        indent: number\n\n        doString(s: string) {\n            let r = \"\\\"\"\n            for (let i = 0; i < s.length; ++i) {\n                let c = s[i]\n                if (c == \"\\n\") c = \"\\\\n\"\n                else if (c == \"\\r\") c = \"\\\\r\"\n                else if (c == \"\\t\") c = \"\\\\t\"\n                else if (c == \"\\b\") c = \"\\\\b\"\n                else if (c == \"\\\\\") c = \"\\\\\\\\\"\n                else if (c == \"\\\"\") c = \"\\\\\\\"\"\n                r += c\n            }\n            return r + \"\\\"\"\n        }\n\n        go(v: any) {\n            const t = typeof v\n            if (t == \"string\")\n                return this.doString(v)\n            else if (t == \"boolean\" || t == \"number\" || v == null)\n                return \"\" + v\n            else if (Array.isArray(v)) {\n                const arr = v as any[]\n                if (arr.length == 0)\n                    return \"[]\"\n                else {\n                    let r = \"[\"\n                    if (this.indent) {\n                        this.currIndent += this.indentStep\n                        r += \"\\n\"\n                    }\n                    for (let i = 0; i < arr.length; ++i) {\n                        r += this.currIndent + this.go(arr[i])\n                        if (i != arr.length - 1)\n                            r += \",\"\n                        if (this.indent)\n                            r += \"\\n\"\n                    }\n                    if (this.indent)\n                        this.currIndent = this.currIndent.slice(this.indent)\n                    r += this.currIndent + \"]\"\n                    return r\n                }\n            } else {\n                const keys = Object.keys(v)\n                if (keys.length == 0)\n                    return \"{}\"\n\n                let r = \"{\"\n                if (this.indent) {\n                    this.currIndent += this.indentStep\n                    r += \"\\n\"\n                }\n                for (let i = 0; i < keys.length; ++i) {\n                    const k = keys[i]\n                    r += this.currIndent + this.doString(k)\n                    if (this.indent)\n                        r += \": \"\n                    else\n                        r += \":\"\n                    r += this.go(v[k])\n                    if (i != keys.length - 1)\n                        r += \",\"\n                    if (this.indent)\n                        r += \"\\n\"\n                }\n                if (this.indent)\n                    this.currIndent = this.currIndent.slice(this.indent)\n                r += this.currIndent + \"}\"\n                return r\n            }\n        }\n    }\n\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer Not supported; use null.\n     * @param indent Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    export function stringify(value: any, replacer: any = null, indent: number = 0) {\n        const ss = new Stringifier()\n        ss.currIndent = \"\"\n        indent |= 0\n        if (indent < 0) indent = 0\n        if (indent > 10) indent = 10\n        ss.indentStep = \"\"\n        ss.currIndent = \"\"\n        ss.indent = indent\n        while (indent-- > 0)\n            ss.indentStep += \" \"\n        return ss.go(value)\n    }\n\n\n    /**\n     * Converts a JavaScript Object Notation (JSON) string into an object.\n     * @param text A valid JSON string.\n     */\n    export function parse(s: string) {\n        const p = new Parser()\n        p.ptr = 0\n        p.s = s\n        const r = p.value()\n        if (p.skipWS()) {\n            p.error(\"excessive input\")\n        }\n        if (p.errorMsg) {\n            control.dmesg(\"Invalid JSON: \" + p.errorMsg)\n            return undefined\n        }\n        return r\n    }\n}\n",
      "loops.cpp": "#include \"pxtbase.h\"\n\nnamespace loops {\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true deprecated=true\n//% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1\nvoid forever(Action a) {\n    runForever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99 deprecated=true\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause_deprecated\nvoid pause(int ms) {\n    if (ms < 0) return;\n    sleep_ms(ms);\n}\n\n}",
      "math.ts": "namespace Math {\n\n    export const E = 2.718281828459045;\n    export const LN2 = 0.6931471805599453;\n    export const LN10 = 2.302585092994046;\n    export const LOG2E = 1.4426950408889634;\n    export const LOG10E = 0.4342944819032518;\n    export const PI = 3.141592653589793;\n    export const SQRT1_2 = 0.7071067811865476;\n    export const SQRT2 = 1.4142135623730951;\n\n    /**\n     * Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.\n     * @param value value to map in ranges\n     * @param fromLow the lower bound of the value's current range\n     * @param fromHigh the upper bound of the value's current range, eg: 1023\n     * @param toLow the lower bound of the value's target range\n     * @param toHigh the upper bound of the value's target range, eg: 4\n     */\n    //% help=math/map weight=10 blockGap=8\n    //% blockId=math_map block=\"map %value|from low %fromLow|high %fromHigh|to low %toLow|high %toHigh\"\n    //% inlineInputMode=inline\n    export function map(value: number, fromLow: number, fromHigh: number, toLow: number, toHigh: number): number {\n        return ((value - fromLow) * (toHigh - toLow)) / (fromHigh - fromLow) + toLow;\n    }    \n\n    /**\n     * Constrains a number to be within a range\n     * @param x the number to constrain, all data types\n     * @param y the lower end of the range, all data types\n     * @param z the upper end of the range, all data types\n     */\n    //% help=math/constrain weight=11 blockGap=8\n    //% blockId=\"math_constrain_value\" block=\"constrain %value|between %low|and %high\"\n    export function constrain(value: number, low: number, high: number): number {\n        return value < low ? low : value > high ? high : value;\n    }\n\n    const b_m16: number[] = [0, 49, 49, 41, 90, 27, 117, 10]\n    /**\n     * Returns the sine of an input angle. This is an 8-bit approximation.\n     * @param theta input angle from 0-255\n     */\n    //% help=math/isin weight=11 advanced=true blockGap=8\n    export function isin(theta: number) {\n        //reference: based on FASTLed's sin approximation method: [https://github.com/FastLED/FastLED](MIT)\n        let offset = theta;\n        if( theta & 0x40 ) {\n            offset = 255 - offset;\n        }\n        offset &= 0x3F; // 0..63\n\n        let secoffset  = offset & 0x0F; // 0..15\n        if( theta & 0x40) secoffset++;\n\n        let section = offset >> 4; // 0..3\n        let s2 = section * 2;\n\n        let b = b_m16[s2];\n        let m16 = b_m16[s2+1];\n        let mx = (m16 * secoffset) >> 4;\n        \n        let y = mx + b;\n        if( theta & 0x80 ) y = -y;\n\n        y += 128;\n\n        return y;\n    }\n\n    /**\n     * Returns the cosine of an input angle. This is an 8-bit approximation. \n     * @param theta input angle from 0-255\n     */\n    //% help=math/icos weight=10 advanced=true blockGap=8\n    export function icos(theta: number) {\n        return isin(theta + 16384);\n    }\n}\n\nnamespace Number {\n    export const EPSILON = 2.220446049250313e-16;\n}",
      "ns.ts": "\n/**\n * Respond to and read data from buttons and sensors.\n */\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\nnamespace input {\n}\n",
      "pxt-core.d.ts": "/// <reference no-default-lib=\"true\"/>\n\ninterface Array<T> {\n    /**\n      * Get or set the length of an array. This number is one more than the index of the last element the array.\n      */\n    //% shim=Array_::length weight=84\n    //% blockId=\"lists_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"arrays\"\n    length: number;\n\n    /**\n      * Append a new element to an array.\n      * @param items New elements of the Array.\n      */\n    //% help=arrays/push\n    //% shim=Array_::push weight=50\n    //% blockId=\"array_push\" block=\"%list| add value %value| to end\" blockNamespace=\"arrays\"\n    push(item: T): void;\n\n    /**\n      * Concatenates the values with another array.\n      * @param arr The other array that is being concatenated with\n      */\n    //% helper=arrayConcat weight=40\n    concat(arr: T[]): T[];\n\n    /**\n      * Remove the last element from an array and return it.\n      */\n    //% help=arrays/pop\n    //% shim=Array_::pop weight=45\n    //% blockId=\"array_pop\" block=\"get and remove last value from %list\" blockNamespace=\"arrays\"\n    //% blockGap=64\n    pop(): T;\n\n    /**\n      * Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.\n      */\n    //% help=arrays/reverse\n    //% helper=arrayReverse weight=10\n    //% blockId=\"array_reverse\" block=\"reverse %list\" blockNamespace=\"arrays\"\n    reverse(): void;\n\n    /**\n      * Remove the first element from an array and return it. This method changes the length of the array.\n      */\n    //% help=arrays/shift\n    //% helper=arrayShift weight=30\n    //% blockId=\"array_shift\" block=\"get and remove first value from %list\" blockNamespace=\"arrays\"\n    shift(): T;\n\n    /**\n      * Add one element to the beginning of an array and return the new length of the array.\n      * @param element to insert at the start of the Array.\n      */\n    //% help=arrays/unshift\n    //% helper=arrayUnshift weight=25\n    //% blockId=\"array_unshift\" block=\"%list| insert %value| at beginning\" blockNamespace=\"arrays\"\n    //unshift(...values:T[]): number; //rest is not supported in our compiler yet.\n    unshift(value: T): number;\n\n    /**\n      * Return a section of an array.\n      * @param start The beginning of the specified portion of the array. eg: 0\n      * @param end The end of the specified portion of the array. eg: 0\n      */\n    //% help=arrays/slice\n    //% helper=arraySlice weight=41 blockNamespace=\"arrays\"\n    slice(start: number, end: number): T[];\n\n    /**\n      * Remove elements from an array.\n      * @param start The zero-based location in the array from which to start removing elements. eg: 0\n      * @param deleteCount The number of elements to remove. eg: 0\n      */\n    //% helper=arraySplice weight=40\n    splice(start: number, deleteCount: number): void;\n\n    /**\n      * joins all elements of an array into a string and returns this string.\n      * @param sep the string separator\n      */\n    //% helper=arrayJoin weight=40\n    join(sep: string): string;\n    \n    /**\n      * Tests whether at least one element in the array passes the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arraySome weight=40\n    some(callbackfn: (value: T, index: number) => boolean): boolean;\n\n    /**\n      * Tests whether all elements in the array pass the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayEvery weight=40\n    every(callbackfn: (value: T, index: number) => boolean): boolean;\n    \n    /**\n      * Sort the elements of an array in place and returns the array. The sort is not necessarily stable.\n      * @param specifies a function that defines the sort order. If omitted, the array is sorted according to the prmitive type\n      */\n    //% helper=arraySort weight=40\n    sort(callbackfn?: (value1: T, value2: T) => number): T[];\n\n    /**\n      * Call a defined callback function on each element of an array, and return an array containing the results.\n      * @param callbackfn A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayMap weight=40\n    map<U>(callbackfn: (value: T, index: number) => U): U[];\n\n    /**\n      * Call a defined callback function on each element of an array.\n      * @param callbackfn A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayForEach weight=40\n    forEach(callbackfn: (value: T, index: number) => void): void;\n    \n    /**\n      * Return the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayFilter weight=40\n    filter(callbackfn: (value: T, index: number) => boolean): T[];\n    \n    /**\n     * Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.\n     * @param callbackfn \n     */\n    //% helper=arrayFind weight=40\n    find(callbackfn: (value: T, index: number) => boolean): T;\n\n    /**\n      * Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.\n      * @param initialValue Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    //% helper=arrayReduce weight=40\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U;\n\n\n    /** Remove the first occurence of an object. Returns true if removed. */\n    //% shim=Array_::removeElement weight=48\n    removeElement(element: T): boolean;\n\n    /** Remove the element at a certain index. */\n    //% help=arrays/remove-at\n    //% shim=Array_::removeAt weight=15\n    //% blockId=\"array_removeat\" block=\"%list| remove value at %index\" blockNamespace=\"arrays\"\n    removeAt(index: number): T;\n\n    /**\n     * Insert the value at a particular index, increases length by 1\n     * @param index the zero-based position in the list to insert the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/insert-at\n    //% shim=Array_::insertAt weight=20\n    //% blockId=\"array_insertAt\" block=\"%list| insert at %index| value %value\" blockNamespace=\"arrays\"\n    insertAt(index: number, value: T): void;\n\n    /**\n      * Return the index of the first occurrence of a value in an array.\n      * @param item The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n      */\n    //% help=arrays/index-of\n    //% shim=Array_::indexOf weight=40\n    //% blockId=\"array_indexof\" block=\"%list| find index of %value\" blockNamespace=\"arrays\"\n    indexOf(item: T, fromIndex?: number): number;\n\n    /**\n     * Get the value at a particular index\n     * @param index the zero-based position in the list of the item, eg: 0\n     */\n    //% help=arrays/get\n    //% shim=Array_::getAt weight=85\n    get(index: number): T;\n\n    /**\n     * Store a value at a particular index\n     * @param index the zero-based position in the list to store the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/set\n    //% shim=Array_::setAt weight=84\n    set(index: number, value: T): void;\n\n    [n: number]: T;\n}\n\ndeclare interface String {\n    // This block is currently disabled in favor of the built-in Blockly \"Create text with\" block, which compiles to \"\" + \"\"\n    // Add % sign back to the block annotation to re-enable\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param other The string to append to the end of the string.\n     */\n    //% shim=String_::concat weight=49\n    //% blockId=\"string_concat\" blockNamespace=\"text\"\n    // block=\"join %list=text|%other\"\n    concat(other: string): string;\n\n    /**\n     * Return the character at the specified index.\n     * @param index The zero-based index of the desired character.\n     */\n    //% shim=String_::charAt weight=48\n    //% help=text/char-at\n    //% blockId=\"string_get\" block=\"char from %this=text|at %pos\" blockNamespace=\"text\"\n    charAt(index: number): string;\n\n    /** Returns the length of a String object. */\n    //% property shim=String_::length weight=47\n    //% blockId=\"text_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"text\"\n    length: number;\n\n    /**\n     * Return the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    //% shim=String_::charCodeAt\n    charCodeAt(index: number): number;\n\n    /**\n     * See how the order of characters in two strings is different (in ASCII encoding).\n     * @param that String to compare to target string\n     */\n    //% shim=String_::compare\n    //% help=text/compare\n    //% blockId=\"string_compare\" block=\"compare %this=text| to %that\" blockNamespace=\"text\"\n    compare(that: string): number;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param length number of characters to extract\n     */\n    //% shim=String_::substr length.defl=10\n    //% help=text/substr\n    //% blockId=\"string_substr\" block=\"substring of %this=text|from %start|of length %length\" blockNamespace=\"text\"\n    substr(start: number, length?: number): string;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param end one-past-last character index\n     */\n    //% helper=stringSlice\n    slice(start: number, end?: number): string;\n\n    // This block is currently disabled, as it does not compile in some targets\n    // Add % sign back to the block annotation to re-enable\n    /** Returns a value indicating if the string is empty */\n    //% shim=String_::isEmpty\n    //% blockId=\"string_isempty\" blockNamespace=\"text\"\n    // block=\"%this=text| is empty\"\n    isEmpty(): boolean;\n\n    /**\n     * Returns the position of the first occurrence of a specified value in a string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::indexOf\n    //% help=text/index-of\n    //% blockId=\"string_indexof\" blockNamespace=\"text\"\n    indexOf(searchValue: string, start?: number): number;\n\n    /**\n     * Determines whether a string contains the characters of a specified string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::includes\n    //% help=text/includes\n    //% blockId=\"string_includes\" blockNamespace=\"text\"\n    includes(searchValue: string, start?: number): boolean;\n\n    [index: number]: string;\n}\n\n/**\n  * Convert a string to a number.\n  * @param s A string to convert into a number. eg: 123\n  */\n//% shim=String_::toNumber\n//% help=text/parse-float\n//% blockId=\"string_parsefloat\" block=\"parse to number %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\ndeclare function parseFloat(text: string): number;\n\ninterface Object { }\ninterface Function { }\ninterface IArguments { }\ninterface RegExp { }\ntype TemplateStringsArray = Array<string>;\n\ntype uint8 = number;\ntype uint16 = number;\ntype uint32 = number;\ntype int8 = number;\ntype int16 = number;\ntype int32 = number;\n\n\ndeclare interface Boolean {\n    /**\n     * Returns a string representation of an object.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Combine, split, and search text strings.\n*/\n//% blockNamespace=\"Text\"\ndeclare namespace String {\n\n    /**\n     * Make a string from the given ASCII character code.\n     */\n    //% help=math/from-char-code\n    //% shim=String_::fromCharCode\n    //% weight=0\n    //% blockNamespace=\"Text\" blockId=\"stringFromCharCode\" block=\"text from char code %code\" weight=1\n    function fromCharCode(code: number): string;\n}\n\ndeclare interface Number {\n    /**\n     * Returns a string representation of a number.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Add, remove, and replace items in lists.\n*/\n//% blockNamespace=\"Arrays\"\ndeclare namespace Array {\n    /**\n     * Check if a given object is an array.\n     */\n    //% shim=Array_::isArray\n    function isArray(obj: any): boolean;\n}\n\ndeclare namespace Object {\n    /**\n     * Return the field names in an object.\n     */\n    //% shim=pxtrt::keysOf\n    function keys(obj: any): string[];\n}\n\n/**\n * More complex operations with numbers.\n*/\ndeclare namespace Math {\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    //% shim=Math_::pow\n    function pow(x: number, y: number): number;\n\n    /**\n     * Returns a pseudorandom number between 0 and 1.\n     */\n    //% shim=Math_::random\n    //% help=math/random\n    function random(): number;\n\n    /**\n     * Returns a pseudorandom number between min and max included.\n     * If both numbers are integral, the result is integral.\n     * @param min the lower inclusive bound, eg: 0\n     * @param max the upper inclusive bound, eg: 10\n     */\n    //% blockId=\"device_random\" block=\"pick random %min|to %limit\"\n    //% help=math/random-range\n    //% shim=Math_::randomRange\n    function randomRange(min: number, max: number): number;\n\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A number\n     */\n    //% shim=Math_::log\n    function log(x: number): number;\n\n    /**\n     * Returns returns ``e^x``.\n     * @param x A number\n     */\n    //% shim=Math_::exp\n    function exp(x: number): number;\n\n    /**\n     * Returns the sine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::sin\n    function sin(x: number): number;\n\n    /**\n     * Returns the cosine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::cos\n    function cos(x: number): number;\n\n    /**\n     * Returns the tangent of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::tan\n    function tan(x: number): number;\n\n    /**\n     * Returns the arcsine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::asin\n    function asin(x: number): number;\n\n    /**\n     * Returns the arccosine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::acos\n    function acos(x: number): number;\n\n    /**\n     * Returns the arctangent (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::atan\n    function atan(x: number): number;\n\n    /**\n     * Returns the arctangent of the quotient of its arguments.\n     * @param y A number\n     * @param x A number\n     */\n    //% shim=Math_::atan2\n    function atan2(y: number, x: number): number;\n\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::sqrt\n    function sqrt(x: number): number;\n\n    /**\n     * Returns the smallest number greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::ceil\n    function ceil(x: number): number;\n\n    /**\n      * Returns the greatest number less than or equal to its numeric argument.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::floor\n    function floor(x: number): number;\n\n    /**\n      * Returns the number with the decimal part truncated.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::trunc\n    function trunc(x: number): number;\n\n    /**\n      * Returns a supplied numeric expression rounded to the nearest number.\n      * @param x The value to be rounded to the nearest number.\n      */\n    //% shim=Math_::round\n    function round(x: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit multiplication of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::imul\n    function imul(x: number, y: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit division of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::idiv\n    function idiv(x: number, y: number): number;\n}\n",
      "pxt-helpers.ts": "type Action = () => void;\n\n\n/**\n  * Convert a string to an integer.\n  * @param s A string to convert into an integral number. eg: 123\n  */\n//% help=text/parse-int\n//% blockId=\"string_parseint\" block=\"parse to integer %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\n//% blockHidden=1\nfunction parseInt(text: string): number {\n    return parseFloat(text) >> 0;\n}\n\nnamespace helpers {\n    export function arraySplice<T>(arr: T[], start: number, len: number) {\n        if (start < 0) {\n            return;\n        }\n        for (let i = 0; i < len; ++i) {\n            arr.removeAt(start)\n        }\n    }\n\n    export function arrayReverse<T>(arr: T[]): void {\n        let len = arr.length;\n        for (let i = 0; i < len / 2; i++) {\n            swap(arr, i, len - i - 1);\n        }\n    }\n\n    export function arrayShift<T>(arr: T[]): T {\n        return arr.removeAt(0);\n    }\n\n    export function arrayJoin<T>(arr: T[], sep: string): string {\n        let r = \"\";\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            if (i > 0 && sep)\n                r += sep;\n            r += arr[i] || \"\";\n        }\n        return r;\n    }\n\n    /*TODO: Enable this multiple value unshift, after rest is enabled in our compiler.\n        export function arrayUnshift<T>(arr: T[], ...values: T[]) : number {\n            for(let i = values.length; i > 0; --i) {\n                arr.insertAt(0, values[i - 1]);\n            }\n            return arr.length;\n        }\n    */\n    export function arrayUnshift<T>(arr: T[], value: T): number {\n        arr.insertAt(0, value);\n        return arr.length;\n    }\n\n    function swap<T>(arr: T[], i: number, j: number): void {\n        let temp: T = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    function sortHelper<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (arr.length <= 0 || !callbackfn) {\n            return arr;\n        }\n        let len = arr.length;\n        // simple selection sort.\n        for (let i = 0; i < len - 1; ++i) {\n            for (let j = i + 1; j < len; ++j) {\n                if (callbackfn(arr[i], arr[j]) > 0) {\n                    swap(arr, i, j);\n                }\n            }\n        }\n        return arr;\n    }\n\n    export function arraySort<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (!callbackfn) {\n            //TODO: support native strings and number sorting\n            /* callbackfn = function (value1: string, value2: string) : number {\n                return value1.compare(value2);\n                }*/\n        }\n        return sortHelper(arr, callbackfn);\n    }\n\n    export function arrayMap<T, U>(arr: T[], callbackfn: (value: T, index: number) => U): U[] {\n        let res: U[] = []\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            res.push(callbackfn(arr[i], i))\n        }\n        return res\n    }\n\n    export function arraySome<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (callbackfn(arr[i], i))\n                return true;\n        return false;\n    }\n\n    export function arrayEvery<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (!callbackfn(arr[i], i))\n                return false;\n        return true;\n    }\n\n    export function arrayForEach<T>(arr: T[], callbackfn: (value: T, index: number) => void): void {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            callbackfn(arr[i], i);\n        }\n    }\n\n    export function arrayFilter<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T[] {\n        let res: T[] = []\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) res.push(v)\n        }\n        return res\n    }\n\n    export function arrayFind<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) return v;\n        }\n        return undefined;\n    }\n\n    export function arrayReduce<T, U>(arr: T[], callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            initialValue = callbackfn(initialValue, arr[i], i)\n        }\n        return initialValue\n    }\n\n    export function arrayConcat<T>(arr: T[], otherArr: T[]): T[]{\n        let out: T[] = [];\n        for (let value of arr) {\n            out.push(value);\n        }\n        for (let value of otherArr) {\n            out.push(value);\n        }\n        return out;\n    }\n\n    export function arraySlice<T>(arr: T[], start: number, end: number): T[] {\n        const res: T[] = [];\n        const len = arr.length;\n\n        if (start < 0) {\n            start = Math.max(len + start, 0);\n        }\n\n        if (end < 0) {\n            end = len + end;\n        }\n\n        const sliceLength = end - start;\n\n        for (let i = 0; i < sliceLength; ++i) {\n            const index = i + start;\n            if (index >= len) {\n                break;\n            }\n            res.push(arr[index]);\n        }\n        return res;\n    }\n\n    export function stringSlice(s: string, start: number, end?: number): string {\n        const len = s.length;\n\n        if (start < 0) {\n            start = Math.max(len + start, 0);\n        }\n\n        if (end == null) {\n            end = len;\n        }\n\n        if (end < 0) {\n            end = len + end;\n        }\n\n        return s.substr(start, end - start);\n    }\n}\n\nnamespace Math {\n    export function clamp(min: number, max: number, value: number): number {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    export function abs(x: number): number {\n        return x < 0 ? -x : x;\n    }\n\n    /**\n      * Returns the sign of the x, indicating whether x is positive, negative or zero.\n      * @param x The numeric expression to test\n      */\n    export function sign(x: number): number {\n        if (x == 0) return 0;\n        if (x > 0) return 1;\n        return -1;\n    }\n\n    /**\n      * Returns the larger of two supplied numeric expressions.\n      */\n    export function max(a: number, b: number): number {\n        if (a >= b) return a;\n        return b;\n    }\n\n    /**\n      * Returns the smaller of two supplied numeric expressions.\n      */\n    export function min(a: number, b: number): number {\n        if (a <= b) return a;\n        return b;\n    }\n\n    /**\n     * Rounds ``x`` to a number with the given number of ``digits``\n     * @param x the number to round\n     * @param digits the number of resulting digits\n     */\n    //%\n    export function roundWithPrecision(x: number, digits: number): number {\n        digits = digits | 0;\n        // invalid digits input\n        if (digits <= 0) return Math.round(x);\n        if (x == 0) return 0;\n        let r = 0;\n        do {\n            const d = Math.pow(10, digits);\n            r = Math.round(x * d) / d;\n            digits++;\n        } while (r == 0 && digits < 21);\n        return r;\n    }\n}\n\n\n//% blockHidden=1\nnamespace __internal {\n    /**\n     * A shim to render a boolean as a down/up toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleDownUp block=\"%down\"\n    //% down.fieldEditor=toggledownup\n    //% down.fieldOptions.decompileLiterals=true\n    export function __downUp(down: boolean): boolean {\n        return down;\n    }\n\n    /**\n     * A shim to render a boolean as a up/down toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleUpDown block=\"%up\"\n    //% up.fieldEditor=toggleupdown\n    //% up.fieldOptions.decompileLiterals=true\n    export function __upDown(up: boolean): boolean {\n        return up;\n    }\n\n    /**\n     * A shim to render a boolean as a high/low toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleHighLow block=\"%high\"\n    //% high.fieldEditor=togglehighlow\n    //% high.fieldOptions.decompileLiterals=true\n    export function __highLow(high: boolean): boolean {\n        return high;\n    }\n\n    /**\n     * A shim to render a boolean as a on/off toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleOnOff block=\"%on\"\n    //% on.fieldEditor=toggleonoff\n    //% on.fieldOptions.decompileLiterals=true\n    export function __onOff(on: boolean): boolean {\n        return on;\n    }\n\n    /**\n     * A shim to render a boolean as a yes/no toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleYesNo block=\"%yes\"\n    //% yes.fieldEditor=toggleyesno\n    //% yes.fieldOptions.decompileLiterals=true\n    export function __yesNo(yes: boolean): boolean {\n        return yes;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param color color, eg: #ff0000\n     */\n    //% blockId=colorNumberPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colornumber\" value.fieldOptions.decompileLiterals=true\n    //% value.defl='#ff0000'\n    //% value.fieldOptions.colours='[\"#ff0000\",\"#ff8000\",\"#ffff00\",\"#ff9da5\",\"#00ff00\",\"#b09eff\",\"#00ffff\",\"#007fff\",\"#65471f\",\"#0000ff\",\"#7f00ff\",\"#ff0080\",\"#ff00ff\",\"#ffffff\",\"#999999\",\"#000000\"]'\n    //% value.fieldOptions.columns=4 value.fieldOptions.className='rgbColorPicker'\n    export function __colorNumberPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param value value between 0 to 255 to get a color value, eg: 10\n     */\n    //% blockId=colorWheelPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    export function __colorWheelPicker(value: number) {\n        return value;\n    }\n\n    /**\n    * Get the color wheel field editor using HSV values\n    * @param value value between 0 to 255 to get a color value, eg: 10\n    */\n    //% blockId=colorWheelHsvPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    //% value.fieldOptions.channel=hsvfast\n    export function __colorWheelHsvPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * A speed picker\n     * @param speed the speed, eg: 50\n     */\n    //% blockId=speedPicker block=\"%speed\" shim=TD_ID\n    //% speed.fieldEditor=\"speed\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 speed.fieldOptions.decompileLiterals=1\n    export function __speedPicker(speed: number): number {\n        return speed;\n    }\n\n    /**\n     * A turn ratio picker\n     * @param turnratio the turn ratio, eg: 0\n     */\n    //% blockId=turnRatioPicker block=\"%turnratio\" shim=TD_ID\n    //% turnratio.fieldEditor=\"turnratio\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 turnRatio.fieldOptions.decompileLiterals=1\n    export function __turnRatioPicker(turnratio: number): number {\n        return turnratio;\n    }\n\n    /**\n     * A field editor that displays a protractor\n     */\n    //% blockId=protractorPicker block=\"%angle\"\n    //% shim=TD_ID\n    //% angle.fieldEditor=protractor\n    //% angle.fieldOptions.decompileLiterals=1    \n    //% colorSecondary=\"#FFFFFF\"\n    //% blockHidden=1\n    export function __protractor(angle: number) {\n        return angle;\n    }\n\n    /**\n      * Get the time field editor\n      * @param ms time duration in milliseconds, eg: 500, 1000\n      */\n    //% blockId=timePicker block=\"%ms\"\n    //% blockHidden=true shim=TD_ID\n    //% colorSecondary=\"#FFFFFF\"\n    //% ms.fieldEditor=\"numberdropdown\" ms.fieldOptions.decompileLiterals=true\n    //% ms.fieldOptions.data='[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000]]'\n    export function __timePicker(ms: number): number {\n        return ms;\n    }\n}",
      "pxt.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\nnamespace pxt {\n\n#ifndef PXT_GC\nTValue incr(TValue e) {\n    if (isRefCounted(e)) {\n        getVTable((RefObject *)e);\n        ((RefObject *)e)->ref();\n    }\n    return e;\n}\n\nvoid decr(TValue e) {\n    if (isRefCounted(e)) {\n        ((RefObject *)e)->unref();\n    }\n}\n#endif\n\nAction mkAction(int totallen, RefAction *act) {\n    check(getVTable(act)->classNo == BuiltInType::RefAction, PANIC_INVALID_BINARY_HEADER, 1);\n\n    if (totallen == 0) {\n        return (TValue)act; // no closure needed\n    }\n\n    void *ptr = gcAllocate(sizeof(RefAction) + totallen * sizeof(unsigned));\n    RefAction *r = new (ptr) RefAction();\n    r->len = totallen;\n    r->func = act->func;\n    memset(r->fields, 0, r->len * sizeof(unsigned));\n\n    MEMDBG(\"mkAction: start=%p => %p\", act, r);\n\n    return (Action)r;\n}\n\nRefRecord *mkClassInstance(VTable *vtable) {\n    intcheck(vtable->methods[0] == &RefRecord_destroy, PANIC_SIZE, 3);\n    // intcheck(vtable->methods[1] == &RefRecord_print, PANIC_SIZE, 4);\n\n    void *ptr = gcAllocate(vtable->numbytes);\n    RefRecord *r = new (ptr) RefRecord(vtable);\n    memset(r->fields, 0, vtable->numbytes - sizeof(RefRecord));\n    MEMDBG(\"mkClass: vt=%p => %p\", vtable, r);\n    return r;\n}\n\nTValue RefRecord::ld(int idx) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 1);\n    return fields[idx];\n}\n\nTValue RefRecord::ldref(int idx) {\n    // DMESG(\"LD %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, PANIC_OUT_OF_BOUNDS, 2);\n    TValue tmp = fields[idx];\n    incr(tmp);\n    return tmp;\n}\n\nvoid RefRecord::st(int idx, TValue v) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 3);\n    fields[idx] = v;\n}\n\nvoid RefRecord::stref(int idx, TValue v) {\n    // DMESG(\"ST %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, PANIC_OUT_OF_BOUNDS, 4);\n    decr(fields[idx]);\n    fields[idx] = v;\n}\n\nvoid RefObject::destroyVT() {\n    ((RefObjectMethod)getVTable(this)->methods[0])(this);\n#ifndef PXT_GC\n    free(this);\n#endif\n}\n\n//%\nvoid deleteRefObject(RefObject *obj) {\n    obj->destroyVT();\n}\n\nvoid RefObject::printVT() {\n    ((RefObjectMethod)getVTable(this)->methods[1])(this);\n}\n\nvoid RefRecord_destroy(RefRecord *r) {\n#ifndef PXT_GC\n    VTable *tbl = getVTable(r);\n    int len = (tbl->numbytes - sizeof(RefRecord)) >> 2;\n    for (int i = 0; i < len; ++i) {\n        decr(r->fields[i]);\n        r->fields[i] = 0;\n    }\n#endif\n}\n\nvoid RefRecord_print(RefRecord *r) {\n    DMESG(\"RefRecord %p r=%d size=%d bytes\", r, REFCNT(r), getVTable(r)->numbytes);\n}\n\nvoid Segment::set(unsigned i, TValue value) {\n    if (i < size) {\n        data[i] = value;\n    } else if (i < Segment::MaxSize) {\n        growByMin(i + 1);\n        data[i] = value;\n    } else {\n        return;\n    }\n    if (length <= i) {\n        length = i + 1;\n    }\n\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::set\");\n    this->print();\n#endif\n\n    return;\n}\n\nstatic inline int growthFactor(int size) {\n    if (size == 0) {\n        return 4;\n    }\n    if (size < 64) {\n        return size * 2; // Double\n    }\n    if (size < 512) {\n        return size * 5 / 3; // Grow by 1.66 rate\n    }\n    // Grow by constant rate\n    if ((unsigned)size + 256 < Segment::MaxSize)\n        return size + 256;\n    else\n        return Segment::MaxSize;\n}\n\nvoid LLSegment::setLength(unsigned newLen) {\n    if (newLen > Segment::MaxSize)\n        return;\n\n    if (newLen > size) {\n        int newSize = growthFactor(size);\n        if (newSize < (int)newLen)\n            newSize = newLen;\n\n        // this will throw if unable to allocate\n        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));\n\n        // Copy existing data\n        if (size) {\n            memcpy(tmp, data, size * sizeof(TValue));\n        }\n        // fill the rest with default value\n        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));\n\n        // free older segment;\n        xfree(data);\n\n        data = tmp;\n        size = newSize;\n    } else if (newLen < length) {\n        memset(data + newLen, 0, (length - newLen) * sizeof(TValue));\n    }\n\n    length = newLen;\n}\n\nvoid LLSegment::set(unsigned idx, TValue v) {\n    if (idx >= Segment::MaxSize)\n        return;\n    if (idx >= length)\n        setLength(idx + 1);\n    data[idx] = v;\n}\n\nTValue LLSegment::pop() {\n    if (length > 0) {\n        --length;\n        TValue value = data[length];\n        data[length] = 0;\n        return value;\n    }\n    return 0;\n}\n\nvoid LLSegment::destroy() {\n    length = size = 0;\n    xfree(data);\n    data = nullptr;\n}\n\nvoid Segment::growByMin(ramint_t minSize) {\n    ramint_t newSize = max(minSize, (ramint_t)growthFactor(size));\n\n    if (size < newSize) {\n        // this will throw if unable to allocate\n        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));\n\n        // Copy existing data\n        if (size)\n            memcpy(tmp, data, size * sizeof(TValue));\n        // fill the rest with default value\n        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));\n\n        data = tmp;\n        size = newSize;\n\n#ifdef DEBUG_BUILD\n        DMESG(\"growBy - after reallocation\");\n        this->print();\n#endif\n    }\n    // else { no shrinking yet; }\n    return;\n}\n\nvoid Segment::ensure(ramint_t newSize) {\n    if (newSize < size) {\n        return;\n    }\n    growByMin(newSize);\n}\n\nvoid Segment::setLength(unsigned newLength) {\n    if (newLength > size) {\n        ensure(length);\n    }\n    length = newLength;\n    return;\n}\n\nTValue Segment::pop() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::pop\");\n    this->print();\n#endif\n\n    if (length > 0) {\n        --length;\n        TValue value = data[length];\n        data[length] = Segment::DefaultValue;\n        return value;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function removes an element at index i and shifts the rest of the elements to\n// left to fill the gap\nTValue Segment::remove(unsigned i) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::remove index:%d\", i);\n    this->print();\n#endif\n    if (i < length) {\n        // value to return\n        TValue ret = data[i];\n        if (i + 1 < length) {\n            // Move the rest of the elements to fill in the gap.\n            memmove(data + i, data + i + 1, (length - i - 1) * sizeof(unsigned));\n        }\n        length--;\n        data[length] = Segment::DefaultValue;\n#ifdef DEBUG_BUILD\n        DMESG(\"After Segment::remove index:%d\", i);\n        this->print();\n#endif\n        return ret;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function inserts element value at index i by shifting the rest of the elements right.\nvoid Segment::insert(unsigned i, TValue value) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::insert index:%d value:%d\", i, value);\n    this->print();\n#endif\n\n    if (i < length) {\n        ensure(length + 1);\n\n        // Move the rest of the elements to fill in the gap.\n        memmove(data + i + 1, data + i, (length - i) * sizeof(unsigned));\n\n        data[i] = value;\n        length++;\n    } else {\n        // This is insert beyond the length, just call set which will adjust the length\n        set(i, value);\n    }\n#ifdef DEBUG_BUILD\n    DMESG(\"After Segment::insert index:%d\", i);\n    this->print();\n#endif\n}\n\nvoid Segment::print() {\n    DMESG(\"Segment: %p, length: %d, size: %d\", data, (unsigned)length, (unsigned)size);\n    for (unsigned i = 0; i < size; i++) {\n        DMESG(\"-> %d\", (unsigned)(uintptr_t)data[i]);\n    }\n}\n\nvoid Segment::destroy() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::destroy\");\n    this->print();\n#endif\n    length = size = 0;\n    data = nullptr;\n}\n\nPXT_VTABLE_CTOR(RefCollection) {}\n\nvoid RefCollection::destroy(RefCollection *t) {\n#ifndef PXT_GC\n    auto data = t->head.getData();\n    auto len = t->head.getLength();\n    for (unsigned i = 0; i < len; i++) {\n        decr(data[i]);\n    }\n#endif\n    t->head.destroy();\n}\n\nvoid RefCollection::print(RefCollection *t) {\n    DMESG(\"RefCollection %p r=%d size=%d\", t, REFCNT(t), t->head.getLength());\n    t->head.print();\n}\n\nPXT_VTABLE_CTOR(RefAction) {}\n\n// fields[] contain captured locals\nvoid RefAction::destroy(RefAction *t) {\n#ifndef PXT_GC\n    for (int i = 0; i < t->len; ++i) {\n        decr(t->fields[i]);\n        t->fields[i] = 0;\n    }\n#endif\n}\n\nvoid RefAction::print(RefAction *t) {\n    DMESG(\"RefAction %p r=%d pc=%X size=%d\", t, REFCNT(t),\n          (const uint8_t *)t->func - (const uint8_t *)bytecode, t->len);\n}\n\nPXT_VTABLE_CTOR(RefRefLocal) {\n    v = 0;\n}\n\nvoid RefRefLocal::print(RefRefLocal *t) {\n    DMESG(\"RefRefLocal %p r=%d v=%p\", t, REFCNT(t), (void *)t->v);\n}\n\nvoid RefRefLocal::destroy(RefRefLocal *t) {\n    decr(t->v);\n}\n\nPXT_VTABLE_CTOR(RefMap) {}\n\nvoid RefMap::destroy(RefMap *t) {\n#ifndef PXT_GC\n    auto len = t->values.getLength();\n    auto values = t->values.getData();\n    auto keys = t->keys.getData();\n    intcheck(t->keys.getLength() == len, PANIC_SIZE, 101);\n    for (unsigned i = 0; i < len; ++i) {\n        decr(values[i]);\n        values[i] = nullptr;\n        decr(keys[i]);\n        keys[i] = nullptr;\n    }\n#endif\n    t->keys.destroy();\n    t->values.destroy();\n}\n\nint RefMap::findIdx(String key) {\n    auto len = keys.getLength();\n    auto data = (String *)keys.getData();\n\n    // fast path\n    for (unsigned i = 0; i < len; ++i) {\n        if (data[i] == key)\n            return i;\n    }\n\n    // slow path\n    auto keylen = key->length;\n    for (unsigned i = 0; i < len; ++i) {\n        auto s = data[i];\n        if (s->length == keylen && memcmp(s->data, key->data, keylen) == 0)\n            return i;\n    }\n\n    return -1;\n}\n\nvoid RefMap::print(RefMap *t) {\n    DMESG(\"RefMap %p r=%d size=%d\", t, REFCNT(t), t->keys.getLength());\n}\n\nvoid debugMemLeaks() {}\n\nvoid error(PXT_PANIC code, int subcode) {\n    DMESG(\"Error: %d [%d]\", code, subcode);\n    target_panic(code);\n}\n\nuint16_t *bytecode;\nTValue *globals;\n\nvoid checkStr(bool cond, const char *msg) {\n    if (!cond) {\n        while (true) {\n            // uBit.display.scroll(msg, 100);\n            // uBit.sleep(100);\n        }\n    }\n}\n\nint templateHash() {\n    return ((int *)bytecode)[4];\n}\n\nint programHash() {\n    return ((int *)bytecode)[6];\n}\n\nint getNumGlobals() {\n    return bytecode[16];\n}\n\n#ifndef X86_64\nvoid exec_binary(unsigned *pc) {\n    // XXX re-enable once the calibration code is fixed and [editor/embedded.ts]\n    // properly prepends a call to [internal_main].\n    // ::touch_develop::internal_main();\n\n    // unique group for radio based on source hash\n    // ::touch_develop::micro_bit::radioDefaultGroup = programHash();\n\n    unsigned ver = *pc++;\n    checkStr(ver == 0x4210, \":( Bad runtime version\");\n\n    bytecode = *((uint16_t **)pc++); // the actual bytecode is here\n    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());\n    memset(globals, 0, sizeof(TValue) * getNumGlobals());\n\n    // can be any valid address, best in RAM for speed\n    globals[0] = (TValue)&globals;\n\n    // just compare the first word\n    // TODO\n    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,\n             \":( Failed partial flash\");\n\n    uintptr_t startptr = (uintptr_t)bytecode;\n\n    startptr += 64; // header\n\n    initPerfCounters();\n\n    initRuntime();\n\n    runAction0((Action)startptr);\n\n    pxt::releaseFiber();\n}\n\nvoid start() {\n    exec_binary((unsigned *)functionsAndBytecode);\n}\n#endif\n\n} // namespace pxt\n\nnamespace Array_ {\n//%\nbool isArray(TValue arr) {\n    auto vt = getAnyVTable(arr);\n    return vt && vt->classNo == BuiltInType::RefCollection;\n}\n} // namespace Array_\n\nnamespace pxtrt {\n//%\nRefCollection *keysOf(TValue v) {\n    auto r = NEW_GC(RefCollection);\n    MEMDBG(\"mkColl[keys]: => %p\", r);\n    if (getAnyVTable(v) != &RefMap_vtable)\n        return r;\n    auto rm = (RefMap *)v;\n    auto len = rm->keys.getLength();\n    if (!len)\n        return r;\n    r->setLength(len);\n    auto dst = r->getData();\n    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));\n    for (unsigned i = 0; i < len; ++i)\n        incr(dst[i]);\n    return r;\n}\n} // namespace pxtrt\n",
      "pxt.json": "{\n    \"name\": \"base\",\n    \"description\": \"The base library\",\n    \"files\": [\n        \"README.md\",\n        \"pxt-core.d.ts\",\n        \"pxt.cpp\",\n        \"gc.cpp\",\n        \"configkeys.h\",\n        \"pxtbase.h\",\n        \"core.cpp\",\n        \"advmath.cpp\",\n        \"pxt-helpers.ts\",\n        \"buffer.cpp\",\n        \"buffer.ts\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"loops.cpp\",\n        \"math.ts\",\n        \"ns.ts\",\n        \"control.cpp\",\n        \"control.ts\",\n        \"console.ts\",\n        \"json.ts\",\n        \"eventcontext.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {},\n    \"targetVersions\": {\n        \"target\": \"0.5.73\"\n    }\n}",
      "pxtbase.h": "#ifndef __PXTBASE_H\n#define __PXTBASE_H\n\n#pragma GCC diagnostic ignored \"-Wunused-parameter\"\n#pragma GCC diagnostic ignored \"-Wformat\"\n#pragma GCC diagnostic ignored \"-Warray-bounds\"\n\n// needed for gcc6; not sure why\n#undef min\n#undef max\n\n#define NOLOG(...)                                                                                 \\\n    do {                                                                                           \\\n    } while (0)\n\n#define MEMDBG NOLOG\n//#define MEMDBG DMESG\n#define MEMDBG2 NOLOG\n\n#include \"pxtconfig.h\"\n#include \"configkeys.h\"\n\n#define intcheck(...) check(__VA_ARGS__)\n//#define intcheck(...) do {} while (0)\n\n#ifdef PXT_USE_FLOAT\n#define NUMBER float\n#else\n#define NUMBER double\n#endif\n\n#include <string.h>\n#include <stdint.h>\n#include <math.h>\n\n#ifdef POKY\nvoid *operator new(size_t size, void *ptr);\nvoid *operator new(size_t size);\n#else\n#include <new>\n#endif\n\n#include \"platform.h\"\n#include \"pxtcore.h\"\n\n#ifndef PXT_VTABLE_SHIFT\n#define PXT_VTABLE_SHIFT 2\n#endif\n\n#define PXT_REFCNT_FLASH 0xfffe\n\n#define CONCAT_1(a, b) a##b\n#define CONCAT_0(a, b) CONCAT_1(a, b)\n#define STATIC_ASSERT(e) enum { CONCAT_0(_static_assert_, __LINE__) = 1 / ((e) ? 1 : 0) };\n\n#ifndef ramint_t\n// this type limits size of arrays\n#ifdef __linux__\n// TODO fix the inline array accesses to take note of this!\n#define ramint_t uint32_t\n#else\n#define ramint_t uint16_t\n#endif\n#endif\n\n#ifndef PXT_IN_ISR\n#define PXT_IN_ISR() (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)\n#endif\n\n#ifdef POKY\ninline void *operator new(size_t, void *p) {\n    return p;\n}\ninline void *operator new[](size_t, void *p) {\n    return p;\n}\n#endif\n\nnamespace pxt {\n\ntemplate <typename T> inline const T &max(const T &a, const T &b) {\n    if (a < b)\n        return b;\n    return a;\n}\n\ntemplate <typename T> inline const T &min(const T &a, const T &b) {\n    if (a < b)\n        return a;\n    return b;\n}\n\ntemplate <typename T> inline void swap(T &a, T &b) {\n    T tmp = a;\n    a = b;\n    b = tmp;\n}\n\n//\n// Tagged values (assume 4 bytes for now, Cortex-M0)\n//\nstruct TValueStruct {};\ntypedef TValueStruct *TValue;\n\ntypedef TValue TNumber;\ntypedef TValue Action;\ntypedef TValue ImageLiteral;\n\n// To be implemented by the target\nextern \"C\" void target_panic(int error_code);\nextern \"C\" void target_reset();\nvoid sleep_ms(unsigned ms);\nvoid sleep_us(uint64_t us);\nvoid releaseFiber();\nuint64_t current_time_us();\nint current_time_ms();\nvoid initRuntime();\nvoid sendSerial(const char *data, int len);\nvoid setSendToUART(void (*f)(const char *, int));\nint getSerialNumber();\nvoid registerWithDal(int id, int event, Action a, int flags = 16); // EVENT_LISTENER_DEFAULT_FLAGS\nvoid runInParallel(Action a);\nvoid runForever(Action a);\nvoid waitForEvent(int id, int event);\n//%\nunsigned afterProgramPage();\n//%\nvoid dumpDmesg();\n\n// also defined DMESG macro\n// end\n\n#define TAGGED_SPECIAL(n) (TValue)(void *)((n << 2) | 2)\n#define TAG_FALSE TAGGED_SPECIAL(2) // 10\n#define TAG_TRUE TAGGED_SPECIAL(16) // 66\n#define TAG_UNDEFINED (TValue)0\n#define TAG_NULL TAGGED_SPECIAL(1) // 6\n#define TAG_NAN TAGGED_SPECIAL(3)  // 14\n#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)\n\ninline bool isTagged(TValue v) {\n    return ((intptr_t)v & 3) || !v;\n}\n\ninline bool isNumber(TValue v) {\n    return (intptr_t)v & 1;\n}\n\ninline bool isSpecial(TValue v) {\n    return (intptr_t)v & 2;\n}\n\ninline bool bothNumbers(TValue a, TValue b) {\n    return (intptr_t)a & (intptr_t)b & 1;\n}\n\ninline int numValue(TValue n) {\n    return (intptr_t)n >> 1;\n}\n\n#ifdef PXT_BOX_DEBUG\ninline bool canBeTagged(int) {\n    return false;\n}\n#else\ninline bool canBeTagged(int v) {\n    return (v << 1) >> 1 == v;\n}\n#endif\n\ntypedef enum {\n    PANIC_CODAL_OOM = 20,\n    PANIC_GC_OOM = 21,\n    PANIC_CODAL_HEAP_ERROR = 30,\n    PANIC_CODAL_NULL_DEREFERENCE = 40,\n    PANIC_CODAL_USB_ERROR = 50,\n    PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR = 90,\n\n    PANIC_INVALID_BINARY_HEADER = 901,\n    PANIC_OUT_OF_BOUNDS = 902,\n    PANIC_REF_DELETED = 903,\n    PANIC_SIZE = 904,\n    PANIC_INVALID_VTABLE = 905,\n    PANIC_INTERNAL_ERROR = 906,\n    PANIC_NO_SUCH_CONFIG = 907,\n    PANIC_NO_SUCH_PIN = 908,\n    PANIC_INVALID_ARGUMENT = 909,\n    PANIC_MEMORY_LIMIT_EXCEEDED = 910,\n    PANIC_SCREEN_ERROR = 911,\n    PANIC_MISSING_PROPERTY = 912,\n    PANIC_INVALID_IMAGE = 913,\n    PANIC_CALLED_FROM_ISR = 914,\n    PANIC_HEAP_DUMPED = 915,\n\n    PANIC_CAST_FIRST = 980,\n    PANIC_CAST_FROM_UNDEFINED = 980,\n    PANIC_CAST_FROM_BOOLEAN = 981,\n    PANIC_CAST_FROM_NUMBER = 982,\n    PANIC_CAST_FROM_STRING = 983,\n    PANIC_CAST_FROM_OBJECT = 984,\n    PANIC_CAST_FROM_FUNCTION = 985,\n    PANIC_CAST_FROM_NULL = 989,\n\n} PXT_PANIC;\n\nextern const unsigned functionsAndBytecode[];\nextern TValue *globals;\nextern uint16_t *bytecode;\nclass RefRecord;\n\n// Utility functions\n\ntypedef TValue (*RunActionType)(Action a, TValue arg0, TValue arg1, TValue arg2);\ntypedef TValue (*GetPropertyType)(TValue obj, unsigned key);\ntypedef TValue (*SetPropertyType)(TValue obj, unsigned key, TValue v);\n\n#define asmRunAction3 ((RunActionType)(((uintptr_t *)bytecode)[12]))\n\nstatic inline TValue runAction3(Action a, TValue arg0, TValue arg1, TValue arg2) {\n    return asmRunAction3(a, arg0, arg1, 0);\n}\nstatic inline TValue runAction2(Action a, TValue arg0, TValue arg1) {\n    return asmRunAction3(a, arg0, arg1, 0);\n}\nstatic inline TValue runAction1(Action a, TValue arg0) {\n    return asmRunAction3(a, arg0, 0, 0);\n}\nstatic inline TValue runAction0(Action a) {\n    return asmRunAction3(a, 0, 0, 0);\n}\n\nclass RefAction;\nstruct VTable;\n\n//%\nAction mkAction(int totallen, RefAction *act);\n//%\nint templateHash();\n//%\nint programHash();\n//%\nunsigned programSize();\n//%\nint getNumGlobals();\n//%\nRefRecord *mkClassInstance(VTable *vt);\n//%\nvoid debugMemLeaks();\n//%\nvoid anyPrint(TValue v);\n\nint getConfig(int key, int defl = -1);\n\n//%\nint toInt(TNumber v);\n//%\nunsigned toUInt(TNumber v);\n//%\nNUMBER toDouble(TNumber v);\n//%\nfloat toFloat(TNumber v);\n//%\nTNumber fromDouble(NUMBER r);\n//%\nTNumber fromFloat(float r);\n\n//%\nTNumber fromInt(int v);\n//%\nTNumber fromUInt(unsigned v);\n//%\nTValue fromBool(bool v);\n//%\nbool eq_bool(TValue a, TValue b);\n//%\nbool eqq_bool(TValue a, TValue b);\n\n//%\nvoid failedCast(TValue v);\n//%\nvoid missingProperty(TValue v);\n\nvoid error(PXT_PANIC code, int subcode = 0);\nvoid exec_binary(unsigned *pc);\nvoid start();\n\nstruct HandlerBinding {\n    HandlerBinding *next;\n    int source;\n    int value;\n    Action action;\n};\nHandlerBinding *findBinding(int source, int value);\nvoid setBinding(int source, int value, Action act);\n\n// The standard calling convention is:\n//   - when a pointer is loaded from a local/global/field etc, and incr()ed\n//     (in other words, its presence on stack counts as a reference)\n//   - after a function call, all pointers are popped off the stack and decr()ed\n// This does not apply to the RefRecord and st/ld(ref) methods - they unref()\n// the RefRecord* this.\n//%\nTValue incr(TValue e);\n//%\nvoid decr(TValue e);\n\n#ifdef PXT_GC\ninline TValue incr(TValue e) {\n    return e;\n}\ninline void decr(TValue e) {}\n#endif\n\nclass RefObject;\n\nstatic inline RefObject *incrRC(RefObject *r) {\n    return (RefObject *)incr((TValue)r);\n}\nstatic inline void decrRC(RefObject *r) {\n    decr((TValue)r);\n}\n\ninline void *ptrOfLiteral(int offset) {\n    return &bytecode[offset];\n}\n\n// Checks if object is ref-counted, and has a custom PXT vtable in front\n// TODO\ninline bool isRefCounted(TValue e) {\n#ifdef PXT_GC\n    return !isTagged(e);\n#else\n    return !isTagged(e) && (*((uint16_t *)e) & 1) == 1;\n#endif\n}\n\ninline void check(int cond, PXT_PANIC code, int subcode = 0) {\n    if (!cond)\n        error(code, subcode);\n}\n\ninline void oops(int subcode = 0) {\n    target_panic(800 + subcode);\n}\n\nclass RefObject;\n\ntypedef void (*RefObjectMethod)(RefObject *self);\ntypedef unsigned (*RefObjectSizeMethod)(RefObject *self);\ntypedef void *PVoid;\ntypedef void **PPVoid;\n\ntypedef void *Object_;\n\n#define VTABLE_MAGIC 0xF9\n\nenum class ValType : uint8_t {\n    Undefined,\n    Boolean,\n    Number,\n    String,\n    Object,\n    Function,\n};\n\n// keep in sync with pxt-core (search for the type name)\nenum class BuiltInType : uint16_t {\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    User0 = 16,\n};\n\nstruct VTable {\n    uint16_t numbytes;\n    ValType objectType;\n    uint8_t magic;\n    PVoid *ifaceTable;\n    BuiltInType classNo;\n    uint16_t reserved;\n    uint32_t ifaceHashMult;\n    // we only use the first few methods here; pxt will generate more\n#ifdef PXT_GC\n    PVoid methods[5];\n#else\n    PVoid methods[3];\n#endif\n};\n\n//%\nextern const VTable string_vt;\n//%\nextern const VTable buffer_vt;\n//%\nextern const VTable number_vt;\n//%\nextern const VTable RefAction_vtable;\n\n#ifdef PXT_GC\n#define PXT_VTABLE_TO_INT(vt) ((uintptr_t)(vt))\n#else\n#define PXT_VTABLE_TO_INT(vt) ((uintptr_t)(vt) >> PXT_VTABLE_SHIFT)\n#endif\n\n#ifdef PXT_GC\ninline bool isReadOnly(TValue v) {\n    return isTagged(v) || !((uint32_t)v >> 28);\n}\n#endif\n\n#ifdef PXT_GC\n#define REFCNT(x) 0\n#else\n#define REFCNT(x) ((x)->refcnt)\n#endif\n\n// A base abstract class for ref-counted objects.\nclass RefObject {\n  public:\n#ifdef PXT_GC\n    uint32_t vtable;\n\n    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }\n#else\n    uint16_t refcnt;\n    uint16_t vtable;\n\n    RefObject(const VTable *vt) {\n        refcnt = 3;\n        vtable = PXT_VTABLE_TO_INT(vt);\n    }\n#endif\n\n    void destroyVT();\n    void printVT();\n\n#ifdef PXT_GC\n    inline void ref() {}\n    inline void unref() {}\n    inline bool isReadOnly() { return pxt::isReadOnly((TValue)this); }\n#else\n    inline bool isReadOnly() { return refcnt == PXT_REFCNT_FLASH; }\n\n    // Increment/decrement the ref-count. Decrementing to zero deletes the current object.\n    inline void ref() {\n        if (isReadOnly())\n            return;\n        MEMDBG2(\"INCR: %p refs=%d\", this, this->refcnt);\n        check(refcnt > 1, PANIC_REF_DELETED);\n        refcnt += 2;\n    }\n\n    inline void unref() {\n        if (isReadOnly())\n            return;\n        MEMDBG2(\"DECR: %p refs=%d\", this, this->refcnt);\n        check(refcnt > 1, PANIC_REF_DELETED);\n        check((refcnt & 1), PANIC_REF_DELETED);\n        refcnt -= 2;\n        if (refcnt == 1) {\n            MEMDBG(\"DEL: %p\", this);\n            destroyVT();\n        }\n    }\n#endif\n};\n\nclass Segment {\n  private:\n    TValue *data;\n    ramint_t length;\n    ramint_t size;\n\n    // this just gives max value of ramint_t\n    void growByMin(ramint_t minSize);\n    void ensure(ramint_t newSize);\n\n  public:\n    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;\n    static constexpr TValue DefaultValue = TAG_UNDEFINED; // == NULL\n\n    Segment() : data(nullptr), length(0), size(0) {}\n\n    TValue get(unsigned i) { return i < length ? data[i] : NULL; }\n    void set(unsigned i, TValue value);\n\n    unsigned getLength() { return length; };\n    void setLength(unsigned newLength);\n\n    void push(TValue value) { set(length, value); }\n    TValue pop();\n\n    TValue remove(unsigned i);\n    void insert(unsigned i, TValue value);\n\n    void destroy();\n\n    void print();\n\n    TValue *getData() { return data; }\n};\n\n// Low-Level segment using system malloc\nclass LLSegment {\n  private:\n    TValue *data;\n    ramint_t length;\n    ramint_t size;\n\n  public:\n    LLSegment() : data(nullptr), length(0), size(0) {}\n\n    void set(unsigned idx, TValue v);\n    void push(TValue value) { set(length, value); }\n    TValue pop();\n    void destroy();\n    void setLength(unsigned newLen);\n\n    TValue get(unsigned i) { return i < length ? data[i] : NULL; }\n    unsigned getLength() { return length; };\n    TValue *getData() { return data; }\n};\n\n// A ref-counted collection of either primitive or ref-counted objects (String, Image,\n// user-defined record, another collection)\nclass RefCollection : public RefObject {\n  public:\n    Segment head;\n\n    RefCollection();\n\n    static void destroy(RefCollection *coll);\n    static void scan(RefCollection *coll);\n    static unsigned gcsize(RefCollection *coll);\n    static void print(RefCollection *coll);\n\n    unsigned length() { return head.getLength(); }\n    void setLength(unsigned newLength) { head.setLength(newLength); }\n    TValue getAt(int i) { return head.get(i); }\n    TValue *getData() { return head.getData(); }\n};\n\nclass BoxedString;\nclass RefMap : public RefObject {\n  public:\n    Segment keys;\n    Segment values;\n\n    RefMap();\n    static void destroy(RefMap *map);\n    static void scan(RefMap *map);\n    static unsigned gcsize(RefMap *coll);\n    static void print(RefMap *map);\n    int findIdx(BoxedString *key);\n};\n\n// A ref-counted, user-defined JS object.\nclass RefRecord : public RefObject {\n  public:\n    // The object is allocated, so that there is space at the end for the fields.\n    TValue fields[];\n\n    RefRecord(VTable *v) : RefObject(v) {}\n\n    TValue ld(int idx);\n    TValue ldref(int idx);\n    void st(int idx, TValue v);\n    void stref(int idx, TValue v);\n};\n\nstatic inline VTable *getVTable(RefObject *r) {\n#ifdef PXT_GC\n    return (VTable *)(r->vtable & ~1);\n#else\n    return (VTable *)((uintptr_t)r->vtable << PXT_VTABLE_SHIFT);\n#endif\n}\n\nstatic inline VTable *getAnyVTable(TValue v) {\n    if (!isRefCounted(v))\n        return NULL;\n    auto vt = getVTable((RefObject *)v);\n    if (vt->magic == VTABLE_MAGIC)\n        return vt;\n    return NULL;\n}\n\n// these are needed when constructing vtables for user-defined classes\n//%\nvoid RefRecord_destroy(RefRecord *r);\n//%\nvoid RefRecord_print(RefRecord *r);\n//%\nvoid RefRecord_scan(RefRecord *r);\n//%\nunsigned RefRecord_gcsize(RefRecord *r);\n\ntypedef TValue (*ActionCB)(TValue *captured, TValue arg0, TValue arg1, TValue arg2);\n\n// Ref-counted function pointer.\nclass RefAction : public RefObject {\n  public:\n    uint16_t len;\n    uint16_t reserved;\n    ActionCB func; // The function pointer\n    // fields[] contain captured locals\n    TValue fields[];\n\n    static void destroy(RefAction *act);\n    static void scan(RefAction *act);\n    static unsigned gcsize(RefAction *coll);\n    static void print(RefAction *act);\n\n    RefAction();\n\n    inline void stCore(int idx, TValue v) {\n        // DMESG(\"ST [%d] = %d \", idx, v); this->print();\n        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);\n        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted\n        fields[idx] = v;\n    }\n};\n\n// These two are used to represent locals written from inside inline functions\nclass RefRefLocal : public RefObject {\n  public:\n    TValue v;\n    static void destroy(RefRefLocal *l);\n    static void scan(RefRefLocal *l);\n    static unsigned gcsize(RefRefLocal *l);\n    static void print(RefRefLocal *l);\n    RefRefLocal();\n};\n\ntypedef int color;\n\n// note: this is hardcoded in PXT (hexfile.ts)\n\nclass BoxedNumber : public RefObject {\n  public:\n    NUMBER num;\n    BoxedNumber() : RefObject(&number_vt) {}\n} __attribute__((packed));\n\nclass BoxedString : public RefObject {\n  public:\n    uint16_t length;\n    char data[0];\n    BoxedString() : RefObject(&string_vt) {}\n};\n\nclass BoxedBuffer : public RefObject {\n  public:\n    // data needs to be word-aligned, so we use 32 bits for length\n    int length;\n    uint8_t data[0];\n    BoxedBuffer() : RefObject(&buffer_vt) {}\n};\n\n// the first byte of data indicates the format - currently 0xE1 or 0xE4 to 1 or 4 bit bitmaps\n// second byte indicates width in pixels\n// third byte indicates the height (which should also match the size of the buffer)\n// just like ordinary buffers, these can be layed out in flash\nclass RefImage : public RefObject {\n    uintptr_t _buffer;\n    uint8_t _data[0];\n\n  public:\n    RefImage(BoxedBuffer *buf);\n    RefImage(uint32_t sz);\n\n    bool hasBuffer() { return !(_buffer & 1); }\n    BoxedBuffer *buffer() { return hasBuffer() ? (BoxedBuffer *)_buffer : NULL; }\n    void setBuffer(BoxedBuffer *b);\n    bool isDirty() { return (_buffer & 3) == 3; }\n    void clearDirty() {\n        if (isDirty())\n            _buffer &= ~2;\n    }\n\n    uint8_t *data() { return hasBuffer() ? buffer()->data : _data; }\n    int length() { return hasBuffer() ? buffer()->length : (_buffer >> 2); }\n    int pixLength() { return length() - 4; }\n\n    int height();\n    int width();\n    int byteHeight();\n    int wordHeight();\n    int bpp();\n\n    bool hasPadding() { return (height() & 0x1f) != 0; }\n\n    uint8_t *pix() { return data() + 4; }\n    uint8_t *pix(int x, int y);\n    uint8_t fillMask(color c);\n    bool inRange(int x, int y);\n    void clamp(int *x, int *y);\n    void makeWritable();\n\n    static void destroy(RefImage *t);\n    static void scan(RefImage *t);\n    static unsigned gcsize(RefImage *t);\n    static void print(RefImage *t);\n};\n\nRefImage *mkImage(int w, int h, int bpp);\n\ntypedef BoxedBuffer *Buffer;\ntypedef BoxedString *String;\ntypedef RefImage *Image_;\n\n// keep in sync with github/pxt/pxtsim/libgeneric.ts\nenum class NumberFormat {\n    Int8LE = 1,\n    UInt8LE,\n    Int16LE,\n    UInt16LE,\n    Int32LE,\n    Int8BE,\n    UInt8BE,\n    Int16BE,\n    UInt16BE,\n    Int32BE,\n\n    UInt32LE,\n    UInt32BE,\n    Float32LE,\n    Float64LE,\n    Float32BE,\n    Float64BE,\n};\n\n// data can be NULL in both cases\nString mkString(const char *data, int len = -1);\nBuffer mkBuffer(const uint8_t *data, int len);\n\nTNumber getNumberCore(uint8_t *buf, int size, NumberFormat format);\nvoid setNumberCore(uint8_t *buf, int size, NumberFormat format, TNumber value);\n\nvoid seedRandom(unsigned seed);\n// max is inclusive\nunsigned getRandom(unsigned max);\n\nValType valType(TValue v);\n\n#ifdef PXT_GC\nvoid registerGC(TValue *root, int numwords = 1);\nvoid unregisterGC(TValue *root, int numwords = 1);\nvoid registerGCPtr(TValue ptr);\nvoid unregisterGCPtr(TValue ptr);\nvoid gc(int flags);\n#else\ninline void registerGC(TValue *root, int numwords = 1) {}\ninline void unregisterGC(TValue *root, int numwords = 1) {}\ninline void registerGCPtr(TValue ptr) {}\ninline void unregisterGCPtr(TValue ptr) {}\ninline void gc(int) {}\n#endif\n\nstruct StackSegment {\n    void *top;\n    void *bottom;\n    StackSegment *next;\n};\n\nstruct ThreadContext {\n    TValue *globals;\n    StackSegment stack;\n#ifdef PXT_GC_THREAD_LIST\n    ThreadContext *next;\n    ThreadContext *prev;\n#endif\n};\n\n#ifdef PXT_GC_THREAD_LIST\nextern ThreadContext *threadContexts;\nvoid *threadAddressFor(ThreadContext *, void *sp);\n#endif\n\nvoid releaseThreadContext(ThreadContext *ctx);\nThreadContext *getThreadContext();\nvoid setThreadContext(ThreadContext *ctx);\n\n#ifndef PXT_GC_THREAD_LIST\nvoid gcProcessStacks(int flags);\n#endif\n\nvoid gcProcess(TValue v);\nvoid gcFreeze();\n\nvoid *gcAllocate(int numbytes);\nvoid *gcAllocateArray(int numbytes);\nextern \"C\" void *app_alloc(int numbytes);\nextern \"C\" void *app_free(void *ptr);\n#ifndef PXT_GC\ninline void *gcAllocate(int numbytes) {\n    return xmalloc(numbytes);\n}\n#endif\n\nenum class PerfCounters {\n    GC,\n};\n\n#ifdef PXT_PROFILE\n#ifndef PERF_NOW\n#error \"missing platform timer support\"\n#endif\n\nstruct PerfCounter {\n    uint32_t value;\n    uint32_t numstops;\n    uint32_t start;\n};\n\nextern struct PerfCounter *perfCounters;\n\nvoid initPerfCounters();\n//%\nvoid dumpPerfCounters();\n//%\nvoid startPerfCounter(PerfCounters n);\n//%\nvoid stopPerfCounter(PerfCounters n);\n#else\ninline void startPerfCounter(PerfCounters n) {}\ninline void stopPerfCounter(PerfCounters n) {}\ninline void initPerfCounters() {}\ninline void dumpPerfCounters() {}\n#endif\n\n} // namespace pxt\n\n#define PXT_DEF_STRING(name, val)                                                                  \\\n    static const char name[] __attribute__((aligned(4))) = \"@PXT@:\" val;\n\nusing namespace pxt;\n\nnamespace numops {\n//%\nString toString(TValue v);\n//%\nint toBool(TValue v);\n//%\nint toBoolDecr(TValue v);\n} // namespace numops\n\nnamespace pins {\nBuffer createBuffer(int size);\n}\n\nnamespace String_ {\n//%\nint compare(String a, String b);\n} // namespace String_\n\nnamespace Array_ {\n//%\nRefCollection *mk();\n//%\nint length(RefCollection *c);\n//%\nvoid setLength(RefCollection *c, int newLength);\n//%\nvoid push(RefCollection *c, TValue x);\n//%\nTValue pop(RefCollection *c);\n//%\nTValue getAt(RefCollection *c, int x);\n//%\nvoid setAt(RefCollection *c, int x, TValue y);\n//%\nTValue removeAt(RefCollection *c, int x);\n//%\nvoid insertAt(RefCollection *c, int x, TValue value);\n//%\nint indexOf(RefCollection *c, TValue x, int start);\n//%\nbool removeElement(RefCollection *c, TValue x);\n} // namespace Array_\n\n#define NEW_GC(T, ...) new (gcAllocate(sizeof(T))) T(__VA_ARGS__)\n\n// The ARM Thumb generator in the JavaScript code is parsing\n// the hex file and looks for the magic numbers as present here.\n//\n// Then it fetches function pointer addresses from there.\n//\n// The vtable pointers are there, so that the ::emptyData for various types\n// can be patched with the right vtable.\n//\n#define PXT_SHIMS_BEGIN                                                                            \\\n    namespace pxt {                                                                                \\\n    const unsigned functionsAndBytecode[]                                                          \\\n        __attribute__((aligned(0x20))) = {0x08010801, 0x42424242, 0x08010801, 0x8de9d83e,\n\n#define PXT_SHIMS_END                                                                              \\\n    }                                                                                              \\\n    ;                                                                                              \\\n    }\n\n#ifndef X86_64\n#pragma GCC diagnostic ignored \"-Wpmf-conversions\"\n#endif\n\n#define DEF_VTABLE(name, tp, valtype, ...)                                                         \\\n    const VTable name __attribute__((aligned(1 << PXT_VTABLE_SHIFT))) = {                          \\\n        sizeof(tp), valtype, VTABLE_MAGIC, 0, BuiltInType::tp, 0, 0, {__VA_ARGS__}};\n\n#ifdef PXT_GC\n#define PXT_VTABLE(classname)                                                                      \\\n    DEF_VTABLE(classname##_vtable, classname, ValType::Object, (void *)&classname::destroy,        \\\n               (void *)&classname::print, (void *)&classname::scan, (void *)&classname::gcsize)\n#else\n#define PXT_VTABLE(classname)                                                                      \\\n    DEF_VTABLE(classname##_vtable, classname, ValType::Object, (void *)&classname::destroy,        \\\n               (void *)&classname::print)\n#endif\n\n#define PXT_VTABLE_INIT(classname) RefObject(&classname##_vtable)\n\n#define PXT_VTABLE_CTOR(classname)                                                                 \\\n    PXT_VTABLE(classname)                                                                          \\\n    classname::classname() : PXT_VTABLE_INIT(classname)\n\n#define PXT_MAIN                                                                                   \\\n    int main() {                                                                                   \\\n        pxt::start();                                                                              \\\n        return 0;                                                                                  \\\n    }\n\n#define PXT_FNPTR(x) (unsigned)(void *)(x)\n\n#define PXT_ABI(...)\n\n#define JOIN(a, b) a##b\n/// Defines getClassName() function to fetch the singleton\n#define SINGLETON(ClassName)                                                                       \\\n    static ClassName *JOIN(inst, ClassName);                                                       \\\n    ClassName *JOIN(get, ClassName)() {                                                            \\\n        if (!JOIN(inst, ClassName))                                                                \\\n            JOIN(inst, ClassName) = new ClassName();                                               \\\n        return JOIN(inst, ClassName);                                                              \\\n    }\n\n/// Defines getClassName() function to fetch the singleton\n#define SINGLETON_IF_PIN(ClassName, pin)                                                           \\\n    static ClassName *JOIN(inst, ClassName);                                                       \\\n    ClassName *JOIN(get, ClassName)() {                                                            \\\n        if (!JOIN(inst, ClassName) && LOOKUP_PIN(pin))                                             \\\n            JOIN(inst, ClassName) = new ClassName();                                               \\\n        return JOIN(inst, ClassName);                                                              \\\n    }\n\n#endif\n",
      "shims.d.ts": "// Auto-generated. Do not edit.\n\n\n\n    //% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\ndeclare interface Buffer {\n    /**\n     * Write a number in specified format in the buffer.\n     */\n    //% shim=BufferMethods::setNumber\n    setNumber(format: NumberFormat, offset: int32, value: number): void;\n\n    /**\n     * Read a number in specified format from the buffer.\n     */\n    //% shim=BufferMethods::getNumber\n    getNumber(format: NumberFormat, offset: int32): number;\n\n    /** Returns the length of a Buffer object. */\n    //% property shim=BufferMethods::length\n    length: int32;\n\n    /**\n     * Fill (a fragment) of the buffer with given value.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::fill\n    fill(value: int32, offset?: int32, length?: int32): void;\n\n    /**\n     * Return a copy of a fragment of a buffer.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::slice\n    slice(offset?: int32, length?: int32): Buffer;\n\n    /**\n     * Shift buffer left in place, with zero padding.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::shift\n    shift(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Convert a buffer to its hexadecimal representation.\n     */\n    //% shim=BufferMethods::toHex\n    toHex(): string;\n\n    /**\n     * Rotate buffer left in place.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::rotate\n    rotate(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Write contents of `src` at `dstOffset` in current buffer.\n     */\n    //% shim=BufferMethods::write\n    write(dstOffset: int32, src: Buffer): void;\n}\ndeclare namespace control {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=control::createBuffer\n    function createBuffer(size: int32): Buffer;\n}\ndeclare namespace loops {\n\n    /**\n     * Repeats the code forever in the background. On each iteration, allows other codes to run.\n     * @param body code to execute\n     */\n    //% help=loops/forever weight=100 afterOnStart=true deprecated=true\n    //% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1 shim=loops::forever\n    function forever(a: () => void): void;\n\n    /**\n     * Pause for the specified time in milliseconds\n     * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n     */\n    //% help=loops/pause weight=99 deprecated=true\n    //% async block=\"pause %pause=timePicker|ms\"\n    //% blockId=device_pause_deprecated shim=loops::pause\n    function pause(ms: int32): void;\n}\ndeclare namespace control {\n\n    /**\n     * Gets the number of milliseconds elapsed since power on.\n     */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\" shim=control::millis\n    function millis(): int32;\n\n    /**\n     * Used internally\n     */\n    //% flags.defl=16 shim=control::internalOnEvent\n    function internalOnEvent(src: int32, value: int32, handler: () => void, flags?: int32): void;\n\n    /**\n     * Reset the device.\n     */\n    //% weight=30 async help=control/reset blockGap=8\n    //% blockId=\"control_reset\" block=\"reset\" shim=control::reset\n    function reset(): void;\n\n    /**\n     * Block the current fiber for the given microseconds\n     * @param micros number of micro-seconds to wait. eg: 4\n     */\n    //% help=control/wait-micros weight=29 async\n    //% blockId=\"control_wait_us\" block=\"wait (µs)%micros\" shim=control::waitMicros\n    function waitMicros(micros: int32): void;\n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8 shim=control::runInParallel\n    function runInParallel(a: () => void): void;\n\n    /**\n     * Blocks the calling thread until the specified event is raised.\n     */\n    //% help=control/wait-for-event async\n    //% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\" shim=control::waitForEvent\n    function waitForEvent(src: int32, value: int32): void;\n\n    /**\n     * Derive a unique, consistent serial number of this device from internal data.\n     */\n    //% blockId=\"control_device_serial_number\" block=\"device serial number\" weight=9\n    //% help=control/device-serial-number shim=control::deviceSerialNumber\n    function deviceSerialNumber(): int32;\n\n    /**\n     *\n     */\n    //% shim=control::__log\n    function __log(prority: int32, text: string): void;\n\n    /**\n     * Dump internal information about a value.\n     */\n    //% shim=control::dmesgValue\n    function dmesgValue(v: any): void;\n\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //% shim=control::gc\n    function gc(): void;\n\n    /**\n     * Force GC and halt waiting for debugger to do a full heap dump.\n     */\n    //% shim=control::heapDump\n    function heapDump(): void;\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //% shim=control::profilingEnabled\n    function profilingEnabled(): boolean;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "test.ts": "let i = 1\nlet f = 0.5\nlet plus = i + f\nlet minus = i - f\n\nlet r = Math.random()\nlet ri = Math.randomRange(5, 10)\n\nforever(() => {\n    pause(100)\n})\n"
    },
    "core": {
      "README.md": "# core\n\nThe core library for Codal-based targets.\n\n",
      "codal.cpp": "#include \"pxt.h\"\n\nvoid cpu_clock_init(void);\n\nPXT_ABI(__aeabi_dadd)\nPXT_ABI(__aeabi_dcmplt)\nPXT_ABI(__aeabi_dcmpgt)\nPXT_ABI(__aeabi_dsub)\nPXT_ABI(__aeabi_ddiv)\nPXT_ABI(__aeabi_dmul)\n\n#define PXT_COMM_BASE 0x20001000 // 4k in\n\nnamespace pxt {\n\nvoid platform_init();\nvoid usb_init();\n\n// The first two word are used to tell the bootloader that a single reset should start the\n// bootloader and the MSD device, not us.\n// The rest is reserved for partial flashing checksums.\n__attribute__((section(\".binmeta\"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {\n    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n};\n\nCODAL_TIMER devTimer;\nEvent lastEvent;\nMessageBus devMessageBus;\ncodal::CodalDevice device;\n\nstruct FreeList {\n    FreeList *next;\n};\n\nstatic void commInit() {\n    int commSize = bytecode[20];\n    if (!commSize)\n        return;\n\n    FreeList *head = NULL;\n    void *commBase = (void *)PXT_COMM_BASE;\n    for (;;) {\n        void *p = xmalloc(4);\n        // assume 4 byte alloc header; if we're not hitting 8 byte alignment, try allocating 8\n        // bytes, not 4 without the volatile, gcc assumes 8 byte alignment on malloc()\n        volatile unsigned hp = (unsigned)p;\n        if (hp & 4) {\n            xfree(p);\n            p = xmalloc(8);\n        }\n        if (p == commBase) {\n            xfree(p);\n            // allocate the comm section; this is never freed\n            p = xmalloc(commSize);\n            if (p != commBase)\n                oops(10);\n            break;\n        }\n        if (p > commBase)\n            oops(11);\n        auto f = (FreeList *)p;\n        f->next = head;\n        head = f;\n    }\n    // free all the filler stuff\n    while (head) {\n        auto p = head;\n        head = head->next;\n        xfree(p);\n    }\n}\n\nstatic void initCodal() {\n    cpu_clock_init();\n\n    commInit();\n\n    // Bring up fiber scheduler.\n    scheduler_init(devMessageBus);\n\n    // We probably don't need that - components are initialized when one obtains\n    // the reference to it.\n    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,\n    // &CircuitPlayground::onListenerRegisteredEvent);\n\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {\n        if (CodalComponent::components[i])\n            CodalComponent::components[i]->init();\n    }\n\n    usb_init();\n\n    auto led = LOOKUP_PIN(LED);\n    if (led) {\n        led->setDigitalValue(0);\n    }\n}\n\n// ---------------------------------------------------------------------------\n// An adapter for the API expected by the run-time.\n// ---------------------------------------------------------------------------\n\n// We have the invariant that if [dispatchEvent] is registered against the DAL\n// for a given event, then [handlersMap] contains a valid entry for that\n// event.\nvoid dispatchEvent(Event e) {\n    lastEvent = e;\n\n    auto curr = findBinding(e.source, e.value);\n    auto value = fromInt(e.value);\n    if (curr)\n        runAction1(curr->action, value);\n\n    curr = findBinding(e.source, DEVICE_EVT_ANY);\n    if (curr)\n        runAction1(curr->action, value);\n}\n\nvoid registerWithDal(int id, int event, Action a, int flags) {\n    // first time?\n    if (!findBinding(id, event))\n        devMessageBus.listen(id, event, dispatchEvent, flags);\n    setBinding(id, event, a);\n}\n\nvoid fiberDone(void *a) {\n    decr((Action)a);\n    unregisterGCPtr((Action)a);\n    release_fiber();\n}\n\nvoid releaseFiber() {\n    release_fiber();\n}\n\nvoid sleep_ms(unsigned ms) {\n    fiber_sleep(ms);\n}\n\nvoid sleep_us(uint64_t us) {\n    target_wait_us(us);\n}\n\nvoid forever_stub(void *a) {\n    while (true) {\n        runAction0((Action)a);\n        fiber_sleep(20);\n    }\n}\n\nvoid runForever(Action a) {\n    if (a != 0) {\n        incr(a);\n        registerGCPtr(a);\n        create_fiber(forever_stub, (void *)a);\n    }\n}\n\nvoid runInParallel(Action a) {\n    if (a != 0) {\n        incr(a);\n        registerGCPtr(a);\n        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);\n    }\n}\n\nvoid waitForEvent(int id, int event) {\n    fiber_wait_for_event(id, event);\n}\n\nvoid initRuntime() {\n    initCodal();\n    platform_init();\n}\n\n//%\nunsigned afterProgramPage() {\n    unsigned ptr = (unsigned)&bytecode[0];\n    ptr += programSize();\n    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);\n    return ptr;\n}\n\nint getSerialNumber() {\n    return device.getSerialNumber();\n}\n\nint current_time_ms() {\n    return system_timer_current_time();\n}\n\n#ifdef PXT_GC\nThreadContext *getThreadContext() {\n    return (ThreadContext *)currentFiber->user_data;\n}\n\nvoid setThreadContext(ThreadContext *ctx) {\n    currentFiber->user_data = ctx;\n}\n\nstatic void *threadAddressFor(codal::Fiber *fib, void *sp) {\n    if (fib == currentFiber)\n        return sp;\n    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));\n}\n\nvoid gcProcessStacks(int flags) {\n    int numFibers = codal::list_fibers(NULL);\n    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);\n    int num2 = codal::list_fibers(fibers);\n    if (numFibers != num2)\n        oops(12);\n    int cnt = 0;\n\n    for (int i = 0; i < numFibers; ++i) {\n        auto fib = fibers[i];\n        auto ctx = (ThreadContext *)fib->user_data;\n        if (!ctx)\n            continue;\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(fib, seg->top);\n            auto end = (TValue *)threadAddressFor(fib, seg->bottom);\n            if (flags & 2)\n                DMESG(\"RS%d:%p/%d\", cnt++, ptr, end - ptr);\n            // VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n    xfree(fibers);\n}\n#endif\n\n} // namespace pxt\n",
      "control.cpp": "#include \"pxt.h\"\n\nnamespace control {\n\n/**\n * Announce that an event happened to registered handlers.\n * @param src ID of the MicroBit Component that generated the event\n * @param value Component specific code indicating the cause of the event.\n */\n//% weight=21 blockGap=12 blockId=\"control_raise_event\"\n//% help=control/raise-event\n//% block=\"raise event|from %src|with value %value\" blockExternalInputs=1\nvoid raiseEvent(int src, int value) {\n    Event evt(src, value);\n}\n\n/**\n* Determine the version of system software currently running.\n*/\n//% blockId=\"control_device_dal_version\" block=\"device dal version\"\n//% help=control/device-dal-version\nString deviceDalVersion() {\n    return mkString(device.getVersion());\n}\n\n/**\n* Allocates the next user notification event\n*/\n//% help=control/allocate-notify-event\nint allocateNotifyEvent() {\n    return ::allocateNotifyEvent();\n}\n\n/** Write a message to DMESG debugging buffer. */\n//%\nvoid dmesg(String s) {\n    DMESG(\"# %s\", s->data);\n}\n\n/** Write a message and value (pointer) to DMESG debugging buffer. */\n//%\nvoid dmesgPtr(String str, Object_ ptr) {\n    DMESG(\"# %s: %p\", str->data, ptr);\n}\n\n\n}\n",
      "dal.d.ts": "// Auto-generated. Do not edit.\ndeclare const enum DAL {\n    // /libraries/codal-core/inc/JACDAC/JACDAC.h\n    JD_VERSION = 5,\n    JD_SERIAL_MAX_BUFFERS = 10,\n    JD_SERIAL_RECEIVING = 2,\n    JD_SERIAL_TRANSMITTING = 4,\n    JD_SERIAL_TX_DRAIN_ENABLE = 8,\n    JD_SERIAL_BUS_RISE = 16,\n    JD_SERIAL_EVT_DATA_READY = 1,\n    JD_SERIAL_EVT_BUS_ERROR = 2,\n    JD_SERIAL_EVT_DRAIN = 3,\n    JD_SERIAL_EVT_RX_TIMEOUT = 4,\n    JD_SERIAL_EVT_BUS_CONNECTED = 5,\n    JD_SERIAL_EVT_BUS_DISCONNECTED = 6,\n    JD_SERIAL_HEADER_SIZE = 4,\n    JD_SERIAL_DATA_SIZE = 32,\n    JD_SERIAL_PACKET_SIZE = 36,\n    JD_SERIAL_MAXIMUM_BUFFERS = 10,\n    JD_SERIAL_DMA_TIMEOUT = 2,\n    JD_SERIAL_MAX_BAUD = 1000000,\n    JD_SERIAL_TX_MAX_BACKOFF = 4000,\n    JD_SERIAL_TX_MIN_BACKOFF = 1000,\n    Receiving = 0,\n    Transmitting = 1,\n    High = 2,\n    Low = 3,\n    Baud1M = 1,\n    Baud500K = 2,\n    Baud250K = 4,\n    Baud125K = 8,\n    // /libraries/codal-core/inc/JACDAC/JDAccelerometerDriver.h\n    JD_ACCEL_EVT_SEND_DATA = 1,\n    // /libraries/codal-core/inc/JACDAC/JDBridgeDriver.h\n    JD_BRIDGE_HISTORY_SIZE = 8,\n    // /libraries/codal-core/inc/JACDAC/JDClasses.h\n    STATIC_CLASS_START = 0,\n    STATIC_CLASS_END = 16777215,\n    DYNAMIC_CLASS_END = 4294967295,\n    JD_DRIVER_CLASS_CODAL_START = 0,\n    JD_DRIVER_CLASS_CODAL_END = 2000,\n    JD_DRIVER_CLASS_MAKECODE_START = 2000,\n    JD_DRIVER_CLASS_MAKECODE_END = 4000,\n    JD_DRIVER_CLASS_CONTROL = 0,\n    JD_DRIVER_CLASS_JOYSTICK = 1,\n    JD_DRIVER_CLASS_MESSAGE_BUS = 2,\n    JD_DRIVER_CLASS_BRIDGE = 3,\n    JD_DRIVER_CLASS_BUTTON = 4,\n    JD_DRIVER_CLASS_PIN = 5,\n    JD_DRIVER_CLASS_RELIABILITY_TESTER = 6,\n    JD_DRIVER_CLASS_ACCELEROMETER = 7,\n    JD_DRIVER_CLASS_CAPTOUCH_BUTTON = 8,\n    // /libraries/codal-core/inc/JACDAC/JDMessageBusDriver.h\n    JD_MESSAGEBUS_TYPE_EVENT = 1,\n    JD_MESSAGEBUS_TYPE_LISTEN = 2,\n    // /libraries/codal-core/inc/JACDAC/JDPinDriver.h\n    SetDigital = 0,\n    SetAnalog = 1,\n    SetServo = 2,\n    // /libraries/codal-core/inc/JACDAC/JDProtocol.h\n    JD_DRIVER_EVT_CONNECTED = 65520,\n    JD_DRIVER_EVT_DISCONNECTED = 65521,\n    JD_DRIVER_EVT_PAIRED = 65522,\n    JD_DRIVER_EVT_UNPAIRED = 65523,\n    JD_DRIVER_EVT_PAIR_REJECTED = 65524,\n    JD_DRIVER_EVT_PAIRING_RESPONSE = 65525,\n    JD_DRIVER_EVT_ERROR = 65526,\n    JD_DEVICE_FLAGS_LOCAL = 32768,\n    JD_DEVICE_FLAGS_REMOTE = 16384,\n    JD_DEVICE_FLAGS_BROADCAST = 8192,\n    JD_DEVICE_FLAGS_PAIR = 4096,\n    JD_DEVICE_DRIVER_MODE_MSK = 61440,\n    JD_DEVICE_FLAGS_PAIRABLE = 2048,\n    JD_DEVICE_FLAGS_PAIRED = 1024,\n    JD_DEVICE_FLAGS_PAIRING = 512,\n    JD_DEVICE_FLAGS_INITIALISED = 128,\n    JD_DEVICE_FLAGS_INITIALISING = 64,\n    JD_DEVICE_FLAGS_CP_SEEN = 32,\n    JD_DEVICE_ERROR_MSK = 15,\n    JD_LOGIC_DRIVER_MAX_FILTERS = 20,\n    JD_LOGIC_DRIVER_TIMEOUT = 254,\n    JD_LOGIC_ADDRESS_ALLOC_TIME = 254,\n    JD_LOGIC_DRIVER_CTRLPACKET_TIME = 112,\n    JD_LOGIC_DRIVER_EVT_CHANGED = 2,\n    CONTROL_JD_FLAGS_RESERVED = 32768,\n    CONTROL_JD_FLAGS_PAIRING_MODE = 16384,\n    CONTROL_JD_FLAGS_PAIRABLE = 8192,\n    CONTROL_JD_FLAGS_PAIRED = 4096,\n    CONTROL_JD_FLAGS_CONFLICT = 2048,\n    CONTROL_JD_FLAGS_UNCERTAIN = 1024,\n    CONTROL_JD_FLAGS_NACK = 512,\n    CONTROL_JD_FLAGS_ACK = 256,\n    CONTROL_JD_TYPE_HELLO = 1,\n    CONTROL_JD_TYPE_PAIRING_REQUEST = 2,\n    CONTROL_JD_TYPE_ERROR = 3,\n    CONTROL_JD_TYPE_PANIC = 255,\n    JD_PROTOCOL_EVT_SEND_CONTROL = 1,\n    JD_PROTOCOL_DRIVER_ARRAY_SIZE = 20,\n    CONTROL_PACKET_ERROR_NAME_LENGTH = 6,\n    VirtualDriver = 16384,\n    PairedDriver = 12288,\n    HostDriver = 32768,\n    PairableHostDriver = 34816,\n    BroadcastDriver = 40960,\n    SnifferDriver = 24576,\n    DRIVER_OK = 0,\n    DRIVER_CALIBRATION_IN_PROGRESS = 1,\n    DRIVER_CALIBRATION_REQUIRED = 2,\n    DRIVER_NO_RESOURCES = 3,\n    DRIVER_BUSY = 4,\n    DRIVER_COMMS_ERROR = 5,\n    DRIVER_INVALID_STATE = 6,\n    DRIVER_PERIPHERAL_MALFUNCTION = 7,\n    // /libraries/codal-core/inc/JACDAC/JDReliabilityTester.h\n    RELIABILITY_TEST_FINISHED = 7,\n    RELIABILITY_STATUS_TEST_IN_PROGRESS = 2,\n    RELIABILITY_STATUS_TEST_READY = 4,\n    RELIABILITY_STATUS_TEST_FINISHED = 8,\n    // /libraries/codal-core/inc/core/CodalComponent.h\n    DEVICE_ID_BUTTON_A = 1,\n    DEVICE_ID_BUTTON_B = 2,\n    DEVICE_ID_BUTTON_AB = 3,\n    DEVICE_ID_BUTTON_RESET = 4,\n    DEVICE_ID_ACCELEROMETER = 5,\n    DEVICE_ID_COMPASS = 6,\n    DEVICE_ID_DISPLAY = 7,\n    DEVICE_ID_THERMOMETER = 8,\n    DEVICE_ID_RADIO = 9,\n    DEVICE_ID_RADIO_DATA_READY = 10,\n    DEVICE_ID_MULTIBUTTON_ATTACH = 11,\n    DEVICE_ID_SERIAL = 12,\n    DEVICE_ID_GESTURE = 13,\n    DEVICE_ID_SYSTEM_TIMER = 14,\n    DEVICE_ID_SCHEDULER = 15,\n    DEVICE_ID_COMPONENT = 16,\n    DEVICE_ID_LIGHT_SENSOR = 17,\n    DEVICE_ID_TOUCH_SENSOR = 18,\n    DEVICE_ID_SYSTEM_DAC = 19,\n    DEVICE_ID_SYSTEM_MICROPHONE = 20,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR = 21,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL = 22,\n    DEVICE_ID_MSC = 23,\n    DEVICE_ID_SPI = 24,\n    DEVICE_ID_DISTANCE = 25,\n    DEVICE_ID_GYROSCOPE = 26,\n    DEVICE_ID_HUMIDITY = 27,\n    DEVICE_ID_PRESSURE = 28,\n    DEVICE_ID_JACDAC0 = 29,\n    DEVICE_ID_JACDAC1 = 30,\n    DEVICE_ID_JACDAC_PROTOCOL = 31,\n    DEVICE_ID_JACKROUTER = 32,\n    DEVICE_ID_GAME_ENGINE = 33,\n    DEVICE_ID_GAME_STATE_MANAGER = 34,\n    DEVICE_ID_SPRITE = 35,\n    DEVICE_ID_SINGLE_WIRE_SERIAL = 36,\n    DEVICE_ID_IO_P0 = 100,\n    DEVICE_ID_MESSAGE_BUS_LISTENER = 1021,\n    DEVICE_ID_NOTIFY_ONE = 1022,\n    DEVICE_ID_NOTIFY = 1023,\n    DEVICE_ID_BUTTON_UP = 2000,\n    DEVICE_ID_BUTTON_DOWN = 2001,\n    DEVICE_ID_BUTTON_LEFT = 2002,\n    DEVICE_ID_BUTTON_RIGHT = 2003,\n    DEVICE_ID_JD_DYNAMIC_ID = 3000,\n    DEVICE_COMPONENT_RUNNING = 4096,\n    DEVICE_COMPONENT_STATUS_SYSTEM_TICK = 8192,\n    DEVICE_COMPONENT_STATUS_IDLE_TICK = 16384,\n    DEVICE_COMPONENT_LISTENERS_CONFIGURED = 1,\n    DEVICE_COMPONENT_EVT_SYSTEM_TICK = 1,\n    // /libraries/codal-core/inc/core/CodalFiber.h\n    DEVICE_SCHEDULER_RUNNING = 1,\n    DEVICE_SCHEDULER_IDLE = 2,\n    DEVICE_FIBER_FLAG_FOB = 1,\n    DEVICE_FIBER_FLAG_PARENT = 2,\n    DEVICE_FIBER_FLAG_CHILD = 4,\n    DEVICE_FIBER_FLAG_DO_NOT_PAGE = 8,\n    DEVICE_SCHEDULER_EVT_TICK = 1,\n    DEVICE_SCHEDULER_EVT_IDLE = 2,\n    // /libraries/codal-core/inc/core/CodalListener.h\n    MESSAGE_BUS_LISTENER_PARAMETERISED = 1,\n    MESSAGE_BUS_LISTENER_METHOD = 2,\n    MESSAGE_BUS_LISTENER_BUSY = 4,\n    MESSAGE_BUS_LISTENER_REENTRANT = 8,\n    MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY = 16,\n    MESSAGE_BUS_LISTENER_DROP_IF_BUSY = 32,\n    MESSAGE_BUS_LISTENER_NONBLOCKING = 64,\n    MESSAGE_BUS_LISTENER_URGENT = 128,\n    MESSAGE_BUS_LISTENER_DELETING = 32768,\n    MESSAGE_BUS_LISTENER_IMMEDIATE = 192,\n    // /libraries/codal-core/inc/core/ErrorNo.h\n    DEVICE_OK = 0,\n    DEVICE_INVALID_PARAMETER = -1001,\n    DEVICE_NOT_SUPPORTED = -1002,\n    DEVICE_CALIBRATION_IN_PROGRESS = -1003,\n    DEVICE_CALIBRATION_REQUIRED = -1004,\n    DEVICE_NO_RESOURCES = -1005,\n    DEVICE_BUSY = -1006,\n    DEVICE_CANCELLED = -1007,\n    DEVICE_I2C_ERROR = -1010,\n    DEVICE_SERIAL_IN_USE = -1011,\n    DEVICE_NO_DATA = -1012,\n    DEVICE_NOT_IMPLEMENTED = -1013,\n    DEVICE_SPI_ERROR = -1014,\n    DEVICE_INVALID_STATE = -1015,\n    DEVICE_OOM = 20,\n    DEVICE_HEAP_ERROR = 30,\n    DEVICE_NULL_DEREFERENCE = 40,\n    DEVICE_USB_ERROR = 50,\n    DEVICE_HARDWARE_CONFIGURATION_ERROR = 90,\n    // /libraries/codal-core/inc/core/NotifyEvents.h\n    DISPLAY_EVT_FREE = 1,\n    CODAL_SERIAL_EVT_TX_EMPTY = 2,\n    BLE_EVT_SERIAL_TX_EMPTY = 3,\n    ARCADE_PLAYER_JOIN_RESULT = 4,\n    DEVICE_NOTIFY_USER_EVENT_BASE = 1024,\n    // /libraries/codal-core/inc/driver-models/AbstractButton.h\n    DEVICE_BUTTON_EVT_DOWN = 1,\n    DEVICE_BUTTON_EVT_UP = 2,\n    DEVICE_BUTTON_EVT_CLICK = 3,\n    DEVICE_BUTTON_EVT_LONG_CLICK = 4,\n    DEVICE_BUTTON_EVT_HOLD = 5,\n    DEVICE_BUTTON_EVT_DOUBLE_CLICK = 6,\n    DEVICE_BUTTON_LONG_CLICK_TIME = 1000,\n    DEVICE_BUTTON_HOLD_TIME = 1500,\n    DEVICE_BUTTON_STATE = 1,\n    DEVICE_BUTTON_STATE_HOLD_TRIGGERED = 2,\n    DEVICE_BUTTON_STATE_CLICK = 4,\n    DEVICE_BUTTON_STATE_LONG_CLICK = 8,\n    DEVICE_BUTTON_SIGMA_MIN = 0,\n    DEVICE_BUTTON_SIGMA_MAX = 12,\n    DEVICE_BUTTON_SIGMA_THRESH_HI = 8,\n    DEVICE_BUTTON_SIGMA_THRESH_LO = 2,\n    DEVICE_BUTTON_DOUBLE_CLICK_THRESH = 50,\n    DEVICE_BUTTON_SIMPLE_EVENTS = 0,\n    DEVICE_BUTTON_ALL_EVENTS = 1,\n    ACTIVE_LOW = 0,\n    ACTIVE_HIGH = 1,\n    // /libraries/codal-core/inc/driver-models/Accelerometer.h\n    ACCELEROMETER_IMU_DATA_VALID = 2,\n    ACCELEROMETER_EVT_DATA_UPDATE = 1,\n    ACCELEROMETER_EVT_NONE = 0,\n    ACCELEROMETER_EVT_TILT_UP = 1,\n    ACCELEROMETER_EVT_TILT_DOWN = 2,\n    ACCELEROMETER_EVT_TILT_LEFT = 3,\n    ACCELEROMETER_EVT_TILT_RIGHT = 4,\n    ACCELEROMETER_EVT_FACE_UP = 5,\n    ACCELEROMETER_EVT_FACE_DOWN = 6,\n    ACCELEROMETER_EVT_FREEFALL = 7,\n    ACCELEROMETER_EVT_3G = 8,\n    ACCELEROMETER_EVT_6G = 9,\n    ACCELEROMETER_EVT_8G = 10,\n    ACCELEROMETER_EVT_SHAKE = 11,\n    ACCELEROMETER_REST_TOLERANCE = 200,\n    ACCELEROMETER_TILT_TOLERANCE = 200,\n    ACCELEROMETER_FREEFALL_TOLERANCE = 400,\n    ACCELEROMETER_SHAKE_TOLERANCE = 400,\n    ACCELEROMETER_3G_TOLERANCE = 3072,\n    ACCELEROMETER_6G_TOLERANCE = 6144,\n    ACCELEROMETER_8G_TOLERANCE = 8192,\n    ACCELEROMETER_GESTURE_DAMPING = 5,\n    ACCELEROMETER_SHAKE_DAMPING = 10,\n    ACCELEROMETER_SHAKE_RTX = 30,\n    ACCELEROMETER_SHAKE_COUNT_THRESHOLD = 4,\n    // /libraries/codal-core/inc/driver-models/Compass.h\n    COMPASS_STATUS_RUNNING = 1,\n    COMPASS_STATUS_CALIBRATED = 2,\n    COMPASS_STATUS_CALIBRATING = 4,\n    COMPASS_STATUS_ADDED_TO_IDLE = 8,\n    COMPASS_EVT_DATA_UPDATE = 1,\n    COMPASS_EVT_CONFIG_NEEDED = 2,\n    COMPASS_EVT_CALIBRATE = 3,\n    COMPASS_EVT_CALIBRATION_NEEDED = 4,\n    // /libraries/codal-core/inc/driver-models/Gyroscope.h\n    GYROSCOPE_IMU_DATA_VALID = 2,\n    GYROSCOPE_EVT_DATA_UPDATE = 1,\n    // /libraries/codal-core/inc/driver-models/LowLevelTimer.h\n    TimerModeTimer = 0,\n    TimerModeCounter = 1,\n    BitMode8 = 0,\n    BitMode16 = 1,\n    BitMode24 = 2,\n    BitMode32 = 3,\n    // /libraries/codal-core/inc/driver-models/Pin.h\n    IO_STATUS_DIGITAL_IN = 1,\n    IO_STATUS_DIGITAL_OUT = 2,\n    IO_STATUS_ANALOG_IN = 4,\n    IO_STATUS_ANALOG_OUT = 8,\n    IO_STATUS_TOUCH_IN = 16,\n    IO_STATUS_EVENT_ON_EDGE = 32,\n    IO_STATUS_EVENT_PULSE_ON_EDGE = 64,\n    DEVICE_PIN_MAX_OUTPUT = 1023,\n    DEVICE_PIN_MAX_SERVO_RANGE = 180,\n    DEVICE_PIN_DEFAULT_SERVO_RANGE = 2000,\n    DEVICE_PIN_DEFAULT_SERVO_CENTER = 1500,\n    DEVICE_PIN_EVENT_NONE = 0,\n    DEVICE_PIN_EVENT_ON_EDGE = 1,\n    DEVICE_PIN_EVENT_ON_PULSE = 2,\n    DEVICE_PIN_EVENT_ON_TOUCH = 3,\n    DEVICE_PIN_EVT_RISE = 2,\n    DEVICE_PIN_EVT_FALL = 3,\n    DEVICE_PIN_EVT_PULSE_HI = 4,\n    DEVICE_PIN_EVT_PULSE_LO = 5,\n    PIN_CAPABILITY_DIGITAL = 1,\n    PIN_CAPABILITY_ANALOG = 2,\n    PIN_CAPABILITY_AD = 3,\n    PIN_CAPABILITY_ALL = 3,\n    None = 0,\n    Down = 1,\n    Up = 2,\n    // /libraries/codal-core/inc/driver-models/Radio.h\n    RADIO_EVT_DATA_READY = 2,\n    // /libraries/codal-core/inc/driver-models/SPIFlash.h\n    SPIFLASH_PAGE_SIZE = 256,\n    SPIFLASH_SMALL_ROW_PAGES = 16,\n    SPIFLASH_BIG_ROW_PAGES = 256,\n    // /libraries/codal-core/inc/driver-models/Sensor.h\n    SENSOR_THRESHOLD_LOW = 1,\n    SENSOR_THRESHOLD_HIGH = 2,\n    SENSOR_UPDATE_NEEDED = 3,\n    SENSOR_INITIALISED = 1,\n    SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    SENSOR_LOW_THRESHOLD_PASSED = 4,\n    SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    SENSOR_DEFAULT_SENSITIVITY = 868,\n    SENSOR_DEFAULT_SAMPLE_PERIOD = 500,\n    // /libraries/codal-core/inc/driver-models/Serial.h\n    CODAL_SERIAL_DEFAULT_BAUD_RATE = 115200,\n    CODAL_SERIAL_DEFAULT_BUFFER_SIZE = 20,\n    CODAL_SERIAL_EVT_DELIM_MATCH = 1,\n    CODAL_SERIAL_EVT_HEAD_MATCH = 2,\n    CODAL_SERIAL_EVT_RX_FULL = 3,\n    CODAL_SERIAL_RX_IN_USE = 1,\n    CODAL_SERIAL_TX_IN_USE = 2,\n    CODAL_SERIAL_RX_BUFF_INIT = 4,\n    CODAL_SERIAL_TX_BUFF_INIT = 8,\n    ASYNC = 0,\n    SYNC_SPINWAIT = 1,\n    SYNC_SLEEP = 2,\n    RxInterrupt = 0,\n    TxInterrupt = 1,\n    // /libraries/codal-core/inc/driver-models/SingleWireSerial.h\n    SWS_EVT_DATA_RECEIVED = 1,\n    SWS_EVT_DATA_SENT = 2,\n    SWS_EVT_ERROR = 3,\n    SWS_EVT_DATA_DROPPED = 4,\n    SingleWireRx = 0,\n    SingleWireTx = 1,\n    SingleWireDisconnected = 2,\n    // /libraries/codal-core/inc/driver-models/Timer.h\n    CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE = 10,\n    // /libraries/codal-core/inc/drivers/AnalogSensor.h\n    ANALOG_THRESHOLD_LOW = 1,\n    ANALOG_THRESHOLD_HIGH = 2,\n    ANALOG_SENSOR_UPDATE_NEEDED = 3,\n    ANALOG_SENSOR_INITIALISED = 1,\n    ANALOG_SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    ANALOG_SENSOR_LOW_THRESHOLD_PASSED = 4,\n    ANALOG_SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    ANALOG_SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    // /libraries/codal-core/inc/drivers/AnimatedDisplay.h\n    DISPLAY_EVT_ANIMATION_COMPLETE = 1,\n    DISPLAY_DEFAULT_AUTOCLEAR = 1,\n    DISPLAY_SPACING = 1,\n    DISPLAY_ANIMATE_DEFAULT_POS = -255,\n    DISPLAY_DEFAULT_SCROLL_SPEED = 120,\n    DISPLAY_DEFAULT_SCROLL_STRIDE = -1,\n    DISPLAY_DEFAULT_PRINT_SPEED = 400,\n    ANIMATION_MODE_NONE = 0,\n    ANIMATION_MODE_STOPPED = 1,\n    ANIMATION_MODE_SCROLL_TEXT = 2,\n    ANIMATION_MODE_PRINT_TEXT = 3,\n    ANIMATION_MODE_SCROLL_IMAGE = 4,\n    ANIMATION_MODE_ANIMATE_IMAGE = 5,\n    ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR = 6,\n    ANIMATION_MODE_PRINT_CHARACTER = 7,\n    // /libraries/codal-core/inc/drivers/FAT.h\n    FAT_RESERVED_SECTORS = 1,\n    FAT_ROOT_DIR_SECTORS = 4,\n    // /libraries/codal-core/inc/drivers/HID.h\n    HID_REQUEST_GET_REPORT = 1,\n    HID_REQUEST_GET_IDLE = 2,\n    HID_REQUEST_GET_PROTOCOL = 3,\n    HID_REQUEST_SET_REPORT = 9,\n    HID_REQUEST_SET_IDLE = 10,\n    HID_REQUEST_SET_PROTOCOL = 11,\n    // /libraries/codal-core/inc/drivers/HIDKeyboard.h\n    HID_KEYBOARD_NUM_REPORTS = 3,\n    HID_KEYBOARD_REPORT_GENERIC = 1,\n    HID_KEYBOARD_REPORT_CONSUMER = 2,\n    HID_KEYBOARD_KEYSTATE_SIZE_GENERIC = 8,\n    HID_KEYBOARD_KEYSTATE_SIZE_CONSUMER = 2,\n    HID_KEYBOARD_MODIFIER_OFFSET = 2,\n    HID_KEYBOARD_DELAY_DEFAULT = 10,\n    PressKey = 0,\n    ReleaseKey = 1,\n    // /libraries/codal-core/inc/drivers/JackRouter.h\n    AllDown = 1,\n    HeadPhones = 2,\n    Buzzer = 3,\n    BuzzerAndSerial = 4,\n    // /libraries/codal-core/inc/drivers/KeyMap.h\n    KEYMAP_ALL_KEYS_UP_Val = 1,\n    KEYMAP_ALL_KEYS_UP_POS = 28,\n    KEYMAP_NORMAL_KEY_Val = 0,\n    KEYMAP_MODIFIER_KEY_Val = 1,\n    KEYMAP_MODIFIER_POS = 29,\n    KEYMAP_MEDIA_KEY_Val = 1,\n    KEYMAP_MEDIA_POS = 30,\n    KEYMAP_KEY_UP_Val = 0,\n    KEYMAP_KEY_DOWN_Val = 1,\n    KEYMAP_KEY_DOWN_POS = 31,\n    // /libraries/codal-core/inc/drivers/LEDMatrix.h\n    LED_MATRIX_GREYSCALE_BIT_DEPTH = 8,\n    LED_MATRIX_EVT_LIGHT_SENSE = 2,\n    LED_MATRIX_EVT_FRAME_TIMEOUT = 3,\n    LED_MATRIX_MINIMUM_BRIGHTNESS = 1,\n    LED_MATRIX_MAXIMUM_BRIGHTNESS = 255,\n    LED_MATRIX_DEFAULT_BRIGHTNESS = 255,\n    DISPLAY_MODE_BLACK_AND_WHITE = 0,\n    DISPLAY_MODE_GREYSCALE = 1,\n    DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE = 2,\n    MATRIX_DISPLAY_ROTATION_0 = 0,\n    MATRIX_DISPLAY_ROTATION_90 = 1,\n    MATRIX_DISPLAY_ROTATION_180 = 2,\n    MATRIX_DISPLAY_ROTATION_270 = 3,\n    NO_CONN = 0,\n    // /libraries/codal-core/inc/drivers/MAG3110.h\n    MAG3110_DEFAULT_ADDR = 29,\n    MAG_DR_STATUS = 0,\n    MAG_OUT_X_MSB = 1,\n    MAG_OUT_X_LSB = 2,\n    MAG_OUT_Y_MSB = 3,\n    MAG_OUT_Y_LSB = 4,\n    MAG_OUT_Z_MSB = 5,\n    MAG_OUT_Z_LSB = 6,\n    MAG_WHOAMI = 7,\n    MAG_SYSMOD = 8,\n    MAG_OFF_X_MSB = 9,\n    MAG_OFF_X_LSB = 10,\n    MAG_OFF_Y_MSB = 11,\n    MAG_OFF_Y_LSB = 12,\n    MAG_OFF_Z_MSB = 13,\n    MAG_OFF_Z_LSB = 14,\n    MAG_DIE_TEMP = 15,\n    MAG_CTRL_REG1 = 16,\n    MAG_CTRL_REG2 = 17,\n    MAG3110_SAMPLE_RATES = 11,\n    MAG3110_WHOAMI_VAL = 196,\n    // /libraries/codal-core/inc/drivers/MMA8653.h\n    MICROBIT_ACCEL_PITCH_ROLL_VALID = 2,\n    MICROBIT_ACCEL_ADDED_TO_IDLE = 4,\n    MMA8653_DEFAULT_ADDR = 58,\n    MMA8653_STATUS = 0,\n    MMA8653_OUT_X_MSB = 1,\n    MMA8653_WHOAMI = 13,\n    MMA8653_XYZ_DATA_CFG = 14,\n    MMA8653_CTRL_REG1 = 42,\n    MMA8653_CTRL_REG2 = 43,\n    MMA8653_CTRL_REG3 = 44,\n    MMA8653_CTRL_REG4 = 45,\n    MMA8653_CTRL_REG5 = 46,\n    MMA8653_WHOAMI_VAL = 90,\n    MMA8653_SAMPLE_RANGES = 3,\n    MMA8653_SAMPLE_RATES = 8,\n    // /libraries/codal-core/inc/drivers/MultiButton.h\n    MULTI_BUTTON_STATE_1 = 1,\n    MULTI_BUTTON_STATE_2 = 2,\n    MULTI_BUTTON_HOLD_TRIGGERED_1 = 4,\n    MULTI_BUTTON_HOLD_TRIGGERED_2 = 8,\n    MULTI_BUTTON_SUPRESSED_1 = 16,\n    MULTI_BUTTON_SUPRESSED_2 = 32,\n    MULTI_BUTTON_ATTACHED = 64,\n    // /libraries/codal-core/inc/drivers/ST7735.h\n    MADCTL_MY = 128,\n    MADCTL_MX = 64,\n    MADCTL_MV = 32,\n    MADCTL_ML = 16,\n    MADCTL_RGB = 0,\n    MADCTL_BGR = 8,\n    MADCTL_MH = 4,\n    // /libraries/codal-core/inc/drivers/TouchButton.h\n    TOUCH_BUTTON_CALIBRATION_PERIOD = 10,\n    TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET = 2,\n    TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET = 5,\n    TOUCH_BUTTON_CALIBRATING = 16,\n    // /libraries/codal-core/inc/drivers/TouchSensor.h\n    TOUCH_SENSOR_MAX_BUTTONS = 10,\n    TOUCH_SENSOR_SAMPLE_PERIOD = 50,\n    TOUCH_SENSE_SAMPLE_MAX = 1000,\n    TOUCH_SENSOR_UPDATE_NEEDED = 1,\n    // /libraries/codal-core/inc/drivers/USB_HID_Keys.h\n    KEY_MOD_LCTRL = 1,\n    KEY_MOD_LSHIFT = 2,\n    KEY_MOD_LALT = 4,\n    KEY_MOD_LMETA = 8,\n    KEY_MOD_RCTRL = 16,\n    KEY_MOD_RSHIFT = 32,\n    KEY_MOD_RALT = 64,\n    KEY_MOD_RMETA = 128,\n    KEY_NONE = 0,\n    KEY_ERR_OVF = 1,\n    KEY_A = 4,\n    KEY_B = 5,\n    KEY_C = 6,\n    KEY_D = 7,\n    KEY_E = 8,\n    KEY_F = 9,\n    KEY_G = 10,\n    KEY_H = 11,\n    KEY_I = 12,\n    KEY_J = 13,\n    KEY_K = 14,\n    KEY_L = 15,\n    KEY_M = 16,\n    KEY_N = 17,\n    KEY_O = 18,\n    KEY_P = 19,\n    KEY_Q = 20,\n    KEY_R = 21,\n    KEY_S = 22,\n    KEY_T = 23,\n    KEY_U = 24,\n    KEY_V = 25,\n    KEY_W = 26,\n    KEY_X = 27,\n    KEY_Y = 28,\n    KEY_Z = 29,\n    KEY_1 = 30,\n    KEY_2 = 31,\n    KEY_3 = 32,\n    KEY_4 = 33,\n    KEY_5 = 34,\n    KEY_6 = 35,\n    KEY_7 = 36,\n    KEY_8 = 37,\n    KEY_9 = 38,\n    KEY_0 = 39,\n    KEY_ENTER = 40,\n    KEY_ESC = 41,\n    KEY_BACKSPACE = 42,\n    KEY_TAB = 43,\n    KEY_SPACE = 44,\n    KEY_MINUS = 45,\n    KEY_EQUAL = 46,\n    KEY_LEFTBRACE = 47,\n    KEY_RIGHTBRACE = 48,\n    KEY_BACKSLASH = 49,\n    KEY_HASHTILDE = 50,\n    KEY_SEMICOLON = 51,\n    KEY_APOSTROPHE = 52,\n    KEY_GRAVE = 53,\n    KEY_COMMA = 54,\n    KEY_DOT = 55,\n    KEY_SLASH = 56,\n    KEY_CAPSLOCK = 57,\n    KEY_F1 = 58,\n    KEY_F2 = 59,\n    KEY_F3 = 60,\n    KEY_F4 = 61,\n    KEY_F5 = 62,\n    KEY_F6 = 63,\n    KEY_F7 = 64,\n    KEY_F8 = 65,\n    KEY_F9 = 66,\n    KEY_F10 = 67,\n    KEY_F11 = 68,\n    KEY_F12 = 69,\n    KEY_SYSRQ = 70,\n    KEY_SCROLLLOCK = 71,\n    KEY_PAUSE = 72,\n    KEY_INSERT = 73,\n    KEY_HOME = 74,\n    KEY_PAGEUP = 75,\n    KEY_DELETE = 76,\n    KEY_END = 77,\n    KEY_PAGEDOWN = 78,\n    KEY_RIGHT = 79,\n    KEY_LEFT = 80,\n    KEY_DOWN = 81,\n    KEY_UP = 82,\n    KEY_NUMLOCK = 83,\n    KEY_KPSLASH = 84,\n    KEY_KPASTERISK = 85,\n    KEY_KPMINUS = 86,\n    KEY_KPPLUS = 87,\n    KEY_KPENTER = 88,\n    KEY_KP1 = 89,\n    KEY_KP2 = 90,\n    KEY_KP3 = 91,\n    KEY_KP4 = 92,\n    KEY_KP5 = 93,\n    KEY_KP6 = 94,\n    KEY_KP7 = 95,\n    KEY_KP8 = 96,\n    KEY_KP9 = 97,\n    KEY_KP0 = 98,\n    KEY_KPDOT = 99,\n    KEY_102ND = 100,\n    KEY_COMPOSE = 101,\n    KEY_POWER = 102,\n    KEY_KPEQUAL = 103,\n    KEY_F13 = 104,\n    KEY_F14 = 105,\n    KEY_F15 = 106,\n    KEY_F16 = 107,\n    KEY_F17 = 108,\n    KEY_F18 = 109,\n    KEY_F19 = 110,\n    KEY_F20 = 111,\n    KEY_F21 = 112,\n    KEY_F22 = 113,\n    KEY_F23 = 114,\n    KEY_F24 = 115,\n    KEY_OPEN = 116,\n    KEY_HELP = 117,\n    KEY_PROPS = 118,\n    KEY_FRONT = 119,\n    KEY_STOP = 120,\n    KEY_AGAIN = 121,\n    KEY_UNDO = 122,\n    KEY_CUT = 123,\n    KEY_COPY = 124,\n    KEY_PASTE = 125,\n    KEY_FIND = 126,\n    KEY_MUTE = 127,\n    KEY_VOLUMEUP = 128,\n    KEY_VOLUMEDOWN = 129,\n    KEY_KPCOMMA = 133,\n    KEY_RO = 135,\n    KEY_KATAKANAHIRAGANA = 136,\n    KEY_YEN = 137,\n    KEY_HENKAN = 138,\n    KEY_MUHENKAN = 139,\n    KEY_KPJPCOMMA = 140,\n    KEY_HANGEUL = 144,\n    KEY_HANJA = 145,\n    KEY_KATAKANA = 146,\n    KEY_HIRAGANA = 147,\n    KEY_ZENKAKUHANKAKU = 148,\n    KEY_KPLEFTPAREN = 182,\n    KEY_KPRIGHTPAREN = 183,\n    KEY_LEFTCTRL = 224,\n    KEY_LEFTSHIFT = 225,\n    KEY_LEFTALT = 226,\n    KEY_LEFTMETA = 227,\n    KEY_RIGHTCTRL = 228,\n    KEY_RIGHTSHIFT = 229,\n    KEY_RIGHTALT = 230,\n    KEY_RIGHTMETA = 231,\n    KEY_MEDIA_PLAYPAUSE = 232,\n    KEY_MEDIA_STOPCD = 233,\n    KEY_MEDIA_PREVIOUSSONG = 234,\n    KEY_MEDIA_NEXTSONG = 235,\n    KEY_MEDIA_EJECTCD = 236,\n    KEY_MEDIA_VOLUMEUP = 237,\n    KEY_MEDIA_VOLUMEDOWN = 238,\n    KEY_MEDIA_MUTE = 239,\n    KEY_MEDIA_WWW = 240,\n    KEY_MEDIA_BACK = 241,\n    KEY_MEDIA_FORWARD = 242,\n    KEY_MEDIA_STOP = 243,\n    KEY_MEDIA_FIND = 244,\n    KEY_MEDIA_SCROLLUP = 245,\n    KEY_MEDIA_SCROLLDOWN = 246,\n    KEY_MEDIA_EDIT = 247,\n    KEY_MEDIA_SLEEP = 248,\n    KEY_MEDIA_COFFEE = 249,\n    KEY_MEDIA_REFRESH = 250,\n    KEY_MEDIA_CALC = 251,\n    // /libraries/codal-core/inc/drivers/uf2format.h\n    UF2FORMAT_H = 1,\n    APP_START_ADDRESS = 8192,\n    UF2_FLAG_NOFLASH = 1,\n    // /libraries/codal-core/inc/streams/DataStream.h\n    DATASTREAM_MAXIMUM_BUFFERS = 1,\n    // /libraries/codal-core/inc/streams/LevelDetector.h\n    LEVEL_THRESHOLD_LOW = 1,\n    LEVEL_THRESHOLD_HIGH = 2,\n    LEVEL_DETECTOR_INITIALISED = 1,\n    LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/LevelDetectorSPL.h\n    LEVEL_DETECTOR_SPL_INITIALISED = 1,\n    LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/Synthesizer.h\n    SYNTHESIZER_SAMPLE_RATE = 44100,\n    TONE_WIDTH = 1024,\n    // /libraries/codal-core/inc/types/BitmapFont.h\n    BITMAP_FONT_WIDTH = 5,\n    BITMAP_FONT_HEIGHT = 5,\n    BITMAP_FONT_ASCII_START = 32,\n    BITMAP_FONT_ASCII_END = 126,\n    // /libraries/codal-core/inc/types/CoordinateSystem.h\n    COORDINATE_SPACE_ROTATED_0 = 0,\n    COORDINATE_SPACE_ROTATED_90 = 1,\n    COORDINATE_SPACE_ROTATED_180 = 2,\n    COORDINATE_SPACE_ROTATED_270 = 3,\n    RAW = 0,\n    SIMPLE_CARTESIAN = 1,\n    NORTH_EAST_DOWN = 2,\n    NORTH_EAST_UP = 3,\n    // /libraries/codal-core/inc/types/Event.h\n    DEVICE_ID_ANY = 0,\n    DEVICE_EVT_ANY = 0,\n    CREATE_ONLY = 0,\n    CREATE_AND_FIRE = 1,\n    DEVICE_EVENT_DEFAULT_LAUNCH_MODE = 1,\n    // /libraries/codal-core/inc/types/RefCounted.h\n    REF_TAG_STRING = 1,\n    REF_TAG_BUFFER = 2,\n    REF_TAG_IMAGE = 3,\n    REF_TAG_USER = 32,\n    // /pxtapp/configkeys.h\n    CFG_PIN_ACCELEROMETER_INT = 1,\n    CFG_PIN_ACCELEROMETER_SCL = 2,\n    CFG_PIN_ACCELEROMETER_SDA = 3,\n    CFG_PIN_BTN_A = 4,\n    CFG_PIN_BTN_B = 5,\n    CFG_PIN_BTN_SLIDE = 6,\n    CFG_PIN_DOTSTAR_CLOCK = 7,\n    CFG_PIN_DOTSTAR_DATA = 8,\n    CFG_PIN_FLASH_CS = 9,\n    CFG_PIN_FLASH_MISO = 10,\n    CFG_PIN_FLASH_MOSI = 11,\n    CFG_PIN_FLASH_SCK = 12,\n    CFG_PIN_LED = 13,\n    CFG_PIN_LIGHT = 14,\n    CFG_PIN_MICROPHONE = 15,\n    CFG_PIN_MIC_CLOCK = 16,\n    CFG_PIN_MIC_DATA = 17,\n    CFG_PIN_MISO = 18,\n    CFG_PIN_MOSI = 19,\n    CFG_PIN_NEOPIXEL = 20,\n    CFG_PIN_RX = 21,\n    CFG_PIN_RXLED = 22,\n    CFG_PIN_SCK = 23,\n    CFG_PIN_SCL = 24,\n    CFG_PIN_SDA = 25,\n    CFG_PIN_SPEAKER_AMP = 26,\n    CFG_PIN_TEMPERATURE = 27,\n    CFG_PIN_TX = 28,\n    CFG_PIN_TXLED = 29,\n    CFG_PIN_IR_OUT = 30,\n    CFG_PIN_IR_IN = 31,\n    CFG_PIN_DISPLAY_SCK = 32,\n    CFG_PIN_DISPLAY_MISO = 33,\n    CFG_PIN_DISPLAY_MOSI = 34,\n    CFG_PIN_DISPLAY_CS = 35,\n    CFG_PIN_DISPLAY_DC = 36,\n    CFG_DISPLAY_WIDTH = 37,\n    CFG_DISPLAY_HEIGHT = 38,\n    CFG_DISPLAY_CFG0 = 39,\n    CFG_DISPLAY_CFG1 = 40,\n    CFG_DISPLAY_CFG2 = 41,\n    CFG_DISPLAY_CFG3 = 42,\n    CFG_PIN_DISPLAY_RST = 43,\n    CFG_PIN_DISPLAY_BL = 44,\n    CFG_PIN_SERVO_1 = 45,\n    CFG_PIN_SERVO_2 = 46,\n    CFG_PIN_BTN_LEFT = 47,\n    CFG_PIN_BTN_RIGHT = 48,\n    CFG_PIN_BTN_UP = 49,\n    CFG_PIN_BTN_DOWN = 50,\n    CFG_PIN_BTN_MENU = 51,\n    CFG_PIN_LED_R = 52,\n    CFG_PIN_LED_G = 53,\n    CFG_PIN_LED_B = 54,\n    CFG_PIN_LED1 = 55,\n    CFG_PIN_LED2 = 56,\n    CFG_PIN_LED3 = 57,\n    CFG_PIN_LED4 = 58,\n    CFG_SPEAKER_VOLUME = 59,\n    CFG_PIN_JACK_TX = 60,\n    CFG_PIN_JACK_SENSE = 61,\n    CFG_PIN_JACK_HPEN = 62,\n    CFG_PIN_JACK_BZEN = 63,\n    CFG_PIN_JACK_PWREN = 64,\n    CFG_PIN_JACK_SND = 65,\n    CFG_PIN_JACK_BUSLED = 66,\n    CFG_PIN_JACK_COMMLED = 67,\n    CFG_PIN_BTNMX_LATCH = 66,\n    CFG_PIN_BTNMX_CLOCK = 67,\n    CFG_PIN_BTNMX_DATA = 68,\n    CFG_PIN_BTN_SOFT_RESET = 69,\n    CFG_ACCELEROMETER_TYPE = 70,\n    ACCELEROMETER_TYPE_LIS3DH = 50,\n    ACCELEROMETER_TYPE_MMA8453 = 56,\n    ACCELEROMETER_TYPE_FXOS8700 = 60,\n    ACCELEROMETER_TYPE_MMA8653 = 58,\n    ACCELEROMETER_TYPE_MSA300 = 76,\n    CFG_PIN_A0 = 100,\n    CFG_PIN_A1 = 101,\n    CFG_PIN_A2 = 102,\n    CFG_PIN_A3 = 103,\n    CFG_PIN_A4 = 104,\n    CFG_PIN_A5 = 105,\n    CFG_PIN_A6 = 106,\n    CFG_PIN_A7 = 107,\n    CFG_PIN_A8 = 108,\n    CFG_PIN_A9 = 109,\n    CFG_PIN_A10 = 110,\n    CFG_PIN_A11 = 111,\n    CFG_PIN_A12 = 112,\n    CFG_PIN_A13 = 113,\n    CFG_PIN_A14 = 114,\n    CFG_PIN_A15 = 115,\n    CFG_PIN_D0 = 150,\n    CFG_PIN_D1 = 151,\n    CFG_PIN_D2 = 152,\n    CFG_PIN_D3 = 153,\n    CFG_PIN_D4 = 154,\n    CFG_PIN_D5 = 155,\n    CFG_PIN_D6 = 156,\n    CFG_PIN_D7 = 157,\n    CFG_PIN_D8 = 158,\n    CFG_PIN_D9 = 159,\n    CFG_PIN_D10 = 160,\n    CFG_PIN_D11 = 161,\n    CFG_PIN_D12 = 162,\n    CFG_PIN_D13 = 163,\n    CFG_PIN_D14 = 164,\n    CFG_PIN_D15 = 165,\n    CFG_NUM_NEOPIXELS = 200,\n    CFG_NUM_DOTSTARS = 201,\n    CFG_DEFAULT_BUTTON_MODE = 202,\n    CFG_SWD_ENABLED = 203,\n    CFG_FLASH_BYTES = 204,\n    CFG_RAM_BYTES = 205,\n    CFG_SYSTEM_HEAP_BYTES = 206,\n    CFG_LOW_MEM_SIMULATION_KB = 207,\n    // /pxtapp/hf2dbg.h\n    HF2DBG_H = 1,\n    // /pxtapp/pins.h\n    BUTTON_ACTIVE_HIGH_PULL_DOWN = 17,\n    BUTTON_ACTIVE_HIGH_PULL_UP = 33,\n    BUTTON_ACTIVE_HIGH_PULL_NONE = 49,\n    BUTTON_ACTIVE_LOW_PULL_DOWN = 16,\n    BUTTON_ACTIVE_LOW_PULL_UP = 32,\n    BUTTON_ACTIVE_LOW_PULL_NONE = 48,\n    // /pxtapp/platform.h\n    PAGE_SIZE = 512,\n    DEV_NUM_PINS = 64,\n    PXT_BOOTLOADER_CFG_MAGIC = 3191854542,\n    PXT_74HC165 = 1,\n    IMAGE_BITS = 4,\n    PA00 = 0,\n    PA01 = 1,\n    PA02 = 2,\n    PA03 = 3,\n    PA04 = 4,\n    PA05 = 5,\n    PA06 = 6,\n    PA07 = 7,\n    PA08 = 8,\n    PA09 = 9,\n    PA10 = 10,\n    PA11 = 11,\n    PA12 = 12,\n    PA13 = 13,\n    PA14 = 14,\n    PA15 = 15,\n    PA16 = 16,\n    PA17 = 17,\n    PA18 = 18,\n    PA19 = 19,\n    PA20 = 20,\n    PA21 = 21,\n    PA22 = 22,\n    PA23 = 23,\n    PA24 = 24,\n    PA25 = 25,\n    PA26 = 26,\n    PA27 = 27,\n    PA28 = 28,\n    PA29 = 29,\n    PA30 = 30,\n    PA31 = 31,\n    PB00 = 32,\n    PB01 = 33,\n    PB02 = 34,\n    PB03 = 35,\n    PB04 = 36,\n    PB05 = 37,\n    PB06 = 38,\n    PB07 = 39,\n    PB08 = 40,\n    PB09 = 41,\n    PB10 = 42,\n    PB11 = 43,\n    PB12 = 44,\n    PB13 = 45,\n    PB14 = 46,\n    PB15 = 47,\n    PB16 = 48,\n    PB17 = 49,\n    PB18 = 50,\n    PB19 = 51,\n    PB20 = 52,\n    PB21 = 53,\n    PB22 = 54,\n    PB23 = 55,\n    PB24 = 56,\n    PB25 = 57,\n    PB26 = 58,\n    PB27 = 59,\n    PB28 = 60,\n    PB29 = 61,\n    PB30 = 62,\n    PB31 = 63,\n    // /pxtapp/pxt.h\n    DEVICE_ID_BUTTON_SLIDE = 3000,\n    DEVICE_ID_MICROPHONE = 3001,\n    DEVICE_ID_FIRST_BUTTON = 4000,\n    DEVICE_ID_FIRST_TOUCHBUTTON = 4100,\n    // /pxtapp/pxtbase.h\n    PXT_REFCNT_FLASH = 65534,\n    VTABLE_MAGIC = 249,\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    User0 = 16,\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    GC = 0,\n    // /pxtapp/pxtconfig.h\n    PXT_GC = 1,\n    // /pxtapp/uf2hid.h\n    UF2_HID_H = 1,\n}\n",
      "dmac.cpp": "#include \"dmac.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nSINGLETON(WDMAC);\n#endif\n\n}",
      "dmac.h": "#ifndef __DMAC_H\n#define __DMAC_H\n\n#include \"pxt.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nclass WDMAC {\n  public:\n    CODAL_DMAC dmac;\n\n    WDMAC() {}\n};\n\nWDMAC* getWDMAC();\n#endif\n\n}\n\n#endif",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PulseValue {\n    //% block=high\n    High = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=low\n    Low = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    }\n\n\n    declare const enum PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=\"pulse low\"\n    PulseLow = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    //% block=\"rise\"\n    Rise = 2,  // DEVICE_PIN_EVT_RISE\n    //% block=\"fall\"\n    Fall = 3,  // DEVICE_PIN_EVT_FALL\n    }\n\n\n    declare const enum PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "hf2.cpp": "#define UF2_DEFINE_HANDOVER 1\n#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"uf2format.h\"\n\nstatic void *stackCopy;\nstatic uint32_t stackSize;\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\nstatic volatile bool resume = false;\n\nusing namespace codal;\n\nstatic const char hidDescriptor[] = {\n    0x06, 0x97, 0xFF, // usage page vendor 0x97 (usage 0xff97 0x0001)\n    0x09, 0x01,       // usage 1\n    0xA1, 0x01,       // collection - application\n    0x15, 0x00,       // logical min 0\n    0x26, 0xFF, 0x00, // logical max 255\n    0x75, 8,          // report size 8\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x81, 0x02,       // input: data, variable, absolute\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x91, 0x02,       // output: data, variable, absolute\n    0x95, 1,          // report count 1\n    0x09, 0x01,       // usage 1\n    0xB1, 0x02,       // feature: data, variable, absolute\n    0xC0,             // end\n};\n\nstatic const HIDReportDescriptor reportDesc = {\n    9,\n    0x21,                  // HID\n    0x100,                 // hidbcd 1.00\n    0x00,                  // country code\n    0x01,                  // num desc\n    0x22,                  // report desc type\n    sizeof(hidDescriptor), // size of 0x22\n};\n\nstatic const InterfaceInfo ifaceInfo = {\n    &reportDesc,\n    sizeof(reportDesc),\n    1,\n    {\n        2,    // numEndpoints\n        0x03, /// class code - HID\n        0x00, // subclass\n        0x00, // protocol\n        0x00, //\n        0x00, //\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n\nint HF2::stdRequest(UsbEndpointIn &ctrl, USBSetup &setup)\n{\n    if (setup.bRequest == USB_REQ_GET_DESCRIPTOR)\n    {\n        if (setup.wValueH == 0x21)\n        {\n            InterfaceDescriptor tmp;\n            fillInterfaceInfo(&tmp);\n            return ctrl.write(&tmp, sizeof(tmp));\n        }\n        else if (setup.wValueH == 0x22)\n        {\n            return ctrl.write(hidDescriptor, sizeof(hidDescriptor));\n        }\n    }\n    return DEVICE_NOT_SUPPORTED;\n}\n\nconst InterfaceInfo *HF2::getInterfaceInfo()\n{\n    return &ifaceInfo;\n}\n\nint HF2::sendSerial(const void *data, int size, int isError)\n{\n    if (!gotSomePacket) return DEVICE_OK;\n    return send(data, size, isError ? HF2_FLAG_SERIAL_ERR : HF2_FLAG_SERIAL_OUT);\n}\n\n// Recieve HF2 message\n// Does not block. Will store intermediate data in pkt.\n// `serial` flag is cleared if we got a command message.\nint HF2::recv() {\n    uint8_t buf[64];\n    int len = out->read(buf, sizeof(buf));\n    if (len <= 0)\n        return len;\n\n    uint8_t tag = buf[0];\n    // serial packets not allowed when in middle of command packet\n    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT));\n    int size = tag & HF2_SIZE_MASK;\n    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf));\n    memcpy(pkt.buf + pkt.size, buf + 1, size);\n    pkt.size += size;\n    tag &= HF2_FLAG_MASK;\n    if (tag != HF2_FLAG_CMDPKT_BODY) {\n        if (tag == HF2_FLAG_CMDPKT_LAST)\n            pkt.serial = 0;\n        else if (tag == HF2_FLAG_SERIAL_OUT)\n            pkt.serial = 1;\n        else\n            pkt.serial = 2;\n        int sz = pkt.size;\n        pkt.size = 0;\n        return sz;\n    }\n    return 0;\n}\n\n// Send HF2 message.\n// Use command message when flag == HF2_FLAG_CMDPKT_LAST\n// Use serial stdout for HF2_FLAG_SERIAL_OUT and stderr for HF2_FLAG_SERIAL_ERR.\nint HF2::send(const void *data, int size, int flag0) {\n    uint8_t buf[64];\n    const uint8_t *ptr = (const uint8_t *)data;\n\n    if (!CodalUSB::usbInstance->isInitialised())\n        return -1;\n\n    for (;;) {\n        int s = 63;\n        int flag = flag0;\n        if (size <= 63) {\n            s = size;\n        } else {\n            if (flag == HF2_FLAG_CMDPKT_LAST)\n                flag = HF2_FLAG_CMDPKT_BODY;\n        }\n        buf[0] = flag | s;\n        memcpy(buf + 1, ptr, s);\n        if (in->write(buf, sizeof(buf)) < 0)\n            return -1;\n        ptr += s;\n        size -= s;\n        if (!size)\n            break;\n    }\n    return 0;\n}\n\nint HF2::sendResponse(int size) {\n    return send(pkt.buf, 4 + size, HF2_FLAG_CMDPKT_LAST);\n}\n\nint HF2::sendResponseWithData(const void *data, int size) {\n    int res;\n\n    if (size <= (int)sizeof(pkt.buf) - 4) {\n        __disable_irq();\n        memcpy(pkt.resp.data8, data, size);\n        __enable_irq();\n        res = sendResponse(size);\n    } else {\n        __disable_irq();\n        send(pkt.buf, 4, HF2_FLAG_CMDPKT_BODY);\n        res = send(data, size, HF2_FLAG_CMDPKT_LAST);\n        __enable_irq();\n    }\n\n    return res;\n}\n\nstatic void copy_words(void *dst0, const void *src0, uint32_t n_words) {\n    uint32_t *dst = (uint32_t *)dst0;\n    const uint32_t *src = (const uint32_t *)src0;\n    while (n_words--)\n        *dst++ = *src++;\n}\n\n#define DBL_TAP_PTR ((volatile uint32_t *)(HMCRAMC0_ADDR + HMCRAMC0_SIZE - 4))\n#define DBL_TAP_MAGIC_QUICK_BOOT 0xf02669ef\n\nint HF2::endpointRequest()\n{\n    int sz = recv();\n\n    if (!sz)\n        return 0;\n\n    uint32_t tmp;\n\n    if (pkt.serial) {\n        // TODO raise some event?\n        return 0;\n    }\n\n    LOG(\"HF2 sz=%d CMD=%x\", sz, pkt.buf32[0]);\n\n    // one has to be careful dealing with these, as they share memory\n    HF2_Command *cmd = &pkt.cmd;\n    HF2_Response *resp = &pkt.resp;\n\n    uint32_t cmdId = cmd->command_id;\n    resp->tag = cmd->tag;\n    resp->status16 = HF2_STATUS_OK;\n\n#define checkDataSize(str, add) usb_assert(sz == 8 + (int)sizeof(cmd->str) + (int)(add))\n\n    gotSomePacket = true;\n\n    switch (cmdId) {\n    case HF2_CMD_INFO:\n        return sendResponseWithData(uf2_info(), strlen(uf2_info()));\n\n    case HF2_CMD_BININFO:\n        resp->bininfo.mode = HF2_MODE_USERSPACE;\n        resp->bininfo.flash_page_size = 0;\n        resp->bininfo.flash_num_pages = 0;\n        resp->bininfo.max_message_size = sizeof(pkt.buf);\n        return sendResponse(sizeof(resp->bininfo));\n\n    case HF2_DBG_RESTART:\n        *HF2_DBG_MAGIC_PTR = HF2_DBG_MAGIC_START;\n        target_reset();\n        break;\n\n    case HF2_CMD_RESET_INTO_APP:\n        *DBL_TAP_PTR = DBL_TAP_MAGIC_QUICK_BOOT;\n        // fall-through\n    case HF2_CMD_RESET_INTO_BOOTLOADER:\n        target_reset();\n        break;\n\n    case HF2_CMD_START_FLASH:\n        sendResponse(0);\n        hf2_handover(in->ep);\n        usb_assert(0); // should not be reached\n        break;\n\n    case HF2_CMD_WRITE_WORDS:\n        checkDataSize(write_words, cmd->write_words.num_words << 2);\n        copy_words((void *)cmd->write_words.target_addr, cmd->write_words.words,\n                   cmd->write_words.num_words);\n        break;\n\n    case HF2_CMD_READ_WORDS:\n        checkDataSize(read_words, 0);\n        tmp = cmd->read_words.num_words;\n        usb_assert(tmp <= sizeof(pkt.buf) / 4 - 1);\n        copy_words(resp->data32, (void *)cmd->read_words.target_addr, tmp);\n        return sendResponse(tmp << 2);\n\n    case HF2_CMD_DMESG:\n#if DEVICE_DMESG_BUFFER_SIZE > 0\n        return sendResponseWithData(codalLogStore.buffer, codalLogStore.ptr);\n#else\n        break;\n#endif\n\n    case HF2_DBG_GET_GLOBAL_STATE: {\n        HF2_GLOBAL_STATE_Result gstate = {\n            .num_globals = (uint32_t)getNumGlobals(), //\n            .globals_addr = (uint32_t)globals,\n        };\n        return sendResponseWithData(&gstate, sizeof(gstate));\n    }\n\n    case HF2_DBG_RESUME:\n        globals[0] = (TValue)cmd->data32[0];\n        resume = true;\n        return sendResponse(0);\n\n    case HF2_DBG_GET_STACK:\n        return sendResponseWithData(stackCopy, stackSize);\n\n    default:\n        // command not understood\n        resp->status16 = HF2_STATUS_INVALID_CMD;\n        break;\n    }\n\n    return sendResponse(0);\n}\n\nHF2::HF2(HF2_Buffer &p) : USBHID(), pkt(p), gotSomePacket(false) {}\n\n//\n//\n// WebUSB\n//\n//\n\nWebHF2::WebHF2(HF2_Buffer &p) : HF2(p) {}\n\nstatic const InterfaceInfo ifaceInfoWeb = {\n    NULL,\n    0,\n    1,\n    {\n        2,    // numEndpoints\n        0xff, /// class code - HID\n        42, // subclass\n        0x01, // protocol\n        0x00, //\n        0x00, //\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n\nconst InterfaceInfo *WebHF2::getInterfaceInfo()\n{\n    return &ifaceInfoWeb;\n}\n\n//\n//\n// Debugger\n//\n//\n\nstruct ExceptionContext {\n    uint32_t excReturn; // 0xFFFFFFF9\n    uint32_t r0;\n    uint32_t r1;\n    uint32_t r2;\n    uint32_t r3;\n    uint32_t r12;\n    uint32_t lr;\n    uint32_t faultInstrAddr;\n    uint32_t psr;\n};\n\nstruct Paused_Data {\n    uint32_t pc;\n};\nstatic Paused_Data pausedData;\n\nvoid bkptPaused() {\n    \n// waiting for https://github.com/lancaster-university/codal/pull/14\n#ifdef DEVICE_GROUP_ID_USER\n    // the loop below counts as \"system\" task, and we don't want to pause ourselves\n    fiber_set_group(DEVICE_GROUP_ID_SYSTEM);\n    // pause everyone else\n    fiber_pause_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    while (!resume) {\n        // DMESG(\"BKPT\");\n        hf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        hf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        webhf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        webhf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        // TODO use an event\n        for (int i = 0; i < 20; ++i) {\n            if (resume)\n                break;\n            fiber_sleep(50);\n        }\n    }\n\n    if (stackCopy) {\n        xfree(stackCopy);\n        stackCopy = NULL;\n    }\n\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_resume_group(DEVICE_GROUP_ID_USER);\n    // go back to user mode\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    resume = false;\n}\n\nextern \"C\" void handleHardFault(ExceptionContext *ectx) {\n    auto instr = (uint16_t *)ectx->faultInstrAddr;\n\n    DMESG(\"FLT %p\", instr);\n\n    if (ectx->faultInstrAddr & 0x80000000) {\n        ectx->faultInstrAddr &= ~0x80000000;\n        // switch to step-over mode\n        globals[0] = (TValue)3;\n        return;\n    }\n\n    DMESG(\"BB %p %p %p lr=%p r0=%p\", instr[-1], instr[0], instr[1], ectx->lr, ectx->r0);\n\n    if (instr[0] == 0x6840) {\n        // ldr r0, [r0, #4] -- entry breakpoint\n        ectx->faultInstrAddr += 2;\n        // we're being ask for step-over mode\n        if (ectx->r0 == 3) {\n            // switch to debugger-attached-no-stepping mode\n            globals[0] = (TValue)0;\n            ectx->lr |= 0x80000000;\n        }\n        return;\n    }\n\n    if (instr[0] == 0x6800) {\n        // ldr r0, [r0, #0]\n        ectx->lr = ectx->faultInstrAddr + 3; // next instruction + thumb mode\n        pausedData.pc = ectx->faultInstrAddr + 2;\n        void *ssp = (void *)(ectx + 1);\n        stackSize = DEVICE_STACK_BASE - (uint32_t)ssp;\n        if (stackCopy)\n            xfree(stackCopy);\n        stackCopy = xmalloc(stackSize);\n        memcpy(stackCopy, ssp, stackSize);\n        ectx->faultInstrAddr = ((uint32_t)(&bkptPaused) & (~1U));\n        return;\n    }\n\n    while (1) {\n    }\n}\n\nextern \"C\" void HardFault_Handler(void) {\n    asm(\"push {lr}; mov r0, sp; bl handleHardFault; pop {pc}\");\n}\n\n#endif",
      "hf2.h": "#ifndef DEVICE_HF2_H\n#define DEVICE_HF2_H\n\n#if CONFIG_ENABLED(DEVICE_USB)\n\n#include \"HID.h\"\n#include \"uf2hid.h\"\n\n#define HF2_BUF_SIZE 256\n\ntypedef struct\n{\n    uint16_t size;\n    uint8_t serial;\n    union {\n        uint8_t buf[HF2_BUF_SIZE];\n        uint32_t buf32[HF2_BUF_SIZE / 4];\n        uint16_t buf16[HF2_BUF_SIZE / 2];\n        HF2_Command cmd;\n        HF2_Response resp;\n    };\n} HF2_Buffer;\n\nclass HF2 : public codal::USBHID\n{\npublic:\n    HF2_Buffer &pkt;\n    bool gotSomePacket;\n\n    int sendResponse(int size);\n    int send(const void *data, int size, int flag);\n    int recv();\n    int sendResponseWithData(const void *data, int size);\n\n    HF2(HF2_Buffer &pkt);\n    virtual int endpointRequest();\n    virtual int stdRequest(UsbEndpointIn &ctrl, USBSetup& setup);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    int sendSerial(const void *data, int size, int isError = 0);\n};\n\nclass WebHF2 : public HF2\n{\npublic:\n    WebHF2(HF2_Buffer &pkt);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    virtual bool enableWebUSB() { return true; }\n};\n\n#endif\n\n#endif\n",
      "hf2dbg.h": "#ifndef HF2DBG_H\n#define HF2DBG_H 1\n\n// we use a location at the top of the stack to store a magic value\n// which causes us to stop at the very first break point in the program\n#define HF2_DBG_MAGIC_PTR ((uint32_t *)(DEVICE_STACK_BASE - (DEVICE_STACK_SIZE - 4)))\n#define HF2_DBG_MAGIC_START 0xf0ebac7f\n\n#define HF2_DBG_GET_GLOBAL_STATE 0x53fc66e0\nstruct HF2_GLOBAL_STATE_Result {\n    uint32_t num_globals;\n    uint32_t globals_addr;\n};\n\n#define HF2_DBG_RESTART 0x1120bd93\n#define HF2_DBG_RESUME 0x27a55931\n#define HF2_EV_DBG_PAUSED 0x3692f9fd\n#define HF2_DBG_GET_STACK 0x70901510\n\n#endif\n",
      "i2c.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n    static CODAL_I2C *i2c;\n\n    static void initI2C() {\n      if (NULL == i2c) {\n        i2c = new CODAL_I2C(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL));\n      }\n    }\n\n      /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //%\n    Buffer i2cReadBuffer(int address, int size, bool repeat = false)\n    {\n      initI2C();\n      Buffer buf = mkBuffer(NULL, size);\n      int status = i2c->read(address << 1, buf->data, size, repeat);\n      if (status != ErrorCode::DEVICE_OK) {\n        decrRC(buf);\n        buf = 0;\n      }\n      return buf;\n    }\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //%\n    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)\n    {\n      initI2C();\n      return i2c->write(address << 1, buf->data, buf->length, repeat);\n    }\n}",
      "i2c.ts": "namespace pins {\n    /**\n     * Read one number from an I2C address.\n     */\n    //% help=pins/i2c-read-number weight=5 group=\"i2c\" inlineInputMode=\"external\"\n    //% blockId=pins_i2c_readnumber block=\"i2c read number at address %address|of format %format|repeated %repeated\"\n    export function i2cReadNumber(address: number, format: NumberFormat, repeated?: boolean): number {\n        const buf = pins.i2cReadBuffer(address, pins.sizeOf(format), repeated)\n        return buf.getNumber(format, 0)\n    }\n\n    /**\n     * Write one number to an I2C address.\n     */\n    //% help=pins/i2c-write-number weight=4 group=\"i2c\"\n    //% blockId=i2c_writenumber block=\"i2c write number|at address %address|with value %value|of format %format|repeated %repeated\"\n    export function i2cWriteNumber(address: number, value: number, format: NumberFormat, repeated?: boolean): void {\n        const buf = control.createBuffer(pins.sizeOf(format))\n        buf.setNumber(format, 0, value)\n        pins.i2cWriteBuffer(address, buf, repeated)\n    }\n\n    export class I2CDevice {\n        public address: number;\n        private _hasError: boolean;\n        constructor(address: number) {\n            this.address = address\n        }\n        public readInto(buf: Buffer, repeat = false, start = 0, end: number = null) {\n            if (end === null)\n                end = buf.length\n            if (start >= end)\n                return\n            let res = i2cReadBuffer(this.address, end - start, repeat)\n            if (!res) {\n                this._hasError = true\n                return\n            }\n            buf.write(start, res)\n        }\n        public write(buf: Buffer, repeat = false) {\n            let res = i2cWriteBuffer(this.address, buf, repeat)\n            if (res) {\n                this._hasError = true\n            }\n        }\n        public begin(): I2CDevice {\n            this._hasError = false;\n            return this;\n        }\n        public end() {\n        }\n        public ok() {\n            return !this._hasError\n        }\n    }\n}",
      "ns.ts": "/**\n * Events and data from sensors.\n */\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\n//% groups='[\"other\", \"More\"]'\nnamespace input {\n}\n\n/**\n * Servos\n */\n//% color=\"#03AA74\" weight=88 icon=\"\\uf021\"\nnamespace servos {\n\n}\n\n/**\n * A Joint Asynchronous Communications, Device Agnostic Control.\n */\n//% color=\"#E79251\" weight=1 icon=\"\\uf185\"\n//% groups='[\"Broadcast\", \"Console\", \"Control\"]'\n//% blockGap=8\nnamespace jacdac {\n\n}",
      "pins.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\nstatic DevicePin **pinPtrs;\nstatic uint8_t numPinPtrs;\nstatic uint8_t pinPos[DEV_NUM_PINS];\n\n//%\nDevicePin *getPin(int id) {\n    if (id < 0 || id >= DEV_NUM_PINS)\n        target_panic(PANIC_NO_SUCH_PIN);\n\n    // we could use lookupComponent() here - it would be slightly slower\n\n    int ptr = pinPos[id];\n    if (ptr == 0) {\n        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));\n        bool isAnalog = IS_ANALOG_PIN(id);\n        // GCTODO\n        pinPtrs[numPinPtrs++] =\n            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,\n                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);\n        ptr = numPinPtrs;\n        pinPos[id] = ptr;\n    }\n    return pinPtrs[ptr - 1];\n}\n\n//%\nDevicePin *getPinCfg(int key) {\n    return getPin(getConfig(key));\n}\n\nvoid linkPin(int from, int to) {\n    if (from < 0 || from >= DEV_NUM_PINS)\n        target_panic(PANIC_NO_SUCH_PIN);\n    getPin(to);\n    pinPos[from] = pinPos[to];\n}\n\n//%\nDevicePin *lookupPin(int pinName) {\n    if (pinName < 0 || pinName == 0xff)\n        return NULL;\n    return getPin(pinName);\n}\n\nCodalComponent *lookupComponent(int id) {\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; ++i) {\n        if (CodalComponent::components[i] && CodalComponent::components[i]->id == id)\n            return CodalComponent::components[i];\n    }\n    return NULL;\n}\n\n} // namespace pxt\n\nnamespace pins {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n * Get the duration of the last pulse in microseconds. This function should be called from a\n * ``onPulsed`` handler.\n */\n//% help=pins/pulse-duration blockGap=8\n//% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n//% weight=19\nint pulseDuration() {\n    return pxt::lastEvent.timestamp;\n}\n} // namespace pins\n",
      "pins.h": "#ifndef __PXT_PINS_H\n#define __PXT_PINS_H\n\n#define BUTTON_ACTIVE_HIGH_PULL_DOWN (ACTIVE_HIGH | 0x10)\n#define BUTTON_ACTIVE_HIGH_PULL_UP (ACTIVE_HIGH | 0x20)\n#define BUTTON_ACTIVE_HIGH_PULL_NONE (ACTIVE_HIGH | 0x30)\n#define BUTTON_ACTIVE_LOW_PULL_DOWN (ACTIVE_LOW | 0x10)\n#define BUTTON_ACTIVE_LOW_PULL_UP (ACTIVE_LOW | 0x20)\n#define BUTTON_ACTIVE_LOW_PULL_NONE (ACTIVE_LOW | 0x30)\n\n#define PIN(name) ((PinName)pxt::getConfig(CFG_PIN_##name, -1))\n#define LOOKUP_PIN(name) pxt::lookupPin(PIN(name))\n\n// these can be overridden in platform.h\n#ifndef CODAL_PIN\n#define CODAL_PIN CODAL_MBED::Pin\n#endif\n\n#ifndef CODAL_TIMER\n#define CODAL_TIMER CODAL_MBED::Timer\n#endif\n\n#ifndef CODAL_SPI\n#define CODAL_SPI CODAL_MBED::SPI\n#endif\n\n#ifndef CODAL_I2C\n#define CODAL_I2C CODAL_MBED::I2C\n#endif\n\n#ifndef CODAL_SERIAL\n#define CODAL_SERIAL CODAL_MBED::Serial\n#endif\n\n#ifndef IS_ANALOG_PIN\n#define IS_ANALOG_PIN(id) ((DEV_ANALOG_PINS >> (id)) & 1)\n#endif\n\ntypedef CODAL_PIN DevicePin;\n\ntypedef DevicePin *DigitalInOutPin;\ntypedef DevicePin *AnalogInOutPin;\ntypedef DevicePin *AnalogInPin;\ntypedef DevicePin *AnalogOutPin;\ntypedef DevicePin *PwmPin;\ntypedef DevicePin *PwmOnlyPin;\ntypedef Button *Button_;\n\nnamespace pxt {\nDevicePin *getPin(int id);\nDevicePin *getPinCfg(int key);\nDevicePin *lookupPin(int pinName);\nvoid linkPin(int from, int to);\nButton *getButtonByPin(int pin, int flags);\nAbstractButton *getButton(int id);\nMultiButton *getMultiButton(int id, int pinA, int pinB, int flags);\nCodalComponent *lookupComponent(int id);\n}\n\n#define PINOP(op) name->op\n\n#endif\n",
      "pins.ts": "//% noRefCounting fixedInstances\ninterface DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogOutPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInOutPin extends AnalogInPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmOnlyPin extends DigitalInOutPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmPin extends PwmOnlyPin, AnalogInOutPin {\n}\n\n/**\n * Control currents in Pins for analog/digital signals, servos, i2c, ...\n */\n//% color=#A80000 weight=85 icon=\"\\uf140\" advanced=true\n//% groups='[\"other\", \"Servo\", \"i2c\"]'\nnamespace pins {\n\n}",
      "pinsAnalog.cpp": "#include \"pxt.h\"\n\nnamespace AnalogInPinMethods {\n\n/**\n * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n * @param name pin to write to\n */\n//% help=pins/analog-read weight=53\n//% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n//% blockNamespace=pins\n//% parts=\"photocell\" trackArgs=0\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nint analogRead(AnalogInPin name) {\n    return PINOP(getAnalogValue());\n}\n}\n\nnamespace AnalogOutPinMethods {\nvoid analogWrite(AnalogOutPin name, int value) __attribute__ ((weak));\n\n/**\n * Set the connector value as analog. Value must be comprised between 0 and 1023.\n * @param name pin name to write to\n * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n */\n//% help=pins/analog-write weight=52\n//% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n//% blockNamespace=pins\n//% parts=\"analogled\" trackArgs=0\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.min=0 value.max=1023\nvoid analogWrite(AnalogOutPin name, int value) {\n    PINOP(setAnalogValue(value));\n}\n}",
      "pinsDigital.cpp": "#include \"pxt.h\"\n\nenum class PulseValue {\n    //% block=high\n    High = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=low\n    Low = DEVICE_PIN_EVT_PULSE_LO\n};\n\nenum class PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=\"pulse low\"\n    PulseLow = DEVICE_PIN_EVT_PULSE_LO,\n    //% block=\"rise\"\n    Rise = DEVICE_PIN_EVT_RISE,\n    //% block=\"fall\"\n    Fall = DEVICE_PIN_EVT_FALL,\n};\n\nenum class PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2\n};\n\nnamespace DigitalInOutPinMethods {\n/**\n * Read a pin or connector as either 0 or 1\n * @param name pin to read from\n */\n//% help=pins/digital-read weight=61\n//% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n//% parts=\"slideswitch\" trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nbool digitalRead(DigitalInOutPin name) {\n    return PINOP(getDigitalValue()) != 0;\n}\n\n/**\n     * Set a pin or connector value to either 0 or 1.\n    * @param name pin to write to\n    * @param value value to set on the pin\n    */\n//% help=pins/digital-write weight=60\n//% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n//% parts=\"led\" trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid digitalWrite(DigitalInOutPin name, bool value) {\n    PINOP(setDigitalValue(value));\n}\n\n/**\n* Make this pin a digital input, and create events where the timestamp is the duration\n* that this pin was either ``high`` or ``low``.\n*/\n//% help=pins/on-pulsed weight=16 blockGap=8\n//% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% parts=\"slideswitch\" trackArgs=0\n//% deprecated=1 hidden=1\nvoid onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {\n    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n    registerWithDal(pin->id, (int)pulse, body);\n}\n\n/**\n* Register code to run when a pin event occurs. \n*/\n//% help=pins/on-event weight=20 blockGap=8\n//% blockId=pinsonevent block=\"on|pin %pin|%event\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% parts=\"slideswitch\" trackArgs=0\nvoid onEvent(DigitalInOutPin pin, PinEvent event, Action body) {\n    switch(event) {\n        case PinEvent::PulseHigh:\n        case PinEvent::PulseLow:\n            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n            registerWithDal(pin->id, (int)event, body);\n            break;\n        case PinEvent::Rise:\n        case PinEvent::Fall:\n            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);\n            registerWithDal(pin->id, (int)event, body);\n            break;    \n    }    \n}\n\n/**\n* Return the duration of a pulse in microseconds\n* @param name the pin which measures the pulse\n* @param value the value of the pulse (default high)\n* @param maximum duration in micro-seconds\n*/\n//% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (us)\"\n//% weight=18 blockGap=8\n//% help=\"pins/pulse-in\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\nint pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {\n    int pulse = PulseValue::High == value ? 1 : 0;\n    uint64_t tick = system_timer_current_time_us();\n    uint64_t maxd = (uint64_t)maxDuration;\n    while (pin->getDigitalValue() != pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n\n    uint64_t start = system_timer_current_time_us();\n    while (pin->getDigitalValue() == pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n    uint64_t end = system_timer_current_time_us();\n    return end - start;\n}\n\n/**\n* Set the pull direction of this pin.\n* @param name pin to set the pull mode on\n* @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n*/\n//% help=pins/set-pull weight=17 blockGap=8\n//% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid setPull(DigitalInOutPin name, PinPullMode pull) {\n    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp\n                                                                        ? PullMode::Up\n                                                                        : PullMode::None;\n    PINOP(setPull(m));\n}\n\n}",
      "pinsPWM.cpp": "#include \"pxt.h\"\n\nnamespace PwmPinMethods {\n}\n\nnamespace PwmOnlyPinMethods {\n\n/**\n * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n * **microseconds** or `1/1000` milliseconds.\n * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n * no effect.\n * @param name analog pin to set period to\n * @param micros period in micro seconds. eg:20000\n */\n//% help=pins/analog-set-period weight=51\n//% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid analogSetPeriod(PwmOnlyPin name, int period) {\n    PINOP(setAnalogPeriodUs(period));\n}\n\n/**\n * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n * @param name pin to write to\n * @param value angle or rotation speed\n */\n//% help=pins/servo-write weight=41 group=\"Servo\"\n//% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n//% parts=microservo trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.defl=90\nvoid servoWrite(PwmOnlyPin name, int value) {\n    PINOP(setServoValue(value));\n}\n\n/**\n * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n * @param name pin name\n * @param duration pulse duration in micro seconds, eg:1500\n */\n//% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n//% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n//% parts=microservo blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid servoSetPulse(PwmOnlyPin name, int duration) {\n    PINOP(setServoPulseUs(duration));\n}\n\n}",
      "pinscompat.ts": "// this type alias is required for backward compatibility\n// it gets overriden in microbit (DigitalPin is an enum over there)\ntype DigitalPin = DigitalInOutPin;\ntype AnalogPin = AnalogInOutPin;",
      "platform.cpp": "#include \"pxt.h\"\n#include \"neopixel.h\"\n\nnamespace pxt {\n\nstatic void initRandomSeed() {\n    int seed = 0xC0DA1;\n    auto pinTemp = LOOKUP_PIN(TEMPERATURE);\n    if (pinTemp)\n        seed *= pinTemp->getAnalogValue();\n    auto pinLight = LOOKUP_PIN(LIGHT);\n    if (pinLight)\n        seed *= pinLight->getAnalogValue();\n    seedRandom(seed);\n}\n\nstatic void remapSwdPin(int pinCfg, int fallback) {\n    int pinName = getConfig(pinCfg);\n    if (pinName == PA30 || pinName == PA31) {\n        if (getConfig(CFG_SWD_ENABLED, 0)) {\n            linkPin(pinName, fallback);\n        } else {\n            PORT->Group[pinName / 32].PINCFG[pinName % 32].reg = (uint8_t)PORT_PINCFG_INEN;\n        }\n    }\n}\n\nstatic void initSwdPins() {\n    remapSwdPin(CFG_PIN_NEOPIXEL, PIN(D0));\n    remapSwdPin(CFG_PIN_RXLED, PIN(D1));\n    remapSwdPin(CFG_PIN_SPEAKER_AMP, PIN(D2));\n}\n\nstatic void clearNeoPixels() {\n    // clear on-board neopixels\n    auto neoPin = LOOKUP_PIN(NEOPIXEL);\n    if (neoPin) {\n        int numNeopixels = getConfig(CFG_NUM_NEOPIXELS, 0);\n        int size = numNeopixels * 3;\n        if (size) {\n            uint8_t neobuf[size];\n            memset(neobuf, 0, size);\n            neoPin->setDigitalValue(0);\n            fiber_sleep(1);\n            neopixel_send_buffer(*neoPin, neobuf, 30);\n        }\n    }\n}\n\nvoid platform_init() {\n    initSwdPins();\n    initRandomSeed();\n    clearNeoPixels();\n\n    if (*HF2_DBG_MAGIC_PTR == HF2_DBG_MAGIC_START) {\n        *HF2_DBG_MAGIC_PTR = 0;\n        // this will cause alignment fault at the first breakpoint\n        globals[0] = (TValue)1;\n    }\n}\n\n}\n",
      "platform.h": "#ifndef __PXT_PLATFORM_H\n#define __PXT_PLATFORM_H\n\n// This is specific for SAMD21, to be replaced in other Codal targets.\n\n#include \"CapTouchButton.h\"\n#include \"Image.h\"\n#include \"MbedTimer.h\"\n#include \"MbedI2C.h\"\n#include \"MbedPin.h\"\n#include \"MbedSPI.h\"\n#include \"MbedSerial.h\"\n#include \"MultiButton.h\"\n#include \"CPlayI2C.h\"\n\n#include \"SAMD21DMAC.h\"\n\n// Analog Pins, all SAMD21: PA02-PA11 PB00-PB09 (some pins not connected)\n// 2 ports times 32 pins in each\n#define DEV_NUM_PINS 64\n// pins marked with AIN and PTC in the data sheet\n#define DEV_ANALOG_PINS 0x3ff00000ffcULL\n\n#define PAGE_SIZE 256\n\n#define CODAL_DMAC SAMD21DMAC\n\n// this is codal::_mbed for both mbed and mbedos now\n#define CODAL_MBED codal::_mbed\n\n#define CODAL_I2C codal::CPlayI2C\n\n#ifndef IMAGE_BITS\n#define IMAGE_BITS 1\n#endif\n\n#ifdef JUST_FOR_DAL_D_TS_CPP_WILL_IGNORE\n#define PA00 0\n#define PA01 1\n#define PA02 2\n#define PA03 3\n#define PA04 4\n#define PA05 5\n#define PA06 6\n#define PA07 7\n#define PA08 8\n#define PA09 9\n#define PA10 10\n#define PA11 11\n#define PA12 12\n#define PA13 13\n#define PA14 14\n#define PA15 15\n#define PA16 16\n#define PA17 17\n#define PA18 18\n#define PA19 19\n#define PA20 20\n#define PA21 21\n#define PA22 22\n#define PA23 23\n#define PA24 24\n#define PA25 25\n#define PA26 26\n#define PA27 27\n#define PA28 28\n#define PA29 29\n#define PA30 30\n#define PA31 31\n#define PB00 32\n#define PB01 33\n#define PB02 34\n#define PB03 35\n#define PB04 36\n#define PB05 37\n#define PB06 38\n#define PB07 39\n#define PB08 40\n#define PB09 41\n#define PB10 42\n#define PB11 43\n#define PB12 44\n#define PB13 45\n#define PB14 46\n#define PB15 47\n#define PB16 48\n#define PB17 49\n#define PB18 50\n#define PB19 51\n#define PB20 52\n#define PB21 53\n#define PB22 54\n#define PB23 55\n#define PB24 56\n#define PB25 57\n#define PB26 58\n#define PB27 59\n#define PB28 60\n#define PB29 61\n#define PB30 62\n#define PB31 63\n#endif\n\n#endif\n",
      "pxt.h": "#ifndef __PXT_H\n#define __PXT_H\n\n#include \"pxtbase.h\"\n\n#include \"CodalConfig.h\"\n#include \"CodalHeapAllocator.h\"\n#include \"CodalDevice.h\"\n#include \"CodalDmesg.h\"\n#include \"ErrorNo.h\"\n#include \"Timer.h\"\n#include \"Matrix4.h\"\n#include \"CodalCompat.h\"\n#include \"CodalComponent.h\"\n#include \"ManagedType.h\"\n#include \"Event.h\"\n#include \"NotifyEvents.h\"\n#include \"Button.h\"\n#include \"CodalFiber.h\"\n#include \"MessageBus.h\"\n\nusing namespace codal;\n\n// codal::ManagedString compat\n#define MSTR(s) codal::ManagedString((s)->data, (s)->length)\n#define PSTR(s) mkString((s).toCharArray(), (s).length())\n\n#include \"pins.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"hf2.h\"\n#include \"hf2dbg.h\"\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n#include \"HIDMouse.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n#include \"HIDKeyboard.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n#include \"HIDJoystick.h\"\n#endif\n#endif\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nextern CodalUSB usb;\nextern HF2 hf2;\nextern WebHF2 webhf2;\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nextern USBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nextern USBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nextern USBHIDJoystick joystick;\n#endif\n#endif\n\n// Utility functions\nextern Event lastEvent;\nextern CODAL_TIMER devTimer;\nextern MessageBus devMessageBus;\nextern codal::CodalDevice device;\n} // namespace pxt\n\nnamespace jacdac {\nclass JDProxyDriver;\n} // namespace network\n\ntypedef jacdac::JDProxyDriver* JacDacDriverStatus;\n\n#define DEVICE_ID_BUTTON_SLIDE 3000\n#define DEVICE_ID_MICROPHONE 3001\n#define DEVICE_ID_FIRST_BUTTON 4000\n#define DEVICE_ID_FIRST_TOUCHBUTTON 4100\n\n#endif\n",
      "pxt.json": "{\n    \"name\": \"core\",\n    \"description\": \"The core library for Codal-based targets\",\n    \"files\": [\n        \"README.md\",\n        \"dal.d.ts\",\n        \"codal.cpp\",\n        \"usb.cpp\",\n        \"pxt.h\",\n        \"platform.h\",\n        \"platform.cpp\",\n        \"pxtcore.h\",\n        \"pins.h\",\n        \"pins.cpp\",\n        \"pinsAnalog.cpp\",\n        \"pinsDigital.cpp\",\n        \"pinsPWM.cpp\",\n        \"pins.ts\",\n        \"pinscompat.ts\",\n        \"control.cpp\",\n        \"i2c.cpp\",\n        \"i2c.ts\",\n        \"spi.cpp\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"hf2.cpp\",\n        \"hf2.h\",\n        \"hf2dbg.h\",\n        \"uf2format.h\",\n        \"uf2hid.h\",\n        \"ns.ts\",\n        \"dmac.cpp\",\n        \"dmac.h\",\n        \"timer.ts\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"yotta\": {\n        \"config\": {\n            \"codal\": {\n                \"component_count\": 64,\n                \"dmesg_buffer_size\": 1024\n            }\n        }\n    },\n    \"public\": true,\n    \"dalDTS\": {\n        \"includeDirs\": [\n            \"libraries/codal-core/inc\",\n            \"pxtapp\"\n        ],\n        \"excludePrefix\": [\n            \"USB_\",\n            \"REQUEST_\",\n            \"LIS3DH_\",\n            \"FXOS8700_\",\n            \"HF2_\",\n            \"PXT_REF_TAG_\",\n            \"MS_\",\n            \"SCSI_\"\n        ]\n    },\n    \"dependencies\": {\n        \"base\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.5.73\"\n    }\n}",
      "pxtcore.h": "#ifndef __PXTCORE_H\n#define __PXTCORE_H\n\n#include \"CodalDmesg.h\"\n#include \"CodalHeapAllocator.h\"\n\n#define itoa(a, b) codal::itoa(a, b)\n\n#define GC_GET_HEAP_SIZE() device_heap_size(0)\n#define xmalloc device_malloc\n#define xfree device_free\n\n#define GC_MAX_ALLOC_SIZE (16 * 1024)\n\n#endif\n",
      "pxtparts.json": "{\n    \"buttons\": {\n        \"simulationBehavior\": \"buttons\",\n        \"visual\": {\n            \"builtIn\": \"buttons\",\n            \"width\": 75,\n            \"height\": 45,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 45\n                }\n            ]\n        },\n        \"numberOfPins\": 2,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"Button.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"button\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"slideswitch\": {\n        \"numberOfPins\": 3,\n        \"simulationBehavior\": \"slideswitch\",\n        \"visual\": {\n            \"builtIn\": \"slideswitch\",\n            \"width\": 100,\n            \"height\": 100,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalRead,DigitalInOutPin.onPulsed,DigitalInOutPin.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"microservo\": {\n        \"simulationBehavior\": \"microservo\",\n        \"visual\": {\n            \"builtIn\": \"microservo\",\n            \"width\": 74.85,\n            \"height\": 200,\n            \"pinDistance\": 10,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 37,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 5\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"PwmOnlyPin.servoWrite,servos.Servo.setAngle,servos.Servo.run,servos.Servo.setPulse\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"led\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"analogled\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogOutPin.analogWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"photocell\": {\n        \"numberOfPins\": 3,\n        \"visual\": {\n            \"builtIn\": \"photocell\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"photocell\",\n        \"pinDefinitions\": [\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogInPin.analogRead\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace pins {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=pins::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Get the duration of the last pulse in microseconds. This function should be called from a\n     * ``onPulsed`` handler.\n     */\n    //% help=pins/pulse-duration blockGap=8\n    //% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n    //% weight=19 shim=pins::pulseDuration\n    function pulseDuration(): int32;\n}\n\n\ndeclare interface AnalogInPin {\n    /**\n     * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n     * @param name pin to write to\n     */\n    //% help=pins/analog-read weight=53\n    //% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n    //% blockNamespace=pins\n    //% parts=\"photocell\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=AnalogInPinMethods::analogRead\n    analogRead(): int32;\n}\n\n\ndeclare interface AnalogOutPin {\n    /**\n     * Set the connector value as analog. Value must be comprised between 0 and 1023.\n     * @param name pin name to write to\n     * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n     */\n    //% help=pins/analog-write weight=52\n    //% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n    //% blockNamespace=pins\n    //% parts=\"analogled\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.min=0 value.max=1023 shim=AnalogOutPinMethods::analogWrite\n    analogWrite(value: int32): void;\n}\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Read a pin or connector as either 0 or 1\n     * @param name pin to read from\n     */\n    //% help=pins/digital-read weight=61\n    //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n    //% parts=\"slideswitch\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::digitalRead\n    digitalRead(): boolean;\n\n    /**\n     * Set a pin or connector value to either 0 or 1.\n     * @param name pin to write to\n     * @param value value to set on the pin\n     */\n    //% help=pins/digital-write weight=60\n    //% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n    //% parts=\"led\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::digitalWrite\n    digitalWrite(value: boolean): void;\n\n    /**\n     * Make this pin a digital input, and create events where the timestamp is the duration\n     * that this pin was either ``high`` or ``low``.\n     */\n    //% help=pins/on-pulsed weight=16 blockGap=8\n    //% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% parts=\"slideswitch\" trackArgs=0\n    //% deprecated=1 hidden=1 shim=DigitalInOutPinMethods::onPulsed\n    onPulsed(pulse: PulseValue, body: () => void): void;\n\n    /**\n     * Register code to run when a pin event occurs. \n     */\n    //% help=pins/on-event weight=20 blockGap=8\n    //% blockId=pinsonevent block=\"on|pin %pin|%event\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% parts=\"slideswitch\" trackArgs=0 shim=DigitalInOutPinMethods::onEvent\n    onEvent(event: PinEvent, body: () => void): void;\n\n    /**\n     * Return the duration of a pulse in microseconds\n     * @param name the pin which measures the pulse\n     * @param value the value of the pulse (default high)\n     * @param maximum duration in micro-seconds\n     */\n    //% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (us)\"\n    //% weight=18 blockGap=8\n    //% help=\"pins/pulse-in\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4 maxDuration.defl=2000000 shim=DigitalInOutPinMethods::pulseIn\n    pulseIn(value: PulseValue, maxDuration?: int32): int32;\n\n    /**\n     * Set the pull direction of this pin.\n     * @param name pin to set the pull mode on\n     * @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n     */\n    //% help=pins/set-pull weight=17 blockGap=8\n    //% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::setPull\n    setPull(pull: PinPullMode): void;\n}\n\n\ndeclare interface PwmPin {}\n\n\ndeclare interface PwmOnlyPin {\n    /**\n     * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n     * **microseconds** or `1/1000` milliseconds.\n     * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n     * no effect.\n     * @param name analog pin to set period to\n     * @param micros period in micro seconds. eg:20000\n     */\n    //% help=pins/analog-set-period weight=51\n    //% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::analogSetPeriod\n    analogSetPeriod(period: int32): void;\n\n    /**\n     * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n     * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n     * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n     * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n     * @param name pin to write to\n     * @param value angle or rotation speed\n     */\n    //% help=pins/servo-write weight=41 group=\"Servo\"\n    //% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n    //% parts=microservo trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.defl=90 shim=PwmOnlyPinMethods::servoWrite\n    servoWrite(value?: int32): void;\n\n    /**\n     * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n     * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n     * @param name pin name\n     * @param duration pulse duration in micro seconds, eg:1500\n     */\n    //% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n    //% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n    //% parts=microservo blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::servoSetPulse\n    servoSetPulse(duration: int32): void;\n}\ndeclare namespace control {\n\n    /**\n     * Announce that an event happened to registered handlers.\n     * @param src ID of the MicroBit Component that generated the event\n     * @param value Component specific code indicating the cause of the event.\n     */\n    //% weight=21 blockGap=12 blockId=\"control_raise_event\"\n    //% help=control/raise-event\n    //% block=\"raise event|from %src|with value %value\" blockExternalInputs=1 shim=control::raiseEvent\n    function raiseEvent(src: int32, value: int32): void;\n\n    /**\n     * Determine the version of system software currently running.\n     */\n    //% blockId=\"control_device_dal_version\" block=\"device dal version\"\n    //% help=control/device-dal-version shim=control::deviceDalVersion\n    function deviceDalVersion(): string;\n\n    /**\n     * Allocates the next user notification event\n     */\n    //% help=control/allocate-notify-event shim=control::allocateNotifyEvent\n    function allocateNotifyEvent(): int32;\n\n    /** Write a message to DMESG debugging buffer. */\n    //% shim=control::dmesg\n    function dmesg(s: string): void;\n\n    /** Write a message and value (pointer) to DMESG debugging buffer. */\n    //% shim=control::dmesgPtr\n    function dmesgPtr(str: string, ptr: Object): void;\n}\ndeclare namespace pins {\n\n    /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=pins::i2cReadBuffer\n    function i2cReadBuffer(address: int32, size: int32, repeat?: boolean): Buffer;\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=pins::i2cWriteBuffer\n    function i2cWriteBuffer(address: int32, buf: Buffer, repeat?: boolean): int32;\n}\ndeclare namespace pins {\n\n    /**\n     * Write to the SPI slave and return the response\n     * @param value Data to be sent to the SPI slave\n     */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\" shim=pins::spiWrite\n    function spiWrite(value: int32): int32;\n\n    /**\n     * Writes a given command to SPI bus, and afterwards reads the response.\n     */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\" shim=pins::spiTransfer\n    function spiTransfer(command: Buffer, response: Buffer): void;\n\n    /**\n     * Sets the SPI frequency\n     * @param frequency the clock frequency, eg: 1000000\n     */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\" shim=pins::spiFrequency\n    function spiFrequency(frequency: int32): void;\n\n    /**\n     * Sets the SPI mode and bits\n     * @param mode the mode, eg: 3\n     */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\" shim=pins::spiMode\n    function spiMode(mode: int32): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "spi.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n    static codal::SPI *spi = NULL;\n    static void initSPI() {\n        if (NULL == spi)\n            spi = new CODAL_SPI(*LOOKUP_PIN(MOSI), *LOOKUP_PIN(MISO), *LOOKUP_PIN(SCK));\n    }\n\n    /**\n    * Write to the SPI slave and return the response\n    * @param value Data to be sent to the SPI slave\n    */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\"\n    int spiWrite(int value) {\n        initSPI();\n        return spi->write(value);\n    }\n\n    /**\n    * Writes a given command to SPI bus, and afterwards reads the response.\n    */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\"\n    void spiTransfer(Buffer command, Buffer response) {\n        initSPI();\n        auto cdata = NULL == command ? NULL : command->data;\n        auto clength = NULL == command ? 0 : command->length;\n        auto rdata = NULL == response ? NULL : response->data;\n        auto rlength = NULL == response ? 0 : response->length;\n        spi->transfer(cdata, clength, rdata, rlength);\n    }\n\n    /**\n    * Sets the SPI frequency\n    * @param frequency the clock frequency, eg: 1000000\n    */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\"\n    void spiFrequency(int frequency) {\n        initSPI();\n        spi->setFrequency(frequency);\n    }\n\n    /**\n    * Sets the SPI mode and bits\n    * @param mode the mode, eg: 3\n    */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\"\n    void spiMode(int mode) {\n        initSPI();\n        spi->setMode(mode);        \n    }\n}\n",
      "test.ts": "let i = 1\nlet f = 0.5\nlet plus = i + f\nlet minus = i - f\n\nlet r = Math.random()\nlet ri = Math.randomRange(5, 10)\n\nforever(() => {\n    pause(100)\n})\n",
      "timer.ts": "namespace control {\n    /**\n     * A timer\n     */\n    //% fixedInstances\n    export class Timer {\n        start: number;\n\n        constructor() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Gets the elapsed time in millis since the last reset\n         */\n        //% blockId=timerMillis block=\"%timer|millis\"\n        millis(): number {\n            return control.millis() - this.start;\n        }\n\n        /**\n         * Gets the elapsed time in seconds since the last reset\n         */\n        //% blockId=timerSeconds block=\"%timer|seconds\"\n        seconds(): number {\n            return this.millis() / 1000;\n        }\n\n        /**\n         * Resets the timer\n         */\n        //% blockId=timerRest block=\"%timer|reset\"\n        reset() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Pauses until the timer reaches the given amount of milliseconds\n         * @param ms how long to pause for, eg: 5, 100, 200, 500, 1000, 2000\n         */\n        //% blockId=timerPauseUntil block=\"%timer|pause until (ms) %ms\"\n        pauseUntil(ms: number) {\n            const remaining = this.millis() - ms;\n            pause(Math.max(0, remaining));\n        }\n    }\n\n    //% whenUsed fixedInstance block=\"timer 1\"\n    export const timer1 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 2\"\n    export const timer2 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 3\"\n    export const timer3 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 4\"\n    export const timer4 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 5\"\n    export const timer5 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 6\"\n    export const timer6 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 7\"\n    export const timer7 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 8\"\n    export const timer8 = new Timer();\n}",
      "uf2format.h": "#ifndef UF2FORMAT_H\n#define UF2FORMAT_H 1\n\n#include <stdint.h>\n#include <stdbool.h>\n\n// All entries are little endian.\n\n// if you increase that, you will also need to update the linker script file\n#define APP_START_ADDRESS 0x00002000\n\n#define UF2_MAGIC_START0 0x0A324655UL // \"UF2\\n\"\n#define UF2_MAGIC_START1 0x9E5D5157UL // Randomly selected\n#define UF2_MAGIC_END 0x0AB16F30UL    // Ditto\n\n// If set, the block is \"comment\" and should not be flashed to the device\n#define UF2_FLAG_NOFLASH 0x00000001\n\ntypedef struct {\n    // 32 byte header\n    uint32_t magicStart0;\n    uint32_t magicStart1;\n    uint32_t flags;\n    uint32_t targetAddr;\n    uint32_t payloadSize;\n    uint32_t blockNo;\n    uint32_t numBlocks;\n    uint32_t reserved;\n\n    // raw data;\n    uint8_t data[476];\n\n    // store magic also at the end to limit damage from partial block reads\n    uint32_t magicEnd;\n} UF2_Block;\n\ntypedef struct {\n    uint8_t version;\n    uint8_t ep_in;\n    uint8_t ep_out;\n    uint8_t reserved0;\n    uint32_t cbw_tag;\n    uint32_t blocks_remaining;\n    uint8_t *buffer;\n} UF2_HandoverArgs;\n\ntypedef void (*UF2_MSC_Handover_Handler)(UF2_HandoverArgs *handover);\ntypedef void (*UF2_HID_Handover_Handler)(int ep);\n\n// this is required to be exactly 16 bytes long by the linker script\ntypedef struct {\n    void *reserved0;\n    UF2_HID_Handover_Handler handoverHID;\n    UF2_MSC_Handover_Handler handoverMSC;\n    const char *info_uf2;\n} UF2_BInfo;\n\n#define UF2_BINFO ((UF2_BInfo *)(APP_START_ADDRESS - sizeof(UF2_BInfo)))\n\nstatic inline bool is_uf2_block(void *data) {\n    UF2_Block *bl = (UF2_Block *)data;\n    return bl->magicStart0 == UF2_MAGIC_START0 && bl->magicStart1 == UF2_MAGIC_START1 &&\n           bl->magicEnd == UF2_MAGIC_END;\n}\n\nstatic inline bool in_uf2_bootloader_space(const void *addr) {\n    return 0xb4 <= (uint32_t)addr && (uint32_t)addr < APP_START_ADDRESS;\n}\n\nstatic inline const char *uf2_info(void) {\n    if (in_uf2_bootloader_space(UF2_BINFO->info_uf2))\n        return UF2_BINFO->info_uf2;\n    return \"N/A\";\n}\n\n#ifdef UF2_DEFINE_HANDOVER\nstatic inline void hf2_handover(uint8_t ep) {\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_HID_Handover_Handler fn = UF2_BINFO->handoverHID;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        // Pass control to bootloader; never returns\n        fn(ep & 0xf);\n    }\n}\n\nstatic inline void check_uf2_handover(uint8_t *buffer, uint32_t blocks_remaining, uint8_t ep_in,\n                                      uint8_t ep_out, uint32_t cbw_tag) {\n    if (!is_uf2_block(buffer))\n        return;\n\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_MSC_Handover_Handler fn = UF2_BINFO->handoverMSC;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        UF2_HandoverArgs hand = {\n            1, ep_in, ep_out, 0, cbw_tag, blocks_remaining, buffer,\n        };\n        // Pass control to bootloader; never returns\n        fn(&hand);\n    }\n}\n#endif\n\n#endif\n",
      "uf2hid.h": "#ifndef UF2_HID_H\n#define UF2_HID_H 1\n\n#define HF2_CMD_BININFO 0x0001\n// no arguments\n#define HF2_MODE_BOOTLOADER 0x01\n#define HF2_MODE_USERSPACE 0x02\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n};\n\n#define HF2_CMD_INFO 0x0002\n// no arguments\n// results is utf8 character array\n\n#define HF2_CMD_RESET_INTO_APP 0x0003\n// no arguments, no result\n\n#define HF2_CMD_RESET_INTO_BOOTLOADER 0x0004\n// no arguments, no result\n\n#define HF2_CMD_START_FLASH 0x0005\n// no arguments, no result\n\n#define HF2_CMD_WRITE_FLASH_PAGE 0x0006\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[0];\n};\n// no result\n\n#define HF2_CMD_CHKSUM_PAGES 0x0007\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[0 /* num_pages */];\n};\n\n#define HF2_CMD_READ_WORDS 0x0008\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[0 /* num_words */];\n};\n\n#define HF2_CMD_WRITE_WORDS 0x0009\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[0 /* num_words */];\n};\n// no result\n\n#define HF2_CMD_DMESG 0x0010\n// no arguments\n// results is utf8 character array\n\ntypedef struct {\n    uint32_t command_id;\n    uint16_t tag;\n    uint8_t reserved0;\n    uint8_t reserved1;\n\n    union {\n        struct HF2_WRITE_FLASH_PAGE_Command write_flash_page;\n        struct HF2_WRITE_WORDS_Command write_words;\n        struct HF2_READ_WORDS_Command read_words;\n        struct HF2_CHKSUM_PAGES_Command chksum_pages;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Command;\n\ntypedef struct {\n    union {\n        uint32_t eventId;\n        struct {\n            uint16_t tag;\n            union {\n                struct {\n                    uint8_t status;\n                    uint8_t status_info;\n                };\n                uint16_t status16;\n            };\n        };\n    };\n    union {\n        struct HF2_BININFO_Result bininfo;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Response;\n\n#define HF2_FLAG_SERIAL_OUT 0x80\n#define HF2_FLAG_SERIAL_ERR 0xC0\n#define HF2_FLAG_CMDPKT_LAST 0x40\n#define HF2_FLAG_CMDPKT_BODY 0x00\n#define HF2_FLAG_MASK 0xC0\n#define HF2_SIZE_MASK 63\n\n#define HF2_STATUS_OK 0x00\n#define HF2_STATUS_INVALID_CMD 0x01\n\n#endif\n",
      "usb.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nCodalUSB usb;\n\n// share the buffer; we will crash anyway if someone talks to us over both at the same time\nHF2_Buffer hf2buf;\nHF2 hf2(hf2buf);\nWebHF2 webhf2(hf2buf);\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nUSBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nUSBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nUSBHIDJoystick joystick;\n#endif\n\nstatic const DeviceDescriptor device_desc = {\n    0x12,            // bLength\n    0x01,            // bDescriptorType\n    0x0210,          // bcdUSBL\n\n    // Class etc specified per-interface\n    0x00, 0x00, 0x00,\n\n    0x40,            // bMaxPacketSize0\n    0x03EB, // Atmel\n    0x2402, // Example device\n    0x4202,          // bcdDevice - leave unchanged for the HF2 to work\n    0x01,            // iManufacturer\n    0x02,            // iProduct\n    0x03,            // SerialNumber\n    0x01             // bNumConfigs\n};\n\n// TODO extract these from uf2_info()?\nstatic const char *string_descriptors[] = {\n    \"Example Corp.\",\n    \"PXT Device\",\n    \"42424242\",\n};\n\nstatic void start_usb() {\n    // start USB with a delay, so that user code can add new interfaces if needed\n    // (eg USB HID keyboard, or MSC)\n    fiber_sleep(100);\n    usb.start();\n}\n\nvoid usb_init() {\n    usb.stringDescriptors = string_descriptors;\n    usb.deviceDescriptor = &device_desc;\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n    usb.add(mouse);\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n    usb.add(keyboard);\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n    usb.add(joystick);\n#endif\n    usb.add(hf2);\n    usb.add(webhf2);\n    create_fiber(start_usb);\n}\n\n\n#else\nvoid usb_init() {}\n#endif\n\nstatic void (*pSendToUART)(const char *data, int len) = NULL;\nvoid setSendToUART(void (*f)(const char *, int)) {\n    pSendToUART = f;\n}\n\nvoid sendSerial(const char *data, int len) {\n#if CONFIG_ENABLED(DEVICE_USB)\n    hf2.sendSerial(data, len);\n    webhf2.sendSerial(data, len);\n#endif    \n    if (pSendToUART)\n        pSendToUART(data, len);\n}\n\nvoid dumpDmesg() {\n    sendSerial(\"\\nDMESG:\\n\", 8);\n    sendSerial(codalLogStore.buffer, codalLogStore.ptr);\n    sendSerial(\"\\n\\n\", 2);\n}\n}\n"
    },
    "core---stm32bluepill": {
      "README.md": "# core\n\nThe core library for Codal-based targets.\n\n",
      "codal.cpp": "#include \"pxt.h\"\n\nvoid cpu_clock_init(void);\n\nPXT_ABI(__aeabi_dadd)\nPXT_ABI(__aeabi_dcmplt)\nPXT_ABI(__aeabi_dcmpgt)\nPXT_ABI(__aeabi_dsub)\nPXT_ABI(__aeabi_ddiv)\nPXT_ABI(__aeabi_dmul)\n\n#define PXT_COMM_BASE 0x20001000 // 4k in\n\nnamespace pxt {\n\nvoid platform_init();\nvoid usb_init();\n\n// The first two word are used to tell the bootloader that a single reset should start the\n// bootloader and the MSD device, not us.\n// The rest is reserved for partial flashing checksums.\n__attribute__((section(\".binmeta\"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {\n    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n};\n\nCODAL_TIMER devTimer;\nEvent lastEvent;\nMessageBus devMessageBus;\ncodal::CodalDevice device;\n\nstruct FreeList {\n    FreeList *next;\n};\n\nstatic void commInit() {\n    int commSize = bytecode[20];\n    if (!commSize)\n        return;\n\n    FreeList *head = NULL;\n    void *commBase = (void *)PXT_COMM_BASE;\n    for (;;) {\n        void *p = xmalloc(4);\n        // assume 4 byte alloc header; if we're not hitting 8 byte alignment, try allocating 8\n        // bytes, not 4 without the volatile, gcc assumes 8 byte alignment on malloc()\n        volatile unsigned hp = (unsigned)p;\n        if (hp & 4) {\n            xfree(p);\n            p = xmalloc(8);\n        }\n        if (p == commBase) {\n            xfree(p);\n            // allocate the comm section; this is never freed\n            p = xmalloc(commSize);\n            if (p != commBase)\n                oops(10);\n            break;\n        }\n        if (p > commBase)\n            oops(11);\n        auto f = (FreeList *)p;\n        f->next = head;\n        head = f;\n    }\n    // free all the filler stuff\n    while (head) {\n        auto p = head;\n        head = head->next;\n        xfree(p);\n    }\n}\n\nstatic void initCodal() {\n    cpu_clock_init();\n\n    commInit();\n\n    // Bring up fiber scheduler.\n    scheduler_init(devMessageBus);\n\n    // We probably don't need that - components are initialized when one obtains\n    // the reference to it.\n    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,\n    // &CircuitPlayground::onListenerRegisteredEvent);\n\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {\n        if (CodalComponent::components[i])\n            CodalComponent::components[i]->init();\n    }\n\n    usb_init();\n\n    auto led = LOOKUP_PIN(LED);\n    if (led) {\n        led->setDigitalValue(0);\n    }\n}\n\n// ---------------------------------------------------------------------------\n// An adapter for the API expected by the run-time.\n// ---------------------------------------------------------------------------\n\n// We have the invariant that if [dispatchEvent] is registered against the DAL\n// for a given event, then [handlersMap] contains a valid entry for that\n// event.\nvoid dispatchEvent(Event e) {\n    lastEvent = e;\n\n    auto curr = findBinding(e.source, e.value);\n    auto value = fromInt(e.value);\n    if (curr)\n        runAction1(curr->action, value);\n\n    curr = findBinding(e.source, DEVICE_EVT_ANY);\n    if (curr)\n        runAction1(curr->action, value);\n}\n\nvoid registerWithDal(int id, int event, Action a, int flags) {\n    // first time?\n    if (!findBinding(id, event))\n        devMessageBus.listen(id, event, dispatchEvent, flags);\n    setBinding(id, event, a);\n}\n\nvoid fiberDone(void *a) {\n    decr((Action)a);\n    unregisterGCPtr((Action)a);\n    release_fiber();\n}\n\nvoid releaseFiber() {\n    release_fiber();\n}\n\nvoid sleep_ms(unsigned ms) {\n    fiber_sleep(ms);\n}\n\nvoid sleep_us(uint64_t us) {\n    target_wait_us(us);\n}\n\nvoid forever_stub(void *a) {\n    while (true) {\n        runAction0((Action)a);\n        fiber_sleep(20);\n    }\n}\n\nvoid runForever(Action a) {\n    if (a != 0) {\n        incr(a);\n        registerGCPtr(a);\n        create_fiber(forever_stub, (void *)a);\n    }\n}\n\nvoid runInParallel(Action a) {\n    if (a != 0) {\n        incr(a);\n        registerGCPtr(a);\n        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);\n    }\n}\n\nvoid waitForEvent(int id, int event) {\n    fiber_wait_for_event(id, event);\n}\n\nvoid initRuntime() {\n    initCodal();\n    platform_init();\n}\n\n//%\nunsigned afterProgramPage() {\n    unsigned ptr = (unsigned)&bytecode[0];\n    ptr += programSize();\n    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);\n    return ptr;\n}\n\nint getSerialNumber() {\n    return device.getSerialNumber();\n}\n\nint current_time_ms() {\n    return system_timer_current_time();\n}\n\n#ifdef PXT_GC\nThreadContext *getThreadContext() {\n    return (ThreadContext *)currentFiber->user_data;\n}\n\nvoid setThreadContext(ThreadContext *ctx) {\n    currentFiber->user_data = ctx;\n}\n\nstatic void *threadAddressFor(codal::Fiber *fib, void *sp) {\n    if (fib == currentFiber)\n        return sp;\n    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));\n}\n\nvoid gcProcessStacks(int flags) {\n    int numFibers = codal::list_fibers(NULL);\n    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);\n    int num2 = codal::list_fibers(fibers);\n    if (numFibers != num2)\n        oops(12);\n    int cnt = 0;\n\n    for (int i = 0; i < numFibers; ++i) {\n        auto fib = fibers[i];\n        auto ctx = (ThreadContext *)fib->user_data;\n        if (!ctx)\n            continue;\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(fib, seg->top);\n            auto end = (TValue *)threadAddressFor(fib, seg->bottom);\n            if (flags & 2)\n                DMESG(\"RS%d:%p/%d\", cnt++, ptr, end - ptr);\n            // VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n    xfree(fibers);\n}\n#endif\n\n} // namespace pxt\n",
      "control.cpp": "#include \"pxt.h\"\n\nnamespace control {\n\n/**\n * Announce that an event happened to registered handlers.\n * @param src ID of the MicroBit Component that generated the event\n * @param value Component specific code indicating the cause of the event.\n */\n//% weight=21 blockGap=12 blockId=\"control_raise_event\"\n//% help=control/raise-event\n//% block=\"raise event|from %src|with value %value\" blockExternalInputs=1\nvoid raiseEvent(int src, int value) {\n    Event evt(src, value);\n}\n\n/**\n* Determine the version of system software currently running.\n*/\n//% blockId=\"control_device_dal_version\" block=\"device dal version\"\n//% help=control/device-dal-version\nString deviceDalVersion() {\n    return mkString(device.getVersion());\n}\n\n/**\n* Allocates the next user notification event\n*/\n//% help=control/allocate-notify-event\nint allocateNotifyEvent() {\n    return ::allocateNotifyEvent();\n}\n\n/** Write a message to DMESG debugging buffer. */\n//%\nvoid dmesg(String s) {\n    DMESG(\"# %s\", s->data);\n}\n\n/** Write a message and value (pointer) to DMESG debugging buffer. */\n//%\nvoid dmesgPtr(String str, Object_ ptr) {\n    DMESG(\"# %s: %p\", str->data, ptr);\n}\n\n\n}\n",
      "dal.d.ts": "// Auto-generated. Do not edit.\ndeclare const enum DAL {\n    // /libraries/codal-core/inc/JACDAC/JACDAC.h\n    JD_VERSION = 2,\n    JD_SERIAL_MAX_BUFFERS = 10,\n    JD_SERIAL_RECEIVING = 2,\n    JD_SERIAL_TRANSMITTING = 4,\n    JD_SERIAL_TX_DRAIN_ENABLE = 8,\n    JD_SERIAL_BUS_RISE = 16,\n    JD_SERIAL_EVT_DATA_READY = 1,\n    JD_SERIAL_EVT_BUS_ERROR = 2,\n    JD_SERIAL_EVT_DRAIN = 3,\n    JD_SERIAL_EVT_RX_TIMEOUT = 4,\n    JD_SERIAL_EVT_BUS_CONNECTED = 5,\n    JD_SERIAL_EVT_BUS_DISCONNECTED = 6,\n    JD_SERIAL_HEADER_SIZE = 4,\n    JD_SERIAL_DATA_SIZE = 32,\n    JD_SERIAL_PACKET_SIZE = 36,\n    JD_SERIAL_MAXIMUM_BUFFERS = 10,\n    JD_SERIAL_DMA_TIMEOUT = 2,\n    JD_SERIAL_MAX_BAUD = 1000000,\n    JD_SERIAL_TX_MAX_BACKOFF = 4000,\n    JD_SERIAL_TX_MIN_BACKOFF = 1000,\n    Receiving = 0,\n    Transmitting = 1,\n    High = 2,\n    Low = 3,\n    Baud1M = 1,\n    Baud500K = 2,\n    Baud250K = 4,\n    Baud125K = 8,\n    // /libraries/codal-core/inc/JACDAC/JDAccelerometerDriver.h\n    JD_ACCEL_EVT_SEND_DATA = 1,\n    // /libraries/codal-core/inc/JACDAC/JDBridgeDriver.h\n    JD_BRIDGE_HISTORY_SIZE = 8,\n    // /libraries/codal-core/inc/JACDAC/JDClasses.h\n    STATIC_CLASS_START = 0,\n    STATIC_CLASS_END = 16777215,\n    DYNAMIC_CLASS_END = 4294967295,\n    JD_DRIVER_CLASS_CODAL_START = 0,\n    JD_DRIVER_CLASS_CODAL_END = 2000,\n    JD_DRIVER_CLASS_MAKECODE_START = 2000,\n    JD_DRIVER_CLASS_MAKECODE_END = 4000,\n    JD_DRIVER_CLASS_CONTROL = 0,\n    JD_DRIVER_CLASS_JOYSTICK = 1,\n    JD_DRIVER_CLASS_MESSAGE_BUS = 2,\n    JD_DRIVER_CLASS_BRIDGE = 3,\n    JD_DRIVER_CLASS_BUTTON = 4,\n    JD_DRIVER_CLASS_PIN = 5,\n    JD_DRIVER_CLASS_RELIABILITY_TESTER = 6,\n    JD_DRIVER_CLASS_ACCELEROMETER = 7,\n    JD_DRIVER_CLASS_CAPTOUCH_BUTTON = 8,\n    // /libraries/codal-core/inc/JACDAC/JDMessageBusDriver.h\n    JD_MESSAGEBUS_TYPE_EVENT = 1,\n    JD_MESSAGEBUS_TYPE_LISTEN = 2,\n    // /libraries/codal-core/inc/JACDAC/JDPinDriver.h\n    SetDigital = 0,\n    SetAnalog = 1,\n    SetServo = 2,\n    // /libraries/codal-core/inc/JACDAC/JDProtocol.h\n    JD_DRIVER_EVT_CONNECTED = 65520,\n    JD_DRIVER_EVT_DISCONNECTED = 65521,\n    JD_DRIVER_EVT_PAIRED = 65522,\n    JD_DRIVER_EVT_UNPAIRED = 65523,\n    JD_DRIVER_EVT_PAIR_REJECTED = 65524,\n    JD_DRIVER_EVT_PAIRING_RESPONSE = 65525,\n    JD_DEVICE_FLAGS_LOCAL = 32768,\n    JD_DEVICE_FLAGS_REMOTE = 16384,\n    JD_DEVICE_FLAGS_BROADCAST = 8192,\n    JD_DEVICE_FLAGS_PAIR = 4096,\n    JD_DEVICE_DRIVER_MODE_MSK = 61440,\n    JD_DEVICE_FLAGS_PAIRABLE = 2048,\n    JD_DEVICE_FLAGS_PAIRED = 1024,\n    JD_DEVICE_FLAGS_PAIRING = 512,\n    JD_DEVICE_FLAGS_INITIALISED = 128,\n    JD_DEVICE_FLAGS_INITIALISING = 64,\n    JD_DEVICE_FLAGS_CP_SEEN = 32,\n    JD_DEVICE_FLAGS_BROADCAST_MAP = 16,\n    JD_LOGIC_DRIVER_MAX_FILTERS = 20,\n    JD_LOGIC_DRIVER_TIMEOUT = 254,\n    JD_LOGIC_ADDRESS_ALLOC_TIME = 254,\n    JD_LOGIC_DRIVER_CTRLPACKET_TIME = 112,\n    JD_LOGIC_DRIVER_EVT_CHANGED = 2,\n    CONTROL_JD_FLAGS_RESERVED = 32768,\n    CONTROL_JD_FLAGS_PAIRING_MODE = 16384,\n    CONTROL_JD_FLAGS_PAIRABLE = 8192,\n    CONTROL_JD_FLAGS_PAIRED = 4096,\n    CONTROL_JD_FLAGS_CONFLICT = 2048,\n    CONTROL_JD_FLAGS_UNCERTAIN = 1024,\n    CONTROL_JD_FLAGS_NACK = 512,\n    CONTROL_JD_FLAGS_ACK = 256,\n    CONTROL_JD_TYPE_HELLO = 1,\n    CONTROL_JD_TYPE_PAIRING_REQUEST = 2,\n    JD_PROTOCOL_EVT_SEND_CONTROL = 1,\n    JD_PROTOCOL_DRIVER_ARRAY_SIZE = 20,\n    VirtualDriver = 16384,\n    PairedDriver = 12288,\n    HostDriver = 32768,\n    PairableHostDriver = 34816,\n    BroadcastDriver = 40960,\n    SnifferDriver = 24576,\n    // /libraries/codal-core/inc/JACDAC/JDReliabilityTester.h\n    RELIABILITY_TEST_FINISHED = 7,\n    RELIABILITY_STATUS_TEST_IN_PROGRESS = 2,\n    RELIABILITY_STATUS_TEST_READY = 4,\n    RELIABILITY_STATUS_TEST_FINISHED = 8,\n    // /libraries/codal-core/inc/core/CodalComponent.h\n    DEVICE_ID_BUTTON_A = 1,\n    DEVICE_ID_BUTTON_B = 2,\n    DEVICE_ID_BUTTON_AB = 3,\n    DEVICE_ID_BUTTON_RESET = 4,\n    DEVICE_ID_ACCELEROMETER = 5,\n    DEVICE_ID_COMPASS = 6,\n    DEVICE_ID_DISPLAY = 7,\n    DEVICE_ID_THERMOMETER = 8,\n    DEVICE_ID_RADIO = 9,\n    DEVICE_ID_RADIO_DATA_READY = 10,\n    DEVICE_ID_MULTIBUTTON_ATTACH = 11,\n    DEVICE_ID_SERIAL = 12,\n    DEVICE_ID_GESTURE = 13,\n    DEVICE_ID_SYSTEM_TIMER = 14,\n    DEVICE_ID_SCHEDULER = 15,\n    DEVICE_ID_COMPONENT = 16,\n    DEVICE_ID_LIGHT_SENSOR = 17,\n    DEVICE_ID_TOUCH_SENSOR = 18,\n    DEVICE_ID_SYSTEM_DAC = 19,\n    DEVICE_ID_SYSTEM_MICROPHONE = 20,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR = 21,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL = 22,\n    DEVICE_ID_MSC = 23,\n    DEVICE_ID_SPI = 24,\n    DEVICE_ID_DISTANCE = 25,\n    DEVICE_ID_GYROSCOPE = 26,\n    DEVICE_ID_HUMIDITY = 27,\n    DEVICE_ID_PRESSURE = 28,\n    DEVICE_ID_JACDAC0 = 29,\n    DEVICE_ID_JACDAC1 = 30,\n    DEVICE_ID_JACDAC_PROTOCOL = 31,\n    DEVICE_ID_JACKROUTER = 32,\n    DEVICE_ID_GAME_ENGINE = 33,\n    DEVICE_ID_GAME_STATE_MANAGER = 34,\n    DEVICE_ID_SPRITE = 35,\n    DEVICE_ID_SINGLE_WIRE_SERIAL = 36,\n    DEVICE_ID_IO_P0 = 100,\n    DEVICE_ID_MESSAGE_BUS_LISTENER = 1021,\n    DEVICE_ID_NOTIFY_ONE = 1022,\n    DEVICE_ID_NOTIFY = 1023,\n    DEVICE_ID_BUTTON_UP = 2000,\n    DEVICE_ID_BUTTON_DOWN = 2001,\n    DEVICE_ID_BUTTON_LEFT = 2002,\n    DEVICE_ID_BUTTON_RIGHT = 2003,\n    DEVICE_ID_JD_DYNAMIC_ID = 3000,\n    DEVICE_COMPONENT_RUNNING = 4096,\n    DEVICE_COMPONENT_STATUS_SYSTEM_TICK = 8192,\n    DEVICE_COMPONENT_STATUS_IDLE_TICK = 16384,\n    DEVICE_COMPONENT_LISTENERS_CONFIGURED = 1,\n    DEVICE_COMPONENT_EVT_SYSTEM_TICK = 1,\n    // /libraries/codal-core/inc/core/CodalFiber.h\n    DEVICE_SCHEDULER_RUNNING = 1,\n    DEVICE_SCHEDULER_IDLE = 2,\n    DEVICE_FIBER_FLAG_FOB = 1,\n    DEVICE_FIBER_FLAG_PARENT = 2,\n    DEVICE_FIBER_FLAG_CHILD = 4,\n    DEVICE_FIBER_FLAG_DO_NOT_PAGE = 8,\n    DEVICE_SCHEDULER_EVT_TICK = 1,\n    DEVICE_SCHEDULER_EVT_IDLE = 2,\n    // /libraries/codal-core/inc/core/CodalListener.h\n    MESSAGE_BUS_LISTENER_PARAMETERISED = 1,\n    MESSAGE_BUS_LISTENER_METHOD = 2,\n    MESSAGE_BUS_LISTENER_BUSY = 4,\n    MESSAGE_BUS_LISTENER_REENTRANT = 8,\n    MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY = 16,\n    MESSAGE_BUS_LISTENER_DROP_IF_BUSY = 32,\n    MESSAGE_BUS_LISTENER_NONBLOCKING = 64,\n    MESSAGE_BUS_LISTENER_URGENT = 128,\n    MESSAGE_BUS_LISTENER_DELETING = 32768,\n    MESSAGE_BUS_LISTENER_IMMEDIATE = 192,\n    // /libraries/codal-core/inc/core/ErrorNo.h\n    DEVICE_OK = 0,\n    DEVICE_INVALID_PARAMETER = -1001,\n    DEVICE_NOT_SUPPORTED = -1002,\n    DEVICE_CALIBRATION_IN_PROGRESS = -1003,\n    DEVICE_CALIBRATION_REQUIRED = -1004,\n    DEVICE_NO_RESOURCES = -1005,\n    DEVICE_BUSY = -1006,\n    DEVICE_CANCELLED = -1007,\n    DEVICE_I2C_ERROR = -1010,\n    DEVICE_SERIAL_IN_USE = -1011,\n    DEVICE_NO_DATA = -1012,\n    DEVICE_NOT_IMPLEMENTED = -1013,\n    DEVICE_SPI_ERROR = -1014,\n    DEVICE_INVALID_STATE = -1015,\n    DEVICE_OOM = 20,\n    DEVICE_HEAP_ERROR = 30,\n    DEVICE_NULL_DEREFERENCE = 40,\n    DEVICE_USB_ERROR = 50,\n    DEVICE_HARDWARE_CONFIGURATION_ERROR = 90,\n    // /libraries/codal-core/inc/core/NotifyEvents.h\n    DISPLAY_EVT_FREE = 1,\n    CODAL_SERIAL_EVT_TX_EMPTY = 2,\n    BLE_EVT_SERIAL_TX_EMPTY = 3,\n    ARCADE_PLAYER_JOIN_RESULT = 4,\n    DEVICE_NOTIFY_USER_EVENT_BASE = 1024,\n    // /libraries/codal-core/inc/driver-models/AbstractButton.h\n    DEVICE_BUTTON_EVT_DOWN = 1,\n    DEVICE_BUTTON_EVT_UP = 2,\n    DEVICE_BUTTON_EVT_CLICK = 3,\n    DEVICE_BUTTON_EVT_LONG_CLICK = 4,\n    DEVICE_BUTTON_EVT_HOLD = 5,\n    DEVICE_BUTTON_EVT_DOUBLE_CLICK = 6,\n    DEVICE_BUTTON_LONG_CLICK_TIME = 1000,\n    DEVICE_BUTTON_HOLD_TIME = 1500,\n    DEVICE_BUTTON_STATE = 1,\n    DEVICE_BUTTON_STATE_HOLD_TRIGGERED = 2,\n    DEVICE_BUTTON_STATE_CLICK = 4,\n    DEVICE_BUTTON_STATE_LONG_CLICK = 8,\n    DEVICE_BUTTON_SIGMA_MIN = 0,\n    DEVICE_BUTTON_SIGMA_MAX = 12,\n    DEVICE_BUTTON_SIGMA_THRESH_HI = 8,\n    DEVICE_BUTTON_SIGMA_THRESH_LO = 2,\n    DEVICE_BUTTON_DOUBLE_CLICK_THRESH = 50,\n    DEVICE_BUTTON_SIMPLE_EVENTS = 0,\n    DEVICE_BUTTON_ALL_EVENTS = 1,\n    ACTIVE_LOW = 0,\n    ACTIVE_HIGH = 1,\n    // /libraries/codal-core/inc/driver-models/Accelerometer.h\n    ACCELEROMETER_IMU_DATA_VALID = 2,\n    ACCELEROMETER_EVT_DATA_UPDATE = 1,\n    ACCELEROMETER_EVT_NONE = 0,\n    ACCELEROMETER_EVT_TILT_UP = 1,\n    ACCELEROMETER_EVT_TILT_DOWN = 2,\n    ACCELEROMETER_EVT_TILT_LEFT = 3,\n    ACCELEROMETER_EVT_TILT_RIGHT = 4,\n    ACCELEROMETER_EVT_FACE_UP = 5,\n    ACCELEROMETER_EVT_FACE_DOWN = 6,\n    ACCELEROMETER_EVT_FREEFALL = 7,\n    ACCELEROMETER_EVT_3G = 8,\n    ACCELEROMETER_EVT_6G = 9,\n    ACCELEROMETER_EVT_8G = 10,\n    ACCELEROMETER_EVT_SHAKE = 11,\n    ACCELEROMETER_REST_TOLERANCE = 200,\n    ACCELEROMETER_TILT_TOLERANCE = 200,\n    ACCELEROMETER_FREEFALL_TOLERANCE = 400,\n    ACCELEROMETER_SHAKE_TOLERANCE = 400,\n    ACCELEROMETER_3G_TOLERANCE = 3072,\n    ACCELEROMETER_6G_TOLERANCE = 6144,\n    ACCELEROMETER_8G_TOLERANCE = 8192,\n    ACCELEROMETER_GESTURE_DAMPING = 5,\n    ACCELEROMETER_SHAKE_DAMPING = 10,\n    ACCELEROMETER_SHAKE_RTX = 30,\n    ACCELEROMETER_SHAKE_COUNT_THRESHOLD = 4,\n    // /libraries/codal-core/inc/driver-models/Compass.h\n    COMPASS_STATUS_RUNNING = 1,\n    COMPASS_STATUS_CALIBRATED = 2,\n    COMPASS_STATUS_CALIBRATING = 4,\n    COMPASS_STATUS_ADDED_TO_IDLE = 8,\n    COMPASS_EVT_DATA_UPDATE = 1,\n    COMPASS_EVT_CONFIG_NEEDED = 2,\n    COMPASS_EVT_CALIBRATE = 3,\n    COMPASS_EVT_CALIBRATION_NEEDED = 4,\n    // /libraries/codal-core/inc/driver-models/Gyroscope.h\n    GYROSCOPE_IMU_DATA_VALID = 2,\n    GYROSCOPE_EVT_DATA_UPDATE = 1,\n    // /libraries/codal-core/inc/driver-models/Pin.h\n    IO_STATUS_DIGITAL_IN = 1,\n    IO_STATUS_DIGITAL_OUT = 2,\n    IO_STATUS_ANALOG_IN = 4,\n    IO_STATUS_ANALOG_OUT = 8,\n    IO_STATUS_TOUCH_IN = 16,\n    IO_STATUS_EVENT_ON_EDGE = 32,\n    IO_STATUS_EVENT_PULSE_ON_EDGE = 64,\n    DEVICE_PIN_MAX_OUTPUT = 1023,\n    DEVICE_PIN_MAX_SERVO_RANGE = 180,\n    DEVICE_PIN_DEFAULT_SERVO_RANGE = 2000,\n    DEVICE_PIN_DEFAULT_SERVO_CENTER = 1500,\n    DEVICE_PIN_EVENT_NONE = 0,\n    DEVICE_PIN_EVENT_ON_EDGE = 1,\n    DEVICE_PIN_EVENT_ON_PULSE = 2,\n    DEVICE_PIN_EVENT_ON_TOUCH = 3,\n    DEVICE_PIN_EVT_RISE = 2,\n    DEVICE_PIN_EVT_FALL = 3,\n    DEVICE_PIN_EVT_PULSE_HI = 4,\n    DEVICE_PIN_EVT_PULSE_LO = 5,\n    PIN_CAPABILITY_DIGITAL = 1,\n    PIN_CAPABILITY_ANALOG = 2,\n    PIN_CAPABILITY_AD = 3,\n    PIN_CAPABILITY_ALL = 3,\n    None = 0,\n    Down = 1,\n    Up = 2,\n    // /libraries/codal-core/inc/driver-models/Radio.h\n    RADIO_EVT_DATA_READY = 2,\n    // /libraries/codal-core/inc/driver-models/SPIFlash.h\n    SPIFLASH_PAGE_SIZE = 256,\n    SPIFLASH_SMALL_ROW_PAGES = 16,\n    SPIFLASH_BIG_ROW_PAGES = 256,\n    // /libraries/codal-core/inc/driver-models/Sensor.h\n    SENSOR_THRESHOLD_LOW = 1,\n    SENSOR_THRESHOLD_HIGH = 2,\n    SENSOR_UPDATE_NEEDED = 3,\n    SENSOR_INITIALISED = 1,\n    SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    SENSOR_LOW_THRESHOLD_PASSED = 4,\n    SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    SENSOR_DEFAULT_SENSITIVITY = 868,\n    SENSOR_DEFAULT_SAMPLE_PERIOD = 500,\n    // /libraries/codal-core/inc/driver-models/Serial.h\n    CODAL_SERIAL_DEFAULT_BAUD_RATE = 115200,\n    CODAL_SERIAL_DEFAULT_BUFFER_SIZE = 20,\n    CODAL_SERIAL_EVT_DELIM_MATCH = 1,\n    CODAL_SERIAL_EVT_HEAD_MATCH = 2,\n    CODAL_SERIAL_EVT_RX_FULL = 3,\n    CODAL_SERIAL_RX_IN_USE = 1,\n    CODAL_SERIAL_TX_IN_USE = 2,\n    CODAL_SERIAL_RX_BUFF_INIT = 4,\n    CODAL_SERIAL_TX_BUFF_INIT = 8,\n    ASYNC = 0,\n    SYNC_SPINWAIT = 1,\n    SYNC_SLEEP = 2,\n    RxInterrupt = 0,\n    TxInterrupt = 1,\n    // /libraries/codal-core/inc/driver-models/SingleWireSerial.h\n    SWS_EVT_DATA_RECEIVED = 1,\n    SWS_EVT_DATA_SENT = 2,\n    SWS_EVT_ERROR = 3,\n    SWS_EVT_DATA_DROPPED = 4,\n    SingleWireRx = 0,\n    SingleWireTx = 1,\n    SingleWireDisconnected = 2,\n    // /libraries/codal-core/inc/driver-models/Timer.h\n    CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE = 10,\n    // /libraries/codal-core/inc/drivers/AnalogSensor.h\n    ANALOG_THRESHOLD_LOW = 1,\n    ANALOG_THRESHOLD_HIGH = 2,\n    ANALOG_SENSOR_UPDATE_NEEDED = 3,\n    ANALOG_SENSOR_INITIALISED = 1,\n    ANALOG_SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    ANALOG_SENSOR_LOW_THRESHOLD_PASSED = 4,\n    ANALOG_SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    ANALOG_SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    // /libraries/codal-core/inc/drivers/AnimatedDisplay.h\n    DISPLAY_EVT_ANIMATION_COMPLETE = 1,\n    DISPLAY_DEFAULT_AUTOCLEAR = 1,\n    DISPLAY_SPACING = 1,\n    DISPLAY_ANIMATE_DEFAULT_POS = -255,\n    DISPLAY_DEFAULT_SCROLL_SPEED = 120,\n    DISPLAY_DEFAULT_SCROLL_STRIDE = -1,\n    DISPLAY_DEFAULT_PRINT_SPEED = 400,\n    ANIMATION_MODE_NONE = 0,\n    ANIMATION_MODE_STOPPED = 1,\n    ANIMATION_MODE_SCROLL_TEXT = 2,\n    ANIMATION_MODE_PRINT_TEXT = 3,\n    ANIMATION_MODE_SCROLL_IMAGE = 4,\n    ANIMATION_MODE_ANIMATE_IMAGE = 5,\n    ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR = 6,\n    ANIMATION_MODE_PRINT_CHARACTER = 7,\n    // /libraries/codal-core/inc/drivers/FAT.h\n    FAT_RESERVED_SECTORS = 1,\n    FAT_ROOT_DIR_SECTORS = 4,\n    // /libraries/codal-core/inc/drivers/HID.h\n    HID_REQUEST_GET_REPORT = 1,\n    HID_REQUEST_GET_IDLE = 2,\n    HID_REQUEST_GET_PROTOCOL = 3,\n    HID_REQUEST_SET_REPORT = 9,\n    HID_REQUEST_SET_IDLE = 10,\n    HID_REQUEST_SET_PROTOCOL = 11,\n    // /libraries/codal-core/inc/drivers/HIDKeyboard.h\n    HID_KEYBOARD_NUM_REPORTS = 3,\n    HID_KEYBOARD_REPORT_GENERIC = 1,\n    HID_KEYBOARD_REPORT_CONSUMER = 2,\n    HID_KEYBOARD_KEYSTATE_SIZE_GENERIC = 8,\n    HID_KEYBOARD_KEYSTATE_SIZE_CONSUMER = 2,\n    HID_KEYBOARD_MODIFIER_OFFSET = 2,\n    HID_KEYBOARD_DELAY_DEFAULT = 10,\n    PressKey = 0,\n    ReleaseKey = 1,\n    // /libraries/codal-core/inc/drivers/JackRouter.h\n    AllDown = 1,\n    HeadPhones = 2,\n    Buzzer = 3,\n    BuzzerAndSerial = 4,\n    // /libraries/codal-core/inc/drivers/KeyMap.h\n    KEYMAP_ALL_KEYS_UP_Val = 1,\n    KEYMAP_ALL_KEYS_UP_POS = 28,\n    KEYMAP_NORMAL_KEY_Val = 0,\n    KEYMAP_MODIFIER_KEY_Val = 1,\n    KEYMAP_MODIFIER_POS = 29,\n    KEYMAP_MEDIA_KEY_Val = 1,\n    KEYMAP_MEDIA_POS = 30,\n    KEYMAP_KEY_UP_Val = 0,\n    KEYMAP_KEY_DOWN_Val = 1,\n    KEYMAP_KEY_DOWN_POS = 31,\n    // /libraries/codal-core/inc/drivers/LEDMatrix.h\n    LED_MATRIX_GREYSCALE_BIT_DEPTH = 8,\n    LED_MATRIX_EVT_LIGHT_SENSE = 2,\n    LED_MATRIX_EVT_FRAME_TIMEOUT = 3,\n    LED_MATRIX_MINIMUM_BRIGHTNESS = 1,\n    LED_MATRIX_MAXIMUM_BRIGHTNESS = 255,\n    LED_MATRIX_DEFAULT_BRIGHTNESS = 255,\n    DISPLAY_MODE_BLACK_AND_WHITE = 0,\n    DISPLAY_MODE_GREYSCALE = 1,\n    DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE = 2,\n    MATRIX_DISPLAY_ROTATION_0 = 0,\n    MATRIX_DISPLAY_ROTATION_90 = 1,\n    MATRIX_DISPLAY_ROTATION_180 = 2,\n    MATRIX_DISPLAY_ROTATION_270 = 3,\n    NO_CONN = 0,\n    // /libraries/codal-core/inc/drivers/MAG3110.h\n    MAG3110_DEFAULT_ADDR = 29,\n    MAG_DR_STATUS = 0,\n    MAG_OUT_X_MSB = 1,\n    MAG_OUT_X_LSB = 2,\n    MAG_OUT_Y_MSB = 3,\n    MAG_OUT_Y_LSB = 4,\n    MAG_OUT_Z_MSB = 5,\n    MAG_OUT_Z_LSB = 6,\n    MAG_WHOAMI = 7,\n    MAG_SYSMOD = 8,\n    MAG_OFF_X_MSB = 9,\n    MAG_OFF_X_LSB = 10,\n    MAG_OFF_Y_MSB = 11,\n    MAG_OFF_Y_LSB = 12,\n    MAG_OFF_Z_MSB = 13,\n    MAG_OFF_Z_LSB = 14,\n    MAG_DIE_TEMP = 15,\n    MAG_CTRL_REG1 = 16,\n    MAG_CTRL_REG2 = 17,\n    MAG3110_SAMPLE_RATES = 11,\n    MAG3110_WHOAMI_VAL = 196,\n    // /libraries/codal-core/inc/drivers/MMA8653.h\n    MICROBIT_ACCEL_PITCH_ROLL_VALID = 2,\n    MICROBIT_ACCEL_ADDED_TO_IDLE = 4,\n    MMA8653_DEFAULT_ADDR = 58,\n    MMA8653_STATUS = 0,\n    MMA8653_OUT_X_MSB = 1,\n    MMA8653_WHOAMI = 13,\n    MMA8653_XYZ_DATA_CFG = 14,\n    MMA8653_CTRL_REG1 = 42,\n    MMA8653_CTRL_REG2 = 43,\n    MMA8653_CTRL_REG3 = 44,\n    MMA8653_CTRL_REG4 = 45,\n    MMA8653_CTRL_REG5 = 46,\n    MMA8653_WHOAMI_VAL = 90,\n    MMA8653_SAMPLE_RANGES = 3,\n    MMA8653_SAMPLE_RATES = 8,\n    // /libraries/codal-core/inc/drivers/MultiButton.h\n    MULTI_BUTTON_STATE_1 = 1,\n    MULTI_BUTTON_STATE_2 = 2,\n    MULTI_BUTTON_HOLD_TRIGGERED_1 = 4,\n    MULTI_BUTTON_HOLD_TRIGGERED_2 = 8,\n    MULTI_BUTTON_SUPRESSED_1 = 16,\n    MULTI_BUTTON_SUPRESSED_2 = 32,\n    MULTI_BUTTON_ATTACHED = 64,\n    // /libraries/codal-core/inc/drivers/ST7735.h\n    MADCTL_MY = 128,\n    MADCTL_MX = 64,\n    MADCTL_MV = 32,\n    MADCTL_ML = 16,\n    MADCTL_RGB = 0,\n    MADCTL_BGR = 8,\n    MADCTL_MH = 4,\n    // /libraries/codal-core/inc/drivers/TouchButton.h\n    TOUCH_BUTTON_CALIBRATION_PERIOD = 10,\n    TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET = 2,\n    TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET = 5,\n    TOUCH_BUTTON_CALIBRATING = 16,\n    // /libraries/codal-core/inc/drivers/TouchSensor.h\n    TOUCH_SENSOR_MAX_BUTTONS = 10,\n    TOUCH_SENSOR_SAMPLE_PERIOD = 50,\n    TOUCH_SENSE_SAMPLE_MAX = 1000,\n    TOUCH_SENSOR_UPDATE_NEEDED = 1,\n    // /libraries/codal-core/inc/drivers/USB_HID_Keys.h\n    KEY_MOD_LCTRL = 1,\n    KEY_MOD_LSHIFT = 2,\n    KEY_MOD_LALT = 4,\n    KEY_MOD_LMETA = 8,\n    KEY_MOD_RCTRL = 16,\n    KEY_MOD_RSHIFT = 32,\n    KEY_MOD_RALT = 64,\n    KEY_MOD_RMETA = 128,\n    KEY_NONE = 0,\n    KEY_ERR_OVF = 1,\n    KEY_A = 4,\n    KEY_B = 5,\n    KEY_C = 6,\n    KEY_D = 7,\n    KEY_E = 8,\n    KEY_F = 9,\n    KEY_G = 10,\n    KEY_H = 11,\n    KEY_I = 12,\n    KEY_J = 13,\n    KEY_K = 14,\n    KEY_L = 15,\n    KEY_M = 16,\n    KEY_N = 17,\n    KEY_O = 18,\n    KEY_P = 19,\n    KEY_Q = 20,\n    KEY_R = 21,\n    KEY_S = 22,\n    KEY_T = 23,\n    KEY_U = 24,\n    KEY_V = 25,\n    KEY_W = 26,\n    KEY_X = 27,\n    KEY_Y = 28,\n    KEY_Z = 29,\n    KEY_1 = 30,\n    KEY_2 = 31,\n    KEY_3 = 32,\n    KEY_4 = 33,\n    KEY_5 = 34,\n    KEY_6 = 35,\n    KEY_7 = 36,\n    KEY_8 = 37,\n    KEY_9 = 38,\n    KEY_0 = 39,\n    KEY_ENTER = 40,\n    KEY_ESC = 41,\n    KEY_BACKSPACE = 42,\n    KEY_TAB = 43,\n    KEY_SPACE = 44,\n    KEY_MINUS = 45,\n    KEY_EQUAL = 46,\n    KEY_LEFTBRACE = 47,\n    KEY_RIGHTBRACE = 48,\n    KEY_BACKSLASH = 49,\n    KEY_HASHTILDE = 50,\n    KEY_SEMICOLON = 51,\n    KEY_APOSTROPHE = 52,\n    KEY_GRAVE = 53,\n    KEY_COMMA = 54,\n    KEY_DOT = 55,\n    KEY_SLASH = 56,\n    KEY_CAPSLOCK = 57,\n    KEY_F1 = 58,\n    KEY_F2 = 59,\n    KEY_F3 = 60,\n    KEY_F4 = 61,\n    KEY_F5 = 62,\n    KEY_F6 = 63,\n    KEY_F7 = 64,\n    KEY_F8 = 65,\n    KEY_F9 = 66,\n    KEY_F10 = 67,\n    KEY_F11 = 68,\n    KEY_F12 = 69,\n    KEY_SYSRQ = 70,\n    KEY_SCROLLLOCK = 71,\n    KEY_PAUSE = 72,\n    KEY_INSERT = 73,\n    KEY_HOME = 74,\n    KEY_PAGEUP = 75,\n    KEY_DELETE = 76,\n    KEY_END = 77,\n    KEY_PAGEDOWN = 78,\n    KEY_RIGHT = 79,\n    KEY_LEFT = 80,\n    KEY_DOWN = 81,\n    KEY_UP = 82,\n    KEY_NUMLOCK = 83,\n    KEY_KPSLASH = 84,\n    KEY_KPASTERISK = 85,\n    KEY_KPMINUS = 86,\n    KEY_KPPLUS = 87,\n    KEY_KPENTER = 88,\n    KEY_KP1 = 89,\n    KEY_KP2 = 90,\n    KEY_KP3 = 91,\n    KEY_KP4 = 92,\n    KEY_KP5 = 93,\n    KEY_KP6 = 94,\n    KEY_KP7 = 95,\n    KEY_KP8 = 96,\n    KEY_KP9 = 97,\n    KEY_KP0 = 98,\n    KEY_KPDOT = 99,\n    KEY_102ND = 100,\n    KEY_COMPOSE = 101,\n    KEY_POWER = 102,\n    KEY_KPEQUAL = 103,\n    KEY_F13 = 104,\n    KEY_F14 = 105,\n    KEY_F15 = 106,\n    KEY_F16 = 107,\n    KEY_F17 = 108,\n    KEY_F18 = 109,\n    KEY_F19 = 110,\n    KEY_F20 = 111,\n    KEY_F21 = 112,\n    KEY_F22 = 113,\n    KEY_F23 = 114,\n    KEY_F24 = 115,\n    KEY_OPEN = 116,\n    KEY_HELP = 117,\n    KEY_PROPS = 118,\n    KEY_FRONT = 119,\n    KEY_STOP = 120,\n    KEY_AGAIN = 121,\n    KEY_UNDO = 122,\n    KEY_CUT = 123,\n    KEY_COPY = 124,\n    KEY_PASTE = 125,\n    KEY_FIND = 126,\n    KEY_MUTE = 127,\n    KEY_VOLUMEUP = 128,\n    KEY_VOLUMEDOWN = 129,\n    KEY_KPCOMMA = 133,\n    KEY_RO = 135,\n    KEY_KATAKANAHIRAGANA = 136,\n    KEY_YEN = 137,\n    KEY_HENKAN = 138,\n    KEY_MUHENKAN = 139,\n    KEY_KPJPCOMMA = 140,\n    KEY_HANGEUL = 144,\n    KEY_HANJA = 145,\n    KEY_KATAKANA = 146,\n    KEY_HIRAGANA = 147,\n    KEY_ZENKAKUHANKAKU = 148,\n    KEY_KPLEFTPAREN = 182,\n    KEY_KPRIGHTPAREN = 183,\n    KEY_LEFTCTRL = 224,\n    KEY_LEFTSHIFT = 225,\n    KEY_LEFTALT = 226,\n    KEY_LEFTMETA = 227,\n    KEY_RIGHTCTRL = 228,\n    KEY_RIGHTSHIFT = 229,\n    KEY_RIGHTALT = 230,\n    KEY_RIGHTMETA = 231,\n    KEY_MEDIA_PLAYPAUSE = 232,\n    KEY_MEDIA_STOPCD = 233,\n    KEY_MEDIA_PREVIOUSSONG = 234,\n    KEY_MEDIA_NEXTSONG = 235,\n    KEY_MEDIA_EJECTCD = 236,\n    KEY_MEDIA_VOLUMEUP = 237,\n    KEY_MEDIA_VOLUMEDOWN = 238,\n    KEY_MEDIA_MUTE = 239,\n    KEY_MEDIA_WWW = 240,\n    KEY_MEDIA_BACK = 241,\n    KEY_MEDIA_FORWARD = 242,\n    KEY_MEDIA_STOP = 243,\n    KEY_MEDIA_FIND = 244,\n    KEY_MEDIA_SCROLLUP = 245,\n    KEY_MEDIA_SCROLLDOWN = 246,\n    KEY_MEDIA_EDIT = 247,\n    KEY_MEDIA_SLEEP = 248,\n    KEY_MEDIA_COFFEE = 249,\n    KEY_MEDIA_REFRESH = 250,\n    KEY_MEDIA_CALC = 251,\n    // /libraries/codal-core/inc/drivers/uf2format.h\n    UF2FORMAT_H = 1,\n    APP_START_ADDRESS = 8192,\n    UF2_FLAG_NOFLASH = 1,\n    // /libraries/codal-core/inc/streams/DataStream.h\n    DATASTREAM_MAXIMUM_BUFFERS = 1,\n    // /libraries/codal-core/inc/streams/LevelDetector.h\n    LEVEL_THRESHOLD_LOW = 1,\n    LEVEL_THRESHOLD_HIGH = 2,\n    LEVEL_DETECTOR_INITIALISED = 1,\n    LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/LevelDetectorSPL.h\n    LEVEL_DETECTOR_SPL_INITIALISED = 1,\n    LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/Synthesizer.h\n    SYNTHESIZER_SAMPLE_RATE = 44100,\n    TONE_WIDTH = 1024,\n    // /libraries/codal-core/inc/types/BitmapFont.h\n    BITMAP_FONT_WIDTH = 5,\n    BITMAP_FONT_HEIGHT = 5,\n    BITMAP_FONT_ASCII_START = 32,\n    BITMAP_FONT_ASCII_END = 126,\n    // /libraries/codal-core/inc/types/CoordinateSystem.h\n    COORDINATE_SPACE_ROTATED_0 = 0,\n    COORDINATE_SPACE_ROTATED_90 = 1,\n    COORDINATE_SPACE_ROTATED_180 = 2,\n    COORDINATE_SPACE_ROTATED_270 = 3,\n    RAW = 0,\n    SIMPLE_CARTESIAN = 1,\n    NORTH_EAST_DOWN = 2,\n    NORTH_EAST_UP = 3,\n    // /libraries/codal-core/inc/types/Event.h\n    DEVICE_ID_ANY = 0,\n    DEVICE_EVT_ANY = 0,\n    CREATE_ONLY = 0,\n    CREATE_AND_FIRE = 1,\n    DEVICE_EVENT_DEFAULT_LAUNCH_MODE = 1,\n    // /libraries/codal-core/inc/types/RefCounted.h\n    REF_TAG_STRING = 1,\n    REF_TAG_BUFFER = 2,\n    REF_TAG_IMAGE = 3,\n    REF_TAG_USER = 32,\n    // /pxtapp/hf2dbg.h\n    HF2DBG_H = 1,\n    // /pxtapp/pins.h\n    CFG_PIN_ACCELEROMETER_INT = 1,\n    CFG_PIN_ACCELEROMETER_SCL = 2,\n    CFG_PIN_ACCELEROMETER_SDA = 3,\n    CFG_PIN_BTN_A = 4,\n    CFG_PIN_BTN_B = 5,\n    CFG_PIN_BTN_SLIDE = 6,\n    CFG_PIN_DOTSTAR_CLOCK = 7,\n    CFG_PIN_DOTSTAR_DATA = 8,\n    CFG_PIN_FLASH_CS = 9,\n    CFG_PIN_FLASH_MISO = 10,\n    CFG_PIN_FLASH_MOSI = 11,\n    CFG_PIN_FLASH_SCK = 12,\n    CFG_PIN_LED = 13,\n    CFG_PIN_LIGHT = 14,\n    CFG_PIN_MICROPHONE = 15,\n    CFG_PIN_MIC_CLOCK = 16,\n    CFG_PIN_MIC_DATA = 17,\n    CFG_PIN_MISO = 18,\n    CFG_PIN_MOSI = 19,\n    CFG_PIN_NEOPIXEL = 20,\n    CFG_PIN_RX = 21,\n    CFG_PIN_RXLED = 22,\n    CFG_PIN_SCK = 23,\n    CFG_PIN_SCL = 24,\n    CFG_PIN_SDA = 25,\n    CFG_PIN_SPEAKER_AMP = 26,\n    CFG_PIN_TEMPERATURE = 27,\n    CFG_PIN_TX = 28,\n    CFG_PIN_TXLED = 29,\n    CFG_PIN_IR_OUT = 30,\n    CFG_PIN_IR_IN = 31,\n    CFG_PIN_DISPLAY_SCK = 32,\n    CFG_PIN_DISPLAY_MISO = 33,\n    CFG_PIN_DISPLAY_MOSI = 34,\n    CFG_PIN_DISPLAY_CS = 35,\n    CFG_PIN_DISPLAY_DC = 36,\n    CFG_DISPLAY_WIDTH = 37,\n    CFG_DISPLAY_HEIGHT = 38,\n    CFG_DISPLAY_CFG0 = 39,\n    CFG_DISPLAY_CFG1 = 40,\n    CFG_DISPLAY_CFG2 = 41,\n    CFG_DISPLAY_CFG3 = 42,\n    CFG_PIN_DISPLAY_RST = 43,\n    CFG_PIN_DISPLAY_BL = 44,\n    CFG_PIN_SERVO_1 = 45,\n    CFG_PIN_SERVO_2 = 46,\n    CFG_PIN_BTN_LEFT = 47,\n    CFG_PIN_BTN_RIGHT = 48,\n    CFG_PIN_BTN_UP = 49,\n    CFG_PIN_BTN_DOWN = 50,\n    CFG_PIN_BTN_MENU = 51,\n    CFG_PIN_LED_R = 52,\n    CFG_PIN_LED_G = 53,\n    CFG_PIN_LED_B = 54,\n    CFG_PIN_LED1 = 55,\n    CFG_PIN_LED2 = 56,\n    CFG_PIN_LED3 = 57,\n    CFG_PIN_LED4 = 58,\n    CFG_SPEAKER_VOLUME = 59,\n    CFG_PIN_JACK_TX = 60,\n    CFG_PIN_JACK_SENSE = 61,\n    CFG_PIN_JACK_HPEN = 62,\n    CFG_PIN_JACK_BZEN = 63,\n    CFG_PIN_JACK_PWREN = 64,\n    CFG_PIN_JACK_SND = 65,\n    CFG_PIN_A0 = 100,\n    CFG_PIN_A1 = 101,\n    CFG_PIN_A2 = 102,\n    CFG_PIN_A3 = 103,\n    CFG_PIN_A4 = 104,\n    CFG_PIN_A5 = 105,\n    CFG_PIN_A6 = 106,\n    CFG_PIN_A7 = 107,\n    CFG_PIN_A8 = 108,\n    CFG_PIN_A9 = 109,\n    CFG_PIN_A10 = 110,\n    CFG_PIN_A11 = 111,\n    CFG_PIN_A12 = 112,\n    CFG_PIN_A13 = 113,\n    CFG_PIN_A14 = 114,\n    CFG_PIN_A15 = 115,\n    CFG_PIN_D0 = 150,\n    CFG_PIN_D1 = 151,\n    CFG_PIN_D2 = 152,\n    CFG_PIN_D3 = 153,\n    CFG_PIN_D4 = 154,\n    CFG_PIN_D5 = 155,\n    CFG_PIN_D6 = 156,\n    CFG_PIN_D7 = 157,\n    CFG_PIN_D8 = 158,\n    CFG_PIN_D9 = 159,\n    CFG_PIN_D10 = 160,\n    CFG_PIN_D11 = 161,\n    CFG_PIN_D12 = 162,\n    CFG_PIN_D13 = 163,\n    CFG_PIN_D14 = 164,\n    CFG_PIN_D15 = 165,\n    CFG_NUM_NEOPIXELS = 200,\n    CFG_NUM_DOTSTARS = 201,\n    CFG_DEFAULT_BUTTON_MODE = 202,\n    CFG_SWD_ENABLED = 203,\n    CFG_FLASH_BYTES = 204,\n    BUTTON_ACTIVE_HIGH_PULL_DOWN = 17,\n    BUTTON_ACTIVE_HIGH_PULL_UP = 33,\n    BUTTON_ACTIVE_HIGH_PULL_NONE = 49,\n    BUTTON_ACTIVE_LOW_PULL_DOWN = 16,\n    BUTTON_ACTIVE_LOW_PULL_UP = 32,\n    BUTTON_ACTIVE_LOW_PULL_NONE = 48,\n    // /pxtapp/platform.h\n    PAGE_SIZE = 1024,\n    DEV_NUM_PINS = 48,\n    IMAGE_BITS = 4,\n    CFG_PIN_PA0 = 100,\n    CFG_PIN_PA1 = 101,\n    CFG_PIN_PA2 = 102,\n    CFG_PIN_PA3 = 103,\n    CFG_PIN_PA4 = 104,\n    CFG_PIN_SCL1 = 105,\n    CFG_PIN_SDA1 = 106,\n    CFG_PIN_NSS1 = 107,\n    CFG_PIN_SCK1 = 108,\n    CFG_PIN_MISO1 = 109,\n    CFG_PIN_MOSI1 = 110,\n    CFG_PIN_TX2 = 111,\n    CFG_PIN_RX2 = 112,\n    NOTUSED_PA_0 = 0,\n    CM_PIN_PA0 = 0,\n    CM_PIN_PA1 = 1,\n    CM_PIN_PA2 = 2,\n    CM_PIN_PA3 = 3,\n    CM_PIN_PA4 = 4,\n    CM_PIN_PA5 = 5,\n    CM_PIN_PA6 = 6,\n    CM_PIN_PA7 = 7,\n    CM_PIN_PA8 = 8,\n    CM_PIN_PA9 = 9,\n    CM_PIN_PA10 = 10,\n    CM_PIN_PA11 = 11,\n    CM_PIN_PA12 = 12,\n    CM_PIN_PA15 = 13,\n    CM_PIN_PB0 = 14,\n    CM_PIN_PB1 = 15,\n    CM_PIN_PB3 = 16,\n    CM_PIN_PB4 = 17,\n    CM_PIN_PB5 = 18,\n    CM_PIN_PB6 = 19,\n    CM_PIN_PB7 = 20,\n    CM_PIN_PB8 = 21,\n    CM_PIN_PB9 = 22,\n    CM_PIN_PB10 = 23,\n    CM_PIN_PB11 = 24,\n    CM_PIN_PB12 = 25,\n    CM_PIN_PB13 = 26,\n    CM_PIN_PB14 = 27,\n    CM_PIN_PB15 = 28,\n    CM_PIN_PC10 = 29,\n    CM_PIN_PC11 = 30,\n    CM_PIN_PC12 = 31,\n    CM_PIN_PD2 = 32,\n    CM_PIN_PD3 = 33,\n    CM_PIN_PD4 = 34,\n    CM_PIN_PD5 = 35,\n    CM_PIN_PD6 = 36,\n    CM_PIN_PD7 = 37,\n    CM_PIN_PD12 = 38,\n    CM_PIN_PD13 = 39,\n    CM_PIN_PD14 = 40,\n    CM_PIN_PD15 = 41,\n    CM_PIN_TIM_CH15 = 42,\n    CM_PIN_TIM_CH25 = 43,\n    CM_PIN_TIM_CH35 = 44,\n    CM_PIN_TIM_CH45 = 45,\n    CM_PIN_TIM_CH14 = 46,\n    CM_PIN_TIM_CH24 = 47,\n    CM_PIN_TIM_CH34 = 48,\n    CM_PIN_TIM_CH44 = 49,\n    CM_PIN_TIM_CH14_REMAP = 50,\n    CM_PIN_TIM_CH24_REMAP = 51,\n    CM_PIN_TIM_CH34_REMAP = 52,\n    CM_PIN_TIM_CH44_REMAP = 53,\n    CM_PIN_TIM_CH13 = 54,\n    CM_PIN_TIM_CH23 = 55,\n    CM_PIN_TIM_CH33 = 56,\n    CM_PIN_TIM_CH43 = 57,\n    CM_PIN_TIM_CH22 = 58,\n    CM_PIN_TIM_CH32 = 59,\n    CM_PIN_TIM_CH42 = 60,\n    CM_PIN_TIM_ETR1 = 61,\n    CM_PIN_TIM_CH11 = 62,\n    CM_PIN_TIM_CH21 = 63,\n    CM_PIN_TIM_CH31 = 64,\n    CM_PIN_TIM_CH41 = 65,\n    CM_PIN_TIM_BKIN1 = 66,\n    CM_PIN_TIM_CH1N1 = 67,\n    CM_PIN_TIM_CH2N1 = 68,\n    CM_PIN_TIM_CH3N1 = 69,\n    CM_PIN_UART_TX5 = 70,\n    CM_PIN_UART_RX5 = 71,\n    CM_PIN_UART_TX4 = 72,\n    CM_PIN_UART_RX4 = 73,\n    CM_PIN_USART_TX3 = 74,\n    CM_PIN_USART_RX3 = 75,\n    CM_PIN_USART_CK3 = 76,\n    CM_PIN_USART_CTS3 = 77,\n    CM_PIN_USART_RTS3 = 78,\n    CM_PIN_USART_CTS2 = 79,\n    CM_PIN_USART_RTS2 = 80,\n    CM_PIN_USART_TX2 = 81,\n    CM_PIN_USART_RX2 = 82,\n    CM_PIN_USART_CK2 = 83,\n    CM_PIN_USART_CTS2_REMAP = 84,\n    CM_PIN_USART_RTS2_REMAP = 85,\n    CM_PIN_USART_TX2_REMAP = 86,\n    CM_PIN_USART_RX2_REMAP = 87,\n    CM_PIN_USART_CK2_REMAP = 88,\n    CM_PIN_USART_TX1 = 89,\n    CM_PIN_USART_RX1 = 90,\n    CM_PIN_USART_TX1_REMAP = 91,\n    CM_PIN_USART_RX1_REMAP = 92,\n    CM_PIN_I2C_SMBAI1 = 93,\n    CM_PIN_I2C_SCL1 = 94,\n    CM_PIN_I2C_SDA1 = 95,\n    CM_PIN_I2C_SMBAI1_REMAP = 96,\n    CM_PIN_I2C_SCL1_REMAP = 97,\n    CM_PIN_I2C_SDA1_REMAP = 98,\n    CM_PIN_I2C_SCL2 = 99,\n    CM_PIN_I2C_SDA2 = 100,\n    CM_PIN_I2C_SMBAI2 = 101,\n    CM_PIN_SPI_NSS1 = 102,\n    CM_PIN_SPI_SCK1 = 103,\n    CM_PIN_SPI_MISO1 = 104,\n    CM_PIN_SPI_MOSI1 = 105,\n    CM_PIN_SPI_NSS1_REMAP = 106,\n    CM_PIN_SPI_SCK1_REMAP = 107,\n    CM_PIN_SPI_MISO1_REMAP = 108,\n    CM_PIN_SPI_MOSI1_REMAP = 109,\n    CM_PIN_SPI_NSS2 = 110,\n    CM_PIN_SPI_SCK2 = 111,\n    CM_PIN_SPI_MISO2 = 112,\n    CM_PIN_SPI_MOSI2 = 113,\n    CM_PIN_SPI_NSS3 = 114,\n    CM_PIN_SPI_SCK3 = 115,\n    CM_PIN_SPI_MISO3 = 116,\n    CM_PIN_SPI_MOSI3 = 117,\n    CM_PIN_SPI_NSS3_REMAP = 118,\n    CM_PIN_SPI_SCK3_REMAP = 119,\n    CM_PIN_SPI_MISO3_REMAP = 120,\n    CM_PIN_SPI_MOSI3_REMAP = 121,\n    CM_PIN_LED = 122,\n    CM_PIN_TEMPERATURE = 123,\n    CM_PIN_VREF = 124,\n    CM_PIN_VBAT = 125,\n    CM_PIN_NC = 255,\n    // /pxtapp/pxt.h\n    DEVICE_ID_BUTTON_SLIDE = 3000,\n    DEVICE_ID_MICROPHONE = 3001,\n    DEVICE_ID_FIRST_BUTTON = 4000,\n    DEVICE_ID_FIRST_TOUCHBUTTON = 4100,\n    // /pxtapp/pxtbase.h\n    PXT_REFCNT_FLASH = 65534,\n    VTABLE_MAGIC = 249,\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    User0 = 16,\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    GC = 0,\n    // /pxtapp/pxtconfig.h\n    PXT_GC = 1,\n    // /pxtapp/uf2hid.h\n    UF2_HID_H = 1,\n}\n",
      "dmac.cpp": "#include \"dmac.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nSINGLETON(WDMAC);\n#endif\n\n}",
      "dmac.h": "#ifndef __DMAC_H\n#define __DMAC_H\n\n#include \"pxt.h\"\n\nnamespace pxt {\n\n#ifdef CODAL_DMAC\nclass WDMAC {\n  public:\n    CODAL_DMAC dmac;\n\n    WDMAC() {}\n};\n\nWDMAC* getWDMAC();\n#endif\n\n}\n\n#endif",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PulseValue {\n    //% block=high\n    High = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=low\n    Low = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    }\n\n\n    declare const enum PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=\"pulse low\"\n    PulseLow = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    //% block=\"rise\"\n    Rise = 2,  // DEVICE_PIN_EVT_RISE\n    //% block=\"fall\"\n    Fall = 3,  // DEVICE_PIN_EVT_FALL\n    }\n\n\n    declare const enum PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "hf2.cpp": "#define UF2_DEFINE_HANDOVER 1\n#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"uf2format.h\"\n\nstatic void *stackCopy;\nstatic uint32_t stackSize;\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\nstatic volatile bool resume = false;\n\nusing namespace codal;\n\nstatic const char hidDescriptor[] = {\n    0x06, 0x97, 0xFF, // usage page vendor 0x97 (usage 0xff97 0x0001)\n    0x09, 0x01,       // usage 1\n    0xA1, 0x01,       // collection - application\n    0x15, 0x00,       // logical min 0\n    0x26, 0xFF, 0x00, // logical max 255\n    0x75, 8,          // report size 8\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x81, 0x02,       // input: data, variable, absolute\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x91, 0x02,       // output: data, variable, absolute\n    0x95, 1,          // report count 1\n    0x09, 0x01,       // usage 1\n    0xB1, 0x02,       // feature: data, variable, absolute\n    0xC0,             // end\n};\n\nstatic const HIDReportDescriptor reportDesc = {\n    9,\n    0x21,                  // HID\n    0x100,                 // hidbcd 1.00\n    0x00,                  // country code\n    0x01,                  // num desc\n    0x22,                  // report desc type\n    sizeof(hidDescriptor), // size of 0x22\n};\n\nstatic const InterfaceInfo ifaceInfo = {\n    &reportDesc,\n    sizeof(reportDesc),\n    1,\n    {\n        2,    // numEndpoints\n        0x03, /// class code - HID\n        0x00, // subclass\n        0x00, // protocol\n        0x00, //\n        0x00, //\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n\nint HF2::stdRequest(UsbEndpointIn &ctrl, USBSetup &setup)\n{\n    if (setup.bRequest == USB_REQ_GET_DESCRIPTOR)\n    {\n        if (setup.wValueH == 0x21)\n        {\n            InterfaceDescriptor tmp;\n            fillInterfaceInfo(&tmp);\n            return ctrl.write(&tmp, sizeof(tmp));\n        }\n        else if (setup.wValueH == 0x22)\n        {\n            return ctrl.write(hidDescriptor, sizeof(hidDescriptor));\n        }\n    }\n    return DEVICE_NOT_SUPPORTED;\n}\n\nconst InterfaceInfo *HF2::getInterfaceInfo()\n{\n    return &ifaceInfo;\n}\n\nint HF2::sendSerial(const void *data, int size, int isError)\n{\n    if (!gotSomePacket) return DEVICE_OK;\n    return send(data, size, isError ? HF2_FLAG_SERIAL_ERR : HF2_FLAG_SERIAL_OUT);\n}\n\n// Recieve HF2 message\n// Does not block. Will store intermediate data in pkt.\n// `serial` flag is cleared if we got a command message.\nint HF2::recv() {\n    uint8_t buf[64];\n    int len = out->read(buf, sizeof(buf));\n    if (len <= 0)\n        return len;\n\n    uint8_t tag = buf[0];\n    // serial packets not allowed when in middle of command packet\n    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT));\n    int size = tag & HF2_SIZE_MASK;\n    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf));\n    memcpy(pkt.buf + pkt.size, buf + 1, size);\n    pkt.size += size;\n    tag &= HF2_FLAG_MASK;\n    if (tag != HF2_FLAG_CMDPKT_BODY) {\n        if (tag == HF2_FLAG_CMDPKT_LAST)\n            pkt.serial = 0;\n        else if (tag == HF2_FLAG_SERIAL_OUT)\n            pkt.serial = 1;\n        else\n            pkt.serial = 2;\n        int sz = pkt.size;\n        pkt.size = 0;\n        return sz;\n    }\n    return 0;\n}\n\n// Send HF2 message.\n// Use command message when flag == HF2_FLAG_CMDPKT_LAST\n// Use serial stdout for HF2_FLAG_SERIAL_OUT and stderr for HF2_FLAG_SERIAL_ERR.\nint HF2::send(const void *data, int size, int flag0) {\n    uint8_t buf[64];\n    const uint8_t *ptr = (const uint8_t *)data;\n\n    if (!CodalUSB::usbInstance->isInitialised())\n        return -1;\n\n    for (;;) {\n        int s = 63;\n        int flag = flag0;\n        if (size <= 63) {\n            s = size;\n        } else {\n            if (flag == HF2_FLAG_CMDPKT_LAST)\n                flag = HF2_FLAG_CMDPKT_BODY;\n        }\n        buf[0] = flag | s;\n        memcpy(buf + 1, ptr, s);\n        if (in->write(buf, sizeof(buf)) < 0)\n            return -1;\n        ptr += s;\n        size -= s;\n        if (!size)\n            break;\n    }\n    return 0;\n}\n\nint HF2::sendResponse(int size) {\n    return send(pkt.buf, 4 + size, HF2_FLAG_CMDPKT_LAST);\n}\n\nint HF2::sendResponseWithData(const void *data, int size) {\n    int res;\n\n    if (size <= (int)sizeof(pkt.buf) - 4) {\n        __disable_irq();\n        memcpy(pkt.resp.data8, data, size);\n        __enable_irq();\n        res = sendResponse(size);\n    } else {\n        __disable_irq();\n        send(pkt.buf, 4, HF2_FLAG_CMDPKT_BODY);\n        res = send(data, size, HF2_FLAG_CMDPKT_LAST);\n        __enable_irq();\n    }\n\n    return res;\n}\n\nstatic void copy_words(void *dst0, const void *src0, uint32_t n_words) {\n    uint32_t *dst = (uint32_t *)dst0;\n    const uint32_t *src = (const uint32_t *)src0;\n    while (n_words--)\n        *dst++ = *src++;\n}\n\n#define DBL_TAP_PTR ((volatile uint32_t *)(HMCRAMC0_ADDR + HMCRAMC0_SIZE - 4))\n#define DBL_TAP_MAGIC_QUICK_BOOT 0xf02669ef\n\nint HF2::endpointRequest()\n{\n    int sz = recv();\n\n    if (!sz)\n        return 0;\n\n    uint32_t tmp;\n\n    if (pkt.serial) {\n        // TODO raise some event?\n        return 0;\n    }\n\n    LOG(\"HF2 sz=%d CMD=%x\", sz, pkt.buf32[0]);\n\n    // one has to be careful dealing with these, as they share memory\n    HF2_Command *cmd = &pkt.cmd;\n    HF2_Response *resp = &pkt.resp;\n\n    uint32_t cmdId = cmd->command_id;\n    resp->tag = cmd->tag;\n    resp->status16 = HF2_STATUS_OK;\n\n#define checkDataSize(str, add) usb_assert(sz == 8 + (int)sizeof(cmd->str) + (int)(add))\n\n    gotSomePacket = true;\n\n    switch (cmdId) {\n    case HF2_CMD_INFO:\n        return sendResponseWithData(uf2_info(), strlen(uf2_info()));\n\n    case HF2_CMD_BININFO:\n        resp->bininfo.mode = HF2_MODE_USERSPACE;\n        resp->bininfo.flash_page_size = 0;\n        resp->bininfo.flash_num_pages = 0;\n        resp->bininfo.max_message_size = sizeof(pkt.buf);\n        return sendResponse(sizeof(resp->bininfo));\n\n    case HF2_DBG_RESTART:\n        *HF2_DBG_MAGIC_PTR = HF2_DBG_MAGIC_START;\n        target_reset();\n        break;\n\n    case HF2_CMD_RESET_INTO_APP:\n        *DBL_TAP_PTR = DBL_TAP_MAGIC_QUICK_BOOT;\n        // fall-through\n    case HF2_CMD_RESET_INTO_BOOTLOADER:\n        target_reset();\n        break;\n\n    case HF2_CMD_START_FLASH:\n        sendResponse(0);\n        hf2_handover(in->ep);\n        usb_assert(0); // should not be reached\n        break;\n\n    case HF2_CMD_WRITE_WORDS:\n        checkDataSize(write_words, cmd->write_words.num_words << 2);\n        copy_words((void *)cmd->write_words.target_addr, cmd->write_words.words,\n                   cmd->write_words.num_words);\n        break;\n\n    case HF2_CMD_READ_WORDS:\n        checkDataSize(read_words, 0);\n        tmp = cmd->read_words.num_words;\n        usb_assert(tmp <= sizeof(pkt.buf) / 4 - 1);\n        copy_words(resp->data32, (void *)cmd->read_words.target_addr, tmp);\n        return sendResponse(tmp << 2);\n\n    case HF2_CMD_DMESG:\n#if DEVICE_DMESG_BUFFER_SIZE > 0\n        return sendResponseWithData(codalLogStore.buffer, codalLogStore.ptr);\n#else\n        break;\n#endif\n\n    case HF2_DBG_GET_GLOBAL_STATE: {\n        HF2_GLOBAL_STATE_Result gstate = {\n            .num_globals = (uint32_t)getNumGlobals(), //\n            .globals_addr = (uint32_t)globals,\n        };\n        return sendResponseWithData(&gstate, sizeof(gstate));\n    }\n\n    case HF2_DBG_RESUME:\n        globals[0] = (TValue)cmd->data32[0];\n        resume = true;\n        return sendResponse(0);\n\n    case HF2_DBG_GET_STACK:\n        return sendResponseWithData(stackCopy, stackSize);\n\n    default:\n        // command not understood\n        resp->status16 = HF2_STATUS_INVALID_CMD;\n        break;\n    }\n\n    return sendResponse(0);\n}\n\nHF2::HF2(HF2_Buffer &p) : USBHID(), pkt(p), gotSomePacket(false) {}\n\n//\n//\n// WebUSB\n//\n//\n\nWebHF2::WebHF2(HF2_Buffer &p) : HF2(p) {}\n\nstatic const InterfaceInfo ifaceInfoWeb = {\n    NULL,\n    0,\n    1,\n    {\n        2,    // numEndpoints\n        0xff, /// class code - HID\n        42, // subclass\n        0x01, // protocol\n        0x00, //\n        0x00, //\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n\nconst InterfaceInfo *WebHF2::getInterfaceInfo()\n{\n    return &ifaceInfoWeb;\n}\n\n//\n//\n// Debugger\n//\n//\n\nstruct ExceptionContext {\n    uint32_t excReturn; // 0xFFFFFFF9\n    uint32_t r0;\n    uint32_t r1;\n    uint32_t r2;\n    uint32_t r3;\n    uint32_t r12;\n    uint32_t lr;\n    uint32_t faultInstrAddr;\n    uint32_t psr;\n};\n\nstruct Paused_Data {\n    uint32_t pc;\n};\nstatic Paused_Data pausedData;\n\nvoid bkptPaused() {\n    \n// waiting for https://github.com/lancaster-university/codal/pull/14\n#ifdef DEVICE_GROUP_ID_USER\n    // the loop below counts as \"system\" task, and we don't want to pause ourselves\n    fiber_set_group(DEVICE_GROUP_ID_SYSTEM);\n    // pause everyone else\n    fiber_pause_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    while (!resume) {\n        // DMESG(\"BKPT\");\n        hf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        hf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        webhf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        webhf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        // TODO use an event\n        for (int i = 0; i < 20; ++i) {\n            if (resume)\n                break;\n            fiber_sleep(50);\n        }\n    }\n\n    if (stackCopy) {\n        xfree(stackCopy);\n        stackCopy = NULL;\n    }\n\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_resume_group(DEVICE_GROUP_ID_USER);\n    // go back to user mode\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    resume = false;\n}\n\nextern \"C\" void handleHardFault(ExceptionContext *ectx) {\n    auto instr = (uint16_t *)ectx->faultInstrAddr;\n\n    DMESG(\"FLT %p\", instr);\n\n    if (ectx->faultInstrAddr & 0x80000000) {\n        ectx->faultInstrAddr &= ~0x80000000;\n        // switch to step-over mode\n        globals[0] = (TValue)3;\n        return;\n    }\n\n    DMESG(\"BB %p %p %p lr=%p r0=%p\", instr[-1], instr[0], instr[1], ectx->lr, ectx->r0);\n\n    if (instr[0] == 0x6840) {\n        // ldr r0, [r0, #4] -- entry breakpoint\n        ectx->faultInstrAddr += 2;\n        // we're being ask for step-over mode\n        if (ectx->r0 == 3) {\n            // switch to debugger-attached-no-stepping mode\n            globals[0] = (TValue)0;\n            ectx->lr |= 0x80000000;\n        }\n        return;\n    }\n\n    if (instr[0] == 0x6800) {\n        // ldr r0, [r0, #0]\n        ectx->lr = ectx->faultInstrAddr + 3; // next instruction + thumb mode\n        pausedData.pc = ectx->faultInstrAddr + 2;\n        void *ssp = (void *)(ectx + 1);\n        stackSize = DEVICE_STACK_BASE - (uint32_t)ssp;\n        if (stackCopy)\n            xfree(stackCopy);\n        stackCopy = xmalloc(stackSize);\n        memcpy(stackCopy, ssp, stackSize);\n        ectx->faultInstrAddr = ((uint32_t)(&bkptPaused) & (~1U));\n        return;\n    }\n\n    while (1) {\n    }\n}\n\nextern \"C\" void HardFault_Handler(void) {\n    asm(\"push {lr}; mov r0, sp; bl handleHardFault; pop {pc}\");\n}\n\n#endif",
      "hf2.h": "#ifndef DEVICE_HF2_H\n#define DEVICE_HF2_H\n\n#if CONFIG_ENABLED(DEVICE_USB)\n\n#include \"HID.h\"\n#include \"uf2hid.h\"\n\n#define HF2_BUF_SIZE 256\n\ntypedef struct\n{\n    uint16_t size;\n    uint8_t serial;\n    union {\n        uint8_t buf[HF2_BUF_SIZE];\n        uint32_t buf32[HF2_BUF_SIZE / 4];\n        uint16_t buf16[HF2_BUF_SIZE / 2];\n        HF2_Command cmd;\n        HF2_Response resp;\n    };\n} HF2_Buffer;\n\nclass HF2 : public codal::USBHID\n{\npublic:\n    HF2_Buffer &pkt;\n    bool gotSomePacket;\n\n    int sendResponse(int size);\n    int send(const void *data, int size, int flag);\n    int recv();\n    int sendResponseWithData(const void *data, int size);\n\n    HF2(HF2_Buffer &pkt);\n    virtual int endpointRequest();\n    virtual int stdRequest(UsbEndpointIn &ctrl, USBSetup& setup);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    int sendSerial(const void *data, int size, int isError = 0);\n};\n\nclass WebHF2 : public HF2\n{\npublic:\n    WebHF2(HF2_Buffer &pkt);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    virtual bool enableWebUSB() { return true; }\n};\n\n#endif\n\n#endif\n",
      "hf2dbg.h": "#ifndef HF2DBG_H\n#define HF2DBG_H 1\n\n// we use a location at the top of the stack to store a magic value\n// which causes us to stop at the very first break point in the program\n#define HF2_DBG_MAGIC_PTR ((uint32_t *)(DEVICE_STACK_BASE - (DEVICE_STACK_SIZE - 4)))\n#define HF2_DBG_MAGIC_START 0xf0ebac7f\n\n#define HF2_DBG_GET_GLOBAL_STATE 0x53fc66e0\nstruct HF2_GLOBAL_STATE_Result {\n    uint32_t num_globals;\n    uint32_t globals_addr;\n};\n\n#define HF2_DBG_RESTART 0x1120bd93\n#define HF2_DBG_RESUME 0x27a55931\n#define HF2_EV_DBG_PAUSED 0x3692f9fd\n#define HF2_DBG_GET_STACK 0x70901510\n\n#endif\n",
      "i2c.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n    static CODAL_I2C *i2c;\n\n    static void initI2C() {\n      if (NULL == i2c) {\n        i2c = new CODAL_I2C(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL));\n      }\n    }\n\n      /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //%\n    Buffer i2cReadBuffer(int address, int size, bool repeat = false)\n    {\n      initI2C();\n      Buffer buf = mkBuffer(NULL, size);\n      int status = i2c->read(address << 1, buf->data, size, repeat);\n      if (status != ErrorCode::DEVICE_OK) {\n        decrRC(buf);\n        buf = 0;\n      }\n      return buf;\n    }\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //%\n    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)\n    {\n      initI2C();\n      return i2c->write(address << 1, buf->data, buf->length, repeat);\n    }\n}",
      "i2c.ts": "namespace pins {\n    /**\n     * Read one number from an I2C address.\n     */\n    //% help=pins/i2c-read-number weight=5 group=\"i2c\" inlineInputMode=\"external\"\n    //% blockId=pins_i2c_readnumber block=\"i2c read number at address %address|of format %format|repeated %repeated\"\n    export function i2cReadNumber(address: number, format: NumberFormat, repeated?: boolean): number {\n        const buf = pins.i2cReadBuffer(address, pins.sizeOf(format), repeated)\n        return buf.getNumber(format, 0)\n    }\n\n    /**\n     * Write one number to an I2C address.\n     */\n    //% help=pins/i2c-write-number weight=4 group=\"i2c\"\n    //% blockId=i2c_writenumber block=\"i2c write number|at address %address|with value %value|of format %format|repeated %repeated\"\n    export function i2cWriteNumber(address: number, value: number, format: NumberFormat, repeated?: boolean): void {\n        const buf = control.createBuffer(pins.sizeOf(format))\n        buf.setNumber(format, 0, value)\n        pins.i2cWriteBuffer(address, buf, repeated)\n    }\n\n    export class I2CDevice {\n        public address: number;\n        private _hasError: boolean;\n        constructor(address: number) {\n            this.address = address\n        }\n        public readInto(buf: Buffer, repeat = false, start = 0, end: number = null) {\n            if (end === null)\n                end = buf.length\n            if (start >= end)\n                return\n            let res = i2cReadBuffer(this.address, end - start, repeat)\n            if (!res) {\n                this._hasError = true\n                return\n            }\n            buf.write(start, res)\n        }\n        public write(buf: Buffer, repeat = false) {\n            let res = i2cWriteBuffer(this.address, buf, repeat)\n            if (res) {\n                this._hasError = true\n            }\n        }\n        public begin(): I2CDevice {\n            this._hasError = false;\n            return this;\n        }\n        public end() {\n        }\n        public ok() {\n            return !this._hasError\n        }\n    }\n}",
      "ns.ts": "/**\n * Events and data from sensors.\n */\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\n//% groups='[\"other\", \"More\"]'\nnamespace input {\n}\n\n/**\n * Servos\n */\n//% color=\"#03AA74\" weight=88 icon=\"\\uf021\"\nnamespace servos {\n\n}\n\n/**\n * A Joint Asynchronous Communications, Device Agnostic Control.\n */\n//% color=\"#E79251\" weight=1 icon=\"\\uf185\"\n//% groups='[\"Broadcast\", \"Console\", \"Control\"]'\n//% blockGap=8\nnamespace jacdac {\n\n}",
      "pins.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\nstatic DevicePin **pinPtrs;\nstatic uint8_t numPinPtrs;\nstatic uint8_t pinPos[DEV_NUM_PINS];\n\n//%\nDevicePin *getPin(int id) {\n    if (id < 0 || id >= DEV_NUM_PINS)\n        target_panic(PANIC_NO_SUCH_PIN);\n\n    // we could use lookupComponent() here - it would be slightly slower\n\n    int ptr = pinPos[id];\n    if (ptr == 0) {\n        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));\n        bool isAnalog = IS_ANALOG_PIN(id);\n        // GCTODO\n        pinPtrs[numPinPtrs++] =\n            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,\n                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);\n        ptr = numPinPtrs;\n        pinPos[id] = ptr;\n    }\n    return pinPtrs[ptr - 1];\n}\n\n//%\nDevicePin *getPinCfg(int key) {\n    return getPin(getConfig(key));\n}\n\nvoid linkPin(int from, int to) {\n    if (from < 0 || from >= DEV_NUM_PINS)\n        target_panic(PANIC_NO_SUCH_PIN);\n    getPin(to);\n    pinPos[from] = pinPos[to];\n}\n\n//%\nDevicePin *lookupPin(int pinName) {\n    if (pinName < 0 || pinName == 0xff)\n        return NULL;\n    return getPin(pinName);\n}\n\nCodalComponent *lookupComponent(int id) {\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; ++i) {\n        if (CodalComponent::components[i] && CodalComponent::components[i]->id == id)\n            return CodalComponent::components[i];\n    }\n    return NULL;\n}\n\n} // namespace pxt\n\nnamespace pins {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n * Get the duration of the last pulse in microseconds. This function should be called from a\n * ``onPulsed`` handler.\n */\n//% help=pins/pulse-duration blockGap=8\n//% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n//% weight=19\nint pulseDuration() {\n    return pxt::lastEvent.timestamp;\n}\n} // namespace pins\n",
      "pins.h": "#ifndef __PXT_PINS_H\n#define __PXT_PINS_H\n\n#define BUTTON_ACTIVE_HIGH_PULL_DOWN (ACTIVE_HIGH | 0x10)\n#define BUTTON_ACTIVE_HIGH_PULL_UP (ACTIVE_HIGH | 0x20)\n#define BUTTON_ACTIVE_HIGH_PULL_NONE (ACTIVE_HIGH | 0x30)\n#define BUTTON_ACTIVE_LOW_PULL_DOWN (ACTIVE_LOW | 0x10)\n#define BUTTON_ACTIVE_LOW_PULL_UP (ACTIVE_LOW | 0x20)\n#define BUTTON_ACTIVE_LOW_PULL_NONE (ACTIVE_LOW | 0x30)\n\n#define PIN(name) ((PinName)pxt::getConfig(CFG_PIN_##name, -1))\n#define LOOKUP_PIN(name) pxt::lookupPin(PIN(name))\n\n// these can be overridden in platform.h\n#ifndef CODAL_PIN\n#define CODAL_PIN CODAL_MBED::Pin\n#endif\n\n#ifndef CODAL_TIMER\n#define CODAL_TIMER CODAL_MBED::Timer\n#endif\n\n#ifndef CODAL_SPI\n#define CODAL_SPI CODAL_MBED::SPI\n#endif\n\n#ifndef CODAL_I2C\n#define CODAL_I2C CODAL_MBED::I2C\n#endif\n\n#ifndef CODAL_SERIAL\n#define CODAL_SERIAL CODAL_MBED::Serial\n#endif\n\n#ifndef IS_ANALOG_PIN\n#define IS_ANALOG_PIN(id) ((DEV_ANALOG_PINS >> (id)) & 1)\n#endif\n\ntypedef CODAL_PIN DevicePin;\n\ntypedef DevicePin *DigitalInOutPin;\ntypedef DevicePin *AnalogInOutPin;\ntypedef DevicePin *AnalogInPin;\ntypedef DevicePin *AnalogOutPin;\ntypedef DevicePin *PwmPin;\ntypedef DevicePin *PwmOnlyPin;\ntypedef Button *Button_;\n\nnamespace pxt {\nDevicePin *getPin(int id);\nDevicePin *getPinCfg(int key);\nDevicePin *lookupPin(int pinName);\nvoid linkPin(int from, int to);\nButton *getButtonByPin(int pin, int flags);\nAbstractButton *getButton(int id);\nMultiButton *getMultiButton(int id, int pinA, int pinB, int flags);\nCodalComponent *lookupComponent(int id);\n}\n\n#define PINOP(op) name->op\n\n#endif\n",
      "pins.ts": "//% noRefCounting fixedInstances\ninterface DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogOutPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInOutPin extends AnalogInPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmOnlyPin extends DigitalInOutPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmPin extends PwmOnlyPin, AnalogInOutPin {\n}\n\n/**\n * Control currents in Pins for analog/digital signals, servos, i2c, ...\n */\n//% color=#A80000 weight=85 icon=\"\\uf140\" advanced=true\n//% groups='[\"other\", \"Servo\", \"i2c\"]'\nnamespace pins {\n\n}",
      "pinsAnalog.cpp": "#include \"pxt.h\"\n\nnamespace AnalogInPinMethods {\n\n/**\n * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n * @param name pin to write to\n */\n//% help=pins/analog-read weight=53\n//% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n//% blockNamespace=pins\n//% parts=\"photocell\" trackArgs=0\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nint analogRead(AnalogInPin name) {\n    return PINOP(getAnalogValue());\n}\n}\n\nnamespace AnalogOutPinMethods {\nvoid analogWrite(AnalogOutPin name, int value) __attribute__ ((weak));\n\n/**\n * Set the connector value as analog. Value must be comprised between 0 and 1023.\n * @param name pin name to write to\n * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n */\n//% help=pins/analog-write weight=52\n//% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n//% blockNamespace=pins\n//% parts=\"analogled\" trackArgs=0\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.min=0 value.max=1023\nvoid analogWrite(AnalogOutPin name, int value) {\n    PINOP(setAnalogValue(value));\n}\n}",
      "pinsDigital.cpp": "#include \"pxt.h\"\n\nenum class PulseValue {\n    //% block=high\n    High = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=low\n    Low = DEVICE_PIN_EVT_PULSE_LO\n};\n\nenum class PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=\"pulse low\"\n    PulseLow = DEVICE_PIN_EVT_PULSE_LO,\n    //% block=\"rise\"\n    Rise = DEVICE_PIN_EVT_RISE,\n    //% block=\"fall\"\n    Fall = DEVICE_PIN_EVT_FALL,\n};\n\nenum class PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2\n};\n\nnamespace DigitalInOutPinMethods {\n/**\n * Read a pin or connector as either 0 or 1\n * @param name pin to read from\n */\n//% help=pins/digital-read weight=61\n//% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n//% parts=\"slideswitch\" trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nbool digitalRead(DigitalInOutPin name) {\n    return PINOP(getDigitalValue()) != 0;\n}\n\n/**\n     * Set a pin or connector value to either 0 or 1.\n    * @param name pin to write to\n    * @param value value to set on the pin\n    */\n//% help=pins/digital-write weight=60\n//% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n//% parts=\"led\" trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid digitalWrite(DigitalInOutPin name, bool value) {\n    PINOP(setDigitalValue(value));\n}\n\n/**\n* Make this pin a digital input, and create events where the timestamp is the duration\n* that this pin was either ``high`` or ``low``.\n*/\n//% help=pins/on-pulsed weight=16 blockGap=8\n//% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% parts=\"slideswitch\" trackArgs=0\n//% deprecated=1 hidden=1\nvoid onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {\n    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n    registerWithDal(pin->id, (int)pulse, body);\n}\n\n/**\n* Register code to run when a pin event occurs. \n*/\n//% help=pins/on-event weight=20 blockGap=8\n//% blockId=pinsonevent block=\"on|pin %pin|%event\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% parts=\"slideswitch\" trackArgs=0\nvoid onEvent(DigitalInOutPin pin, PinEvent event, Action body) {\n    switch(event) {\n        case PinEvent::PulseHigh:\n        case PinEvent::PulseLow:\n            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n            registerWithDal(pin->id, (int)event, body);\n            break;\n        case PinEvent::Rise:\n        case PinEvent::Fall:\n            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);\n            registerWithDal(pin->id, (int)event, body);\n            break;    \n    }    \n}\n\n/**\n* Return the duration of a pulse in microseconds\n* @param name the pin which measures the pulse\n* @param value the value of the pulse (default high)\n* @param maximum duration in micro-seconds\n*/\n//% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (us)\"\n//% weight=18 blockGap=8\n//% help=\"pins/pulse-in\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\nint pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {\n    int pulse = PulseValue::High == value ? 1 : 0;\n    uint64_t tick = system_timer_current_time_us();\n    uint64_t maxd = (uint64_t)maxDuration;\n    while (pin->getDigitalValue() != pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n\n    uint64_t start = system_timer_current_time_us();\n    while (pin->getDigitalValue() == pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n    uint64_t end = system_timer_current_time_us();\n    return end - start;\n}\n\n/**\n* Set the pull direction of this pin.\n* @param name pin to set the pull mode on\n* @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n*/\n//% help=pins/set-pull weight=17 blockGap=8\n//% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid setPull(DigitalInOutPin name, PinPullMode pull) {\n    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp\n                                                                        ? PullMode::Up\n                                                                        : PullMode::None;\n    PINOP(setPull(m));\n}\n\n}",
      "pinsPWM.cpp": "#include \"pxt.h\"\n\nnamespace PwmPinMethods {\n}\n\nnamespace PwmOnlyPinMethods {\n\n/**\n * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n * **microseconds** or `1/1000` milliseconds.\n * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n * no effect.\n * @param name analog pin to set period to\n * @param micros period in micro seconds. eg:20000\n */\n//% help=pins/analog-set-period weight=51\n//% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid analogSetPeriod(PwmOnlyPin name, int period) {\n    PINOP(setAnalogPeriodUs(period));\n}\n\n/**\n * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n * @param name pin to write to\n * @param value angle or rotation speed\n */\n//% help=pins/servo-write weight=41 group=\"Servo\"\n//% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n//% parts=microservo trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.defl=90\nvoid servoWrite(PwmOnlyPin name, int value) {\n    PINOP(setServoValue(value));\n}\n\n/**\n * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n * @param name pin name\n * @param duration pulse duration in micro seconds, eg:1500\n */\n//% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n//% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n//% parts=microservo blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid servoSetPulse(PwmOnlyPin name, int duration) {\n    PINOP(setServoPulseUs(duration));\n}\n\n}",
      "pinscompat.ts": "// this type alias is required for backward compatibility\n// it gets overriden in microbit (DigitalPin is an enum over there)\ntype DigitalPin = DigitalInOutPin;\ntype AnalogPin = AnalogInOutPin;",
      "platform.cpp": "//  Original: pxt-maker/libs/core---stm32bluepill/platform.cpp\n#include \"platform.h\"\n#include \"pxt.h\"\n\nextern \"C\" void debug_print(const char *s);    //  TODO: Write a string to the buffered debug log.\nextern \"C\" void debug_println(const char *s);  //  TODO: Write a string plus newline to the buffered debug log.\nextern \"C\" void debug_flush(void);             //  TODO: Flush the buffer of the debug log so that buffered data will appear.\nextern \"C\" void debug_force_flush(void);       //  TODO: Flush the buffer of the debug log so that buffered data will appear.\nextern \"C\" int start_background_tasks(void);\n\nnamespace pxt {\n    extern CODAL_TIMER devTimer;\n\n    static void initRandomSeed() {\n        //  TODO\n    }\n\n    void platformSendSerial(const char *data, int len) {\n        debug_println(\"---pxt::platformSendSerial\"); \n    }\n\n    void platform_init() {\n        //   This is called after cpu_clock_init.  CODAL scheduler is already started.\n        debug_println(\"---pxt::platform_init\");\n\n        //  Start the background tasks to flush the log and wait for restart requests.\n        start_background_tasks();\n\n        initRandomSeed();\n        debug_force_flush(); ////\n        //  TODO: setSendToUART(platformSendSerial);\n    }\n}\n\nvoid cpu_clock_init() {\n    //  This is called before platform_init().  CODAL scheduler is not started yet.  Starting background tasks will fail.\n    debug_println(\"---pxt::cpu_clock_init\");\n\n    //  Init the CODAL timer.\n    devTimer.init();\n}\n\n/* Log:\nplatform_start_timer\nrtc awake...\nrtc awake ok\n----bootloader\nboot_target_get_serial_number\nusb_set_serial_number\napp exists\n----application mode\nusb_setup\nflash allow 08006800 to 08010000\nsync! sync! sync! sync! ---pxt::cpu_clock_init\ntimer init\nstart bg tasks 0\n*** ERROR: create fibre failed\nset restart callback 0800bb71\nstart bg tasks 0\n*** ERROR: create fibre failed\n*** ERROR: unable to listen for restart event fffffc16\npin 0\n---pxt::platform_init\n---pxt::initRandomSeed\npin 0\nwt <4> pin 1\nwt <1> pin 0\nwt <4> pin 1\nwt <1> pin 0\nwt <4> pin 1\nwt <1> pin 0\nwt <4.SET_ADR\nu{ ........bos typ 80, req 06, val 0f00, idx 0000, len 0005, GET_DES_BOS t 0f i 00\nbos typ 80, req 06, val 0f00, idx 0000, len 0039, GET_DES_BOS t 0f i 00\n...weburl typ c0, req 22, val 0001, idx 0002, len 00ff\n.>>  typ 00, req 09, val 0001, idx 0000, len 0000, SET_CFG     t 00 i 01\nHF2 config\n.......>>  typ 80, req 08, val 0000, idx 0000, len ,restart callback\nhf2 >> bininfo\nhf2 << 25 / 58 68 56 00 00 02 00 00 00 00 01 00 00 00 01 00 00 40 04 00 00 72 10 e2 5e\n} > pin 1\nwt <1> restart handler\nrestarting...\npin 0\nwt <4> pin 1\nwt <1> done\n----platform_setup\n*/\n",
      "platform.h": "//  Original: pxt-maker/libs/core---stm32bluepill/platform.h\n#ifndef __PXT_PLATFORM_H\n#define __PXT_PLATFORM_H\n\n#include \"CmI2C.h\"\n#include \"CmSPI.h\"\n#include \"CmTimer.h\"\n#include \"CmPinName.h\"\n#include \"STM32BluePillPin.h\"\n#include \"MultiButton.h\"\n\n#define PAGE_SIZE 1024\n\n//  How many pins this device has.\n#define DEV_NUM_PINS 128\n\n#define DEV_PWM_PINS 0x0000E0030FCEULL\n#define DEV_AIN_PINS 0x003f000300ffULL\n\n// Codal doesn't yet distinguish between PWM and AIN\n#define DEV_ANALOG_PINS (DEV_PWM_PINS | DEV_AIN_PINS)\n\n#define CODAL_I2C codal::_cm::I2C\n#define CODAL_PIN codal::STM32BluePillPin\n#define CODAL_SPI codal::_cm::SPI\n#define CODAL_TIMER codal::_cm::Timer\n\n#define IMAGE_BITS 4\n\n// From pxt-common-packages/libs/base/pxtbase.h:\n// #define PXT_IN_ISR() (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)\n\nextern \"C\" uint32_t target_in_isr(void);\n#define PXT_IN_ISR() target_in_isr()\n\n// The parameters below needs tuning!\n\n//  TODO: Sync with pxt-common-packages/libs/core/pins.h and codal-libopencm3/stm32/cm/CmPinName.h\n#define CFG_PIN_PA0 100\n#define CFG_PIN_PA1 101\n#define CFG_PIN_PA2 102\n#define CFG_PIN_PA3 103\n#define CFG_PIN_PA4 104\n#define CFG_PIN_SCL1 105\n#define CFG_PIN_SDA1 106\n#define CFG_PIN_NSS1 107\n#define CFG_PIN_SCK1 108\n#define CFG_PIN_MISO1 109\n#define CFG_PIN_MOSI1 110\n#define CFG_PIN_TX2 111\n#define CFG_PIN_RX2 112\n\n#ifdef JUST_FOR_DAL_D_TS_CPP_WILL_IGNORE\n#define NOTUSED_PA_0 0x00\n#endif\n\n#endif",
      "pxt.h": "#ifndef __PXT_H\n#define __PXT_H\n\n#include \"pxtbase.h\"\n\n#include \"CodalConfig.h\"\n#include \"CodalHeapAllocator.h\"\n#include \"CodalDevice.h\"\n#include \"CodalDmesg.h\"\n#include \"ErrorNo.h\"\n#include \"Timer.h\"\n#include \"Matrix4.h\"\n#include \"CodalCompat.h\"\n#include \"CodalComponent.h\"\n#include \"ManagedType.h\"\n#include \"Event.h\"\n#include \"NotifyEvents.h\"\n#include \"Button.h\"\n#include \"CodalFiber.h\"\n#include \"MessageBus.h\"\n\nusing namespace codal;\n\n// codal::ManagedString compat\n#define MSTR(s) codal::ManagedString((s)->data, (s)->length)\n#define PSTR(s) mkString((s).toCharArray(), (s).length())\n\n#include \"pins.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"hf2.h\"\n#include \"hf2dbg.h\"\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n#include \"HIDMouse.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n#include \"HIDKeyboard.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n#include \"HIDJoystick.h\"\n#endif\n#endif\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nextern CodalUSB usb;\nextern HF2 hf2;\nextern WebHF2 webhf2;\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nextern USBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nextern USBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nextern USBHIDJoystick joystick;\n#endif\n#endif\n\n// Utility functions\nextern Event lastEvent;\nextern CODAL_TIMER devTimer;\nextern MessageBus devMessageBus;\nextern codal::CodalDevice device;\n} // namespace pxt\n\nnamespace jacdac {\nclass JDProxyDriver;\n} // namespace network\n\ntypedef jacdac::JDProxyDriver* JacDacDriverStatus;\n\n#define DEVICE_ID_BUTTON_SLIDE 3000\n#define DEVICE_ID_MICROPHONE 3001\n#define DEVICE_ID_FIRST_BUTTON 4000\n#define DEVICE_ID_FIRST_TOUCHBUTTON 4100\n\n#endif\n",
      "pxt.json": "{\n    \"name\": \"core---stm32bluepill\",\n    \"description\": \"The core library for Codal-based targets\",\n    \"files\": [\n        \"README.md\",\n        \"dal.d.ts\",\n        \"codal.cpp\",\n        \"usb.cpp\",\n        \"pxt.h\",\n        \"platform.h\",\n        \"platform.cpp\",\n        \"pxtcore.h\",\n        \"pins.h\",\n        \"pins.cpp\",\n        \"pinsAnalog.cpp\",\n        \"pinsDigital.cpp\",\n        \"pinsPWM.cpp\",\n        \"pins.ts\",\n        \"pinscompat.ts\",\n        \"control.cpp\",\n        \"i2c.cpp\",\n        \"i2c.ts\",\n        \"spi.cpp\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"hf2.cpp\",\n        \"hf2.h\",\n        \"hf2dbg.h\",\n        \"uf2format.h\",\n        \"uf2hid.h\",\n        \"ns.ts\",\n        \"dmac.cpp\",\n        \"dmac.h\",\n        \"timer.ts\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"yotta\": {\n        \"config\": {\n            \"codal\": {\n                \"component_count\": 64,\n                \"dmesg_buffer_size\": 1024\n            }\n        }\n    },\n    \"public\": true,\n    \"dalDTS\": {\n        \"includeDirs\": [\n            \"libraries/codal-core/inc\",\n            \"pxtapp\"\n        ],\n        \"excludePrefix\": [\n            \"USB_\",\n            \"REQUEST_\",\n            \"LIS3DH_\",\n            \"FXOS8700_\",\n            \"HF2_\",\n            \"PXT_REF_TAG_\",\n            \"MS_\",\n            \"SCSI_\"\n        ]\n    },\n    \"dependencies\": {\n        \"base\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.5.73\"\n    }\n}",
      "pxtcore.h": "#ifndef __PXTCORE_H\n#define __PXTCORE_H\n\n#include \"CodalDmesg.h\"\n#include \"CodalHeapAllocator.h\"\n\n#define itoa(a, b) codal::itoa(a, b)\n\n#define GC_GET_HEAP_SIZE() device_heap_size(0)\n#define xmalloc device_malloc\n#define xfree device_free\n\n#define GC_MAX_ALLOC_SIZE (16 * 1024)\n\n#endif\n",
      "pxtparts.json": "{\n    \"buttons\": {\n        \"simulationBehavior\": \"buttons\",\n        \"visual\": {\n            \"builtIn\": \"buttons\",\n            \"width\": 75,\n            \"height\": 45,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 45\n                }\n            ]\n        },\n        \"numberOfPins\": 2,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"Button.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"button\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"slideswitch\": {\n        \"numberOfPins\": 3,\n        \"simulationBehavior\": \"slideswitch\",\n        \"visual\": {\n            \"builtIn\": \"slideswitch\",\n            \"width\": 100,\n            \"height\": 100,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalRead,DigitalInOutPin.onPulsed,DigitalInOutPin.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"microservo\": {\n        \"simulationBehavior\": \"microservo\",\n        \"visual\": {\n            \"builtIn\": \"microservo\",\n            \"width\": 74.85,\n            \"height\": 200,\n            \"pinDistance\": 10,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 37,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 5\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"PwmOnlyPin.servoWrite,servos.Servo.setAngle,servos.Servo.run,servos.Servo.setPulse\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"led\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"analogled\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogOutPin.analogWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"photocell\": {\n        \"numberOfPins\": 3,\n        \"visual\": {\n            \"builtIn\": \"photocell\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"photocell\",\n        \"pinDefinitions\": [\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogInPin.analogRead\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace pins {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=pins::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Get the duration of the last pulse in microseconds. This function should be called from a\n     * ``onPulsed`` handler.\n     */\n    //% help=pins/pulse-duration blockGap=8\n    //% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n    //% weight=19 shim=pins::pulseDuration\n    function pulseDuration(): int32;\n}\n\n\ndeclare interface AnalogInPin {\n    /**\n     * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n     * @param name pin to write to\n     */\n    //% help=pins/analog-read weight=53\n    //% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n    //% blockNamespace=pins\n    //% parts=\"photocell\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=AnalogInPinMethods::analogRead\n    analogRead(): int32;\n}\n\n\ndeclare interface AnalogOutPin {\n    /**\n     * Set the connector value as analog. Value must be comprised between 0 and 1023.\n     * @param name pin name to write to\n     * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n     */\n    //% help=pins/analog-write weight=52\n    //% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n    //% blockNamespace=pins\n    //% parts=\"analogled\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.min=0 value.max=1023 shim=AnalogOutPinMethods::analogWrite\n    analogWrite(value: int32): void;\n}\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Read a pin or connector as either 0 or 1\n     * @param name pin to read from\n     */\n    //% help=pins/digital-read weight=61\n    //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n    //% parts=\"slideswitch\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::digitalRead\n    digitalRead(): boolean;\n\n    /**\n     * Set a pin or connector value to either 0 or 1.\n     * @param name pin to write to\n     * @param value value to set on the pin\n     */\n    //% help=pins/digital-write weight=60\n    //% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n    //% parts=\"led\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::digitalWrite\n    digitalWrite(value: boolean): void;\n\n    /**\n     * Make this pin a digital input, and create events where the timestamp is the duration\n     * that this pin was either ``high`` or ``low``.\n     */\n    //% help=pins/on-pulsed weight=16 blockGap=8\n    //% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% parts=\"slideswitch\" trackArgs=0\n    //% deprecated=1 hidden=1 shim=DigitalInOutPinMethods::onPulsed\n    onPulsed(pulse: PulseValue, body: () => void): void;\n\n    /**\n     * Register code to run when a pin event occurs. \n     */\n    //% help=pins/on-event weight=20 blockGap=8\n    //% blockId=pinsonevent block=\"on|pin %pin|%event\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% parts=\"slideswitch\" trackArgs=0 shim=DigitalInOutPinMethods::onEvent\n    onEvent(event: PinEvent, body: () => void): void;\n\n    /**\n     * Return the duration of a pulse in microseconds\n     * @param name the pin which measures the pulse\n     * @param value the value of the pulse (default high)\n     * @param maximum duration in micro-seconds\n     */\n    //% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (us)\"\n    //% weight=18 blockGap=8\n    //% help=\"pins/pulse-in\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4 maxDuration.defl=2000000 shim=DigitalInOutPinMethods::pulseIn\n    pulseIn(value: PulseValue, maxDuration?: int32): int32;\n\n    /**\n     * Set the pull direction of this pin.\n     * @param name pin to set the pull mode on\n     * @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n     */\n    //% help=pins/set-pull weight=17 blockGap=8\n    //% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::setPull\n    setPull(pull: PinPullMode): void;\n}\n\n\ndeclare interface PwmPin {}\n\n\ndeclare interface PwmOnlyPin {\n    /**\n     * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n     * **microseconds** or `1/1000` milliseconds.\n     * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n     * no effect.\n     * @param name analog pin to set period to\n     * @param micros period in micro seconds. eg:20000\n     */\n    //% help=pins/analog-set-period weight=51\n    //% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::analogSetPeriod\n    analogSetPeriod(period: int32): void;\n\n    /**\n     * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n     * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n     * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n     * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n     * @param name pin to write to\n     * @param value angle or rotation speed\n     */\n    //% help=pins/servo-write weight=41 group=\"Servo\"\n    //% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n    //% parts=microservo trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.defl=90 shim=PwmOnlyPinMethods::servoWrite\n    servoWrite(value?: int32): void;\n\n    /**\n     * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n     * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n     * @param name pin name\n     * @param duration pulse duration in micro seconds, eg:1500\n     */\n    //% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n    //% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n    //% parts=microservo blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::servoSetPulse\n    servoSetPulse(duration: int32): void;\n}\ndeclare namespace control {\n\n    /**\n     * Announce that an event happened to registered handlers.\n     * @param src ID of the MicroBit Component that generated the event\n     * @param value Component specific code indicating the cause of the event.\n     */\n    //% weight=21 blockGap=12 blockId=\"control_raise_event\"\n    //% help=control/raise-event\n    //% block=\"raise event|from %src|with value %value\" blockExternalInputs=1 shim=control::raiseEvent\n    function raiseEvent(src: int32, value: int32): void;\n\n    /**\n     * Determine the version of system software currently running.\n     */\n    //% blockId=\"control_device_dal_version\" block=\"device dal version\"\n    //% help=control/device-dal-version shim=control::deviceDalVersion\n    function deviceDalVersion(): string;\n\n    /**\n     * Allocates the next user notification event\n     */\n    //% help=control/allocate-notify-event shim=control::allocateNotifyEvent\n    function allocateNotifyEvent(): int32;\n\n    /** Write a message to DMESG debugging buffer. */\n    //% shim=control::dmesg\n    function dmesg(s: string): void;\n\n    /** Write a message and value (pointer) to DMESG debugging buffer. */\n    //% shim=control::dmesgPtr\n    function dmesgPtr(str: string, ptr: Object): void;\n}\ndeclare namespace pins {\n\n    /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=pins::i2cReadBuffer\n    function i2cReadBuffer(address: int32, size: int32, repeat?: boolean): Buffer;\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=pins::i2cWriteBuffer\n    function i2cWriteBuffer(address: int32, buf: Buffer, repeat?: boolean): int32;\n}\ndeclare namespace pins {\n\n    /**\n     * Write to the SPI slave and return the response\n     * @param value Data to be sent to the SPI slave\n     */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\" shim=pins::spiWrite\n    function spiWrite(value: int32): int32;\n\n    /**\n     * Writes a given command to SPI bus, and afterwards reads the response.\n     */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\" shim=pins::spiTransfer\n    function spiTransfer(command: Buffer, response: Buffer): void;\n\n    /**\n     * Sets the SPI frequency\n     * @param frequency the clock frequency, eg: 1000000\n     */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\" shim=pins::spiFrequency\n    function spiFrequency(frequency: int32): void;\n\n    /**\n     * Sets the SPI mode and bits\n     * @param mode the mode, eg: 3\n     */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\" shim=pins::spiMode\n    function spiMode(mode: int32): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "spi.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n    static codal::SPI *spi = NULL;\n    static void initSPI() {\n        if (NULL == spi)\n            spi = new CODAL_SPI(*LOOKUP_PIN(MOSI), *LOOKUP_PIN(MISO), *LOOKUP_PIN(SCK));\n    }\n\n    /**\n    * Write to the SPI slave and return the response\n    * @param value Data to be sent to the SPI slave\n    */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\"\n    int spiWrite(int value) {\n        initSPI();\n        return spi->write(value);\n    }\n\n    /**\n    * Writes a given command to SPI bus, and afterwards reads the response.\n    */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\"\n    void spiTransfer(Buffer command, Buffer response) {\n        initSPI();\n        auto cdata = NULL == command ? NULL : command->data;\n        auto clength = NULL == command ? 0 : command->length;\n        auto rdata = NULL == response ? NULL : response->data;\n        auto rlength = NULL == response ? 0 : response->length;\n        spi->transfer(cdata, clength, rdata, rlength);\n    }\n\n    /**\n    * Sets the SPI frequency\n    * @param frequency the clock frequency, eg: 1000000\n    */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\"\n    void spiFrequency(int frequency) {\n        initSPI();\n        spi->setFrequency(frequency);\n    }\n\n    /**\n    * Sets the SPI mode and bits\n    * @param mode the mode, eg: 3\n    */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\"\n    void spiMode(int mode) {\n        initSPI();\n        spi->setMode(mode);        \n    }\n}\n",
      "test.ts": "let i = 1\nlet f = 0.5\nlet plus = i + f\nlet minus = i - f\n\nlet r = Math.random()\nlet ri = Math.randomRange(5, 10)\n\nforever(() => {\n    pause(100)\n})\n",
      "timer.ts": "namespace control {\n    /**\n     * A timer\n     */\n    //% fixedInstances\n    export class Timer {\n        start: number;\n\n        constructor() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Gets the elapsed time in millis since the last reset\n         */\n        //% blockId=timerMillis block=\"%timer|millis\"\n        millis(): number {\n            return control.millis() - this.start;\n        }\n\n        /**\n         * Gets the elapsed time in seconds since the last reset\n         */\n        //% blockId=timerSeconds block=\"%timer|seconds\"\n        seconds(): number {\n            return this.millis() / 1000;\n        }\n\n        /**\n         * Resets the timer\n         */\n        //% blockId=timerRest block=\"%timer|reset\"\n        reset() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Pauses until the timer reaches the given amount of milliseconds\n         * @param ms how long to pause for, eg: 5, 100, 200, 500, 1000, 2000\n         */\n        //% blockId=timerPauseUntil block=\"%timer|pause until (ms) %ms\"\n        pauseUntil(ms: number) {\n            const remaining = this.millis() - ms;\n            pause(Math.max(0, remaining));\n        }\n    }\n\n    //% whenUsed fixedInstance block=\"timer 1\"\n    export const timer1 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 2\"\n    export const timer2 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 3\"\n    export const timer3 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 4\"\n    export const timer4 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 5\"\n    export const timer5 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 6\"\n    export const timer6 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 7\"\n    export const timer7 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 8\"\n    export const timer8 = new Timer();\n}",
      "uf2format.h": "#ifndef UF2FORMAT_H\n#define UF2FORMAT_H 1\n\n#include <stdint.h>\n#include <stdbool.h>\n\n// All entries are little endian.\n\n// if you increase that, you will also need to update the linker script file\n#define APP_START_ADDRESS 0x00002000\n\n#define UF2_MAGIC_START0 0x0A324655UL // \"UF2\\n\"\n#define UF2_MAGIC_START1 0x9E5D5157UL // Randomly selected\n#define UF2_MAGIC_END 0x0AB16F30UL    // Ditto\n\n// If set, the block is \"comment\" and should not be flashed to the device\n#define UF2_FLAG_NOFLASH 0x00000001\n\ntypedef struct {\n    // 32 byte header\n    uint32_t magicStart0;\n    uint32_t magicStart1;\n    uint32_t flags;\n    uint32_t targetAddr;\n    uint32_t payloadSize;\n    uint32_t blockNo;\n    uint32_t numBlocks;\n    uint32_t reserved;\n\n    // raw data;\n    uint8_t data[476];\n\n    // store magic also at the end to limit damage from partial block reads\n    uint32_t magicEnd;\n} UF2_Block;\n\ntypedef struct {\n    uint8_t version;\n    uint8_t ep_in;\n    uint8_t ep_out;\n    uint8_t reserved0;\n    uint32_t cbw_tag;\n    uint32_t blocks_remaining;\n    uint8_t *buffer;\n} UF2_HandoverArgs;\n\ntypedef void (*UF2_MSC_Handover_Handler)(UF2_HandoverArgs *handover);\ntypedef void (*UF2_HID_Handover_Handler)(int ep);\n\n// this is required to be exactly 16 bytes long by the linker script\ntypedef struct {\n    void *reserved0;\n    UF2_HID_Handover_Handler handoverHID;\n    UF2_MSC_Handover_Handler handoverMSC;\n    const char *info_uf2;\n} UF2_BInfo;\n\n#define UF2_BINFO ((UF2_BInfo *)(APP_START_ADDRESS - sizeof(UF2_BInfo)))\n\nstatic inline bool is_uf2_block(void *data) {\n    UF2_Block *bl = (UF2_Block *)data;\n    return bl->magicStart0 == UF2_MAGIC_START0 && bl->magicStart1 == UF2_MAGIC_START1 &&\n           bl->magicEnd == UF2_MAGIC_END;\n}\n\nstatic inline bool in_uf2_bootloader_space(const void *addr) {\n    return 0xb4 <= (uint32_t)addr && (uint32_t)addr < APP_START_ADDRESS;\n}\n\nstatic inline const char *uf2_info(void) {\n    if (in_uf2_bootloader_space(UF2_BINFO->info_uf2))\n        return UF2_BINFO->info_uf2;\n    return \"N/A\";\n}\n\n#ifdef UF2_DEFINE_HANDOVER\nstatic inline void hf2_handover(uint8_t ep) {\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_HID_Handover_Handler fn = UF2_BINFO->handoverHID;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        // Pass control to bootloader; never returns\n        fn(ep & 0xf);\n    }\n}\n\nstatic inline void check_uf2_handover(uint8_t *buffer, uint32_t blocks_remaining, uint8_t ep_in,\n                                      uint8_t ep_out, uint32_t cbw_tag) {\n    if (!is_uf2_block(buffer))\n        return;\n\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_MSC_Handover_Handler fn = UF2_BINFO->handoverMSC;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        UF2_HandoverArgs hand = {\n            1, ep_in, ep_out, 0, cbw_tag, blocks_remaining, buffer,\n        };\n        // Pass control to bootloader; never returns\n        fn(&hand);\n    }\n}\n#endif\n\n#endif\n",
      "uf2hid.h": "#ifndef UF2_HID_H\n#define UF2_HID_H 1\n\n#define HF2_CMD_BININFO 0x0001\n// no arguments\n#define HF2_MODE_BOOTLOADER 0x01\n#define HF2_MODE_USERSPACE 0x02\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n};\n\n#define HF2_CMD_INFO 0x0002\n// no arguments\n// results is utf8 character array\n\n#define HF2_CMD_RESET_INTO_APP 0x0003\n// no arguments, no result\n\n#define HF2_CMD_RESET_INTO_BOOTLOADER 0x0004\n// no arguments, no result\n\n#define HF2_CMD_START_FLASH 0x0005\n// no arguments, no result\n\n#define HF2_CMD_WRITE_FLASH_PAGE 0x0006\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[0];\n};\n// no result\n\n#define HF2_CMD_CHKSUM_PAGES 0x0007\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[0 /* num_pages */];\n};\n\n#define HF2_CMD_READ_WORDS 0x0008\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[0 /* num_words */];\n};\n\n#define HF2_CMD_WRITE_WORDS 0x0009\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[0 /* num_words */];\n};\n// no result\n\n#define HF2_CMD_DMESG 0x0010\n// no arguments\n// results is utf8 character array\n\ntypedef struct {\n    uint32_t command_id;\n    uint16_t tag;\n    uint8_t reserved0;\n    uint8_t reserved1;\n\n    union {\n        struct HF2_WRITE_FLASH_PAGE_Command write_flash_page;\n        struct HF2_WRITE_WORDS_Command write_words;\n        struct HF2_READ_WORDS_Command read_words;\n        struct HF2_CHKSUM_PAGES_Command chksum_pages;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Command;\n\ntypedef struct {\n    union {\n        uint32_t eventId;\n        struct {\n            uint16_t tag;\n            union {\n                struct {\n                    uint8_t status;\n                    uint8_t status_info;\n                };\n                uint16_t status16;\n            };\n        };\n    };\n    union {\n        struct HF2_BININFO_Result bininfo;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Response;\n\n#define HF2_FLAG_SERIAL_OUT 0x80\n#define HF2_FLAG_SERIAL_ERR 0xC0\n#define HF2_FLAG_CMDPKT_LAST 0x40\n#define HF2_FLAG_CMDPKT_BODY 0x00\n#define HF2_FLAG_MASK 0xC0\n#define HF2_SIZE_MASK 63\n\n#define HF2_STATUS_OK 0x00\n#define HF2_STATUS_INVALID_CMD 0x01\n\n#endif\n",
      "usb.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nCodalUSB usb;\n\n// share the buffer; we will crash anyway if someone talks to us over both at the same time\nHF2_Buffer hf2buf;\nHF2 hf2(hf2buf);\nWebHF2 webhf2(hf2buf);\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nUSBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nUSBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nUSBHIDJoystick joystick;\n#endif\n\nstatic const DeviceDescriptor device_desc = {\n    0x12,            // bLength\n    0x01,            // bDescriptorType\n    0x0210,          // bcdUSBL\n\n    // Class etc specified per-interface\n    0x00, 0x00, 0x00,\n\n    0x40,            // bMaxPacketSize0\n    0x03EB, // Atmel\n    0x2402, // Example device\n    0x4202,          // bcdDevice - leave unchanged for the HF2 to work\n    0x01,            // iManufacturer\n    0x02,            // iProduct\n    0x03,            // SerialNumber\n    0x01             // bNumConfigs\n};\n\n// TODO extract these from uf2_info()?\nstatic const char *string_descriptors[] = {\n    \"Example Corp.\",\n    \"PXT Device\",\n    \"42424242\",\n};\n\nstatic void start_usb() {\n    // start USB with a delay, so that user code can add new interfaces if needed\n    // (eg USB HID keyboard, or MSC)\n    fiber_sleep(100);\n    usb.start();\n}\n\nvoid usb_init() {\n    usb.stringDescriptors = string_descriptors;\n    usb.deviceDescriptor = &device_desc;\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n    usb.add(mouse);\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n    usb.add(keyboard);\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n    usb.add(joystick);\n#endif\n    usb.add(hf2);\n    usb.add(webhf2);\n    create_fiber(start_usb);\n}\n\n\n#else\nvoid usb_init() {}\n#endif\n\nstatic void (*pSendToUART)(const char *data, int len) = NULL;\nvoid setSendToUART(void (*f)(const char *, int)) {\n    pSendToUART = f;\n}\n\nvoid sendSerial(const char *data, int len) {\n#if CONFIG_ENABLED(DEVICE_USB)\n    hf2.sendSerial(data, len);\n    webhf2.sendSerial(data, len);\n#endif    \n    if (pSendToUART)\n        pSendToUART(data, len);\n}\n\nvoid dumpDmesg() {\n    sendSerial(\"\\nDMESG:\\n\", 8);\n    sendSerial(codalLogStore.buffer, codalLogStore.ptr);\n    sendSerial(\"\\n\\n\", 2);\n}\n}\n"
    },
    "stm32bluepill": {
      "README.md": "# STM32 Blue Pill\n\nboard.svg was exported from Fritzing (thanks to Jungho Park)\n\n```\nhexdump -C projects/blink/built/dockercodal/build/STM32_BLUE_PILL.bin >STM32_BLUE_PILL.txt\nhexdump -C projects/blink/built/dockercodal/build/firmware.bin >firmware.txt\n```\n",
      "board.json": "{\n    \"driveDisplayName\": \"STM32BLUEPILL\",\n    \"visual\": {\n        \"image\": \"pkg://board.svg\",\n        \"outlineImage\": \"pkg://boardwireframe.svg\",\n        \"width\": 65,\n        \"height\": 152,\n        \"pinDist\": 4,\n        \"pinBlocks\": [\n        {\n            \"x\": 200,\n            \"y\": 440,\n            \"labels\": [\n              \"PA0\"\n            ]\n          }\n        ],\n        \"leds\": [{\n            \"x\": 60,\n            \"y\": 470,\n            \"w\": 40,\n            \"h\": 30,\n            \"color\": \"#45ff45\",\n            \"label\": \"LED\"\n        }]\n    },\n    \"gpioPinMap\": {\n        \"PA0\": \"PA0\",\n        \"PA1\": \"PA1\",\n        \"PA2\": \"PA2\",\n        \"PA3\": \"PA3\",\n        \"PA4\": \"PA4\"\n    },\n    \"groundPins\": [\"GND\"],\n    \"threeVoltPins\": [\"3V\"],\n    \"spiPins\": {\n        \"MOSI\": \"MOSI1\",\n        \"MISO\": \"MISO1\",\n        \"SCK\": \"SCK1\"\n      },\n      \"i2cPins\": {\n        \"SDA\": \"SDA1\",\n        \"SCL\": \"SCL1\"\n      },\n    \"onboardComponents\": [],\n    \"marginWhenBreadboarding\": [\n        0,\n        0,\n        0,\n        0\n    ]\n}",
      "board.svg": "<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE svg>\n<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg xmlns=\"http://www.w3.org/2000/svg\" gorn=\"0\" width=\"0.900403in\" xml:space=\"preserve\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" x=\"0px\" \nviewBox=\"0 0 64.829 151.228\" height=\"2.10039in\" y=\"0px\"  version=\"1.1\" id=\"Layer_1\">\n    <desc >\n        <referenceFile >STM32F103C8T6_blue_breadboard2.svg</referenceFile>\n    </desc>\n    <g transform=\"translate(54,-1)\" >\n        <g transform=\"rotate(90)\" >\n            <g >\n                <g >\n                    <g >\n                        <g >\n                            <path  d=\"M7.269-10.813v64.828h144.951v-64.828H7.269 M12.093,10.604c0.548,0,0.992,0.441,0.992,0.991c0,0.549-0.444,0.99-0.992,0.99s-0.992-0.441-0.992-0.99C11.101,11.044,11.546,10.604,12.093,10.604z M10.652,10.604c0.549,0,0.992,0.441,0.992,0.991c0,0.549-0.443,0.99-0.992,0.99c-0.548,0-0.991-0.441-0.991-0.99C9.661,11.044,10.104,10.604,10.652,10.604z M12.093,30.473c0.548,0,0.992,0.443,0.992,0.992s-0.444,0.99-0.992,0.99s-0.992-0.441-0.992-0.99S11.546,30.473,12.093,30.473z M10.652,30.473c0.549,0,0.992,0.443,0.992,0.992s-0.443,0.99-0.992,0.99c-0.548,0-0.991-0.441-0.991-0.99S10.104,30.473,10.652,30.473z M19.006,13.122c0.548,0,0.992,0.444,0.992,0.992s-0.444,0.992-0.992,0.992s-0.992-0.444-0.992-0.992S18.458,13.122,19.006,13.122z M19.006,13.842c0.548,0,0.992,0.442,0.992,0.99c0,0.55-0.444,0.992-0.992,0.992s-0.992-0.442-0.992-0.992C18.014,14.286,18.458,13.842,19.006,13.842z M19.006,27.235c0.548,0,0.992,0.443,0.992,0.992c0,0.547-0.444,0.992-0.992,0.992l0,0c-0.548,0-0.992-0.445-0.992-0.992C18.014,27.678,18.458,27.235,19.006,27.235z M19.006,27.954c0.548,0,0.992,0.443,0.992,0.992c0,0.547-0.444,0.992-0.992,0.992l0,0c-0.548,0-0.992-0.445-0.992-0.992C18.014,28.397,18.458,27.954,19.006,27.954z M39.28,15.449c0.743,0,1.348,0.605,1.348,1.349s-0.604,1.346-1.348,1.346c-0.744,0-1.348-0.604-1.348-1.346C37.933,16.053,38.536,15.449,39.28,15.449L39.28,15.449z M39.28,8.248c0.743-0.001,1.348,0.602,1.348,1.345c0.002,0.745-0.604,1.348-1.344,1.349c-0.002,0-0.002,0-0.004,0c-0.744,0-1.348-0.604-1.348-1.347C37.933,8.85,38.536,8.248,39.28,8.248L39.28,8.248L39.28,8.248z M46.482,15.449c0.745,0,1.348,0.605,1.348,1.349s-0.604,1.346-1.348,1.346c-0.742,0-1.346-0.604-1.346-1.346C45.138,16.053,45.74,15.449,46.482,15.449z M46.482,8.248c0.745-0.001,1.35,0.602,1.35,1.345c0.002,0.745-0.604,1.348-1.348,1.349c0,0,0,0-0.002,0c-0.742,0-1.346-0.604-1.346-1.347C45.138,8.85,45.74,8.248,46.482,8.248L46.482,8.248z M53.686,15.449c0.745,0,1.349,0.605,1.349,1.349s-0.604,1.346-1.349,1.346c-0.742,0-1.346-0.604-1.346-1.346C52.34,16.053,52.941,15.449,53.686,15.449z M53.686,8.248c0.745-0.001,1.351,0.602,1.351,1.345c0,0.745-0.603,1.348-1.347,1.349c-0.002,0-0.002,0-0.004,0c-0.742,0-1.346-0.604-1.346-1.347C52.34,8.85,52.941,8.248,53.686,8.248L53.686,8.248z M133.268-1.365c0.715,0,1.295,0.58,1.295,1.296c0,0.716-0.58,1.296-1.295,1.296c-0.717,0-1.297-0.58-1.297-1.296C131.971-0.785,132.553-1.365,133.268-1.365z M126.069-1.365c0.717,0,1.297,0.58,1.297,1.296c0,0.716-0.58,1.296-1.297,1.296s-1.297-0.58-1.297-1.296C124.772-0.785,125.352-1.365,126.069-1.365z M118.87-1.365c0.717,0,1.297,0.58,1.297,1.296c0,0.716-0.58,1.296-1.297,1.296s-1.295-0.58-1.295-1.296C117.575-0.785,118.153-1.365,118.87-1.365z M111.668-1.365c0.719,0,1.299,0.58,1.299,1.296c0,0.716-0.58,1.296-1.299,1.296c-0.715,0-1.295-0.58-1.295-1.296C110.374-0.785,110.954-1.365,111.668-1.365z M104.469-1.365c0.717,0,1.297,0.58,1.297,1.296c0,0.716-0.58,1.296-1.297,1.296s-1.295-0.58-1.295-1.296C103.174-0.785,103.752-1.365,104.469-1.365z M97.268-1.365c0.717,0,1.295,0.58,1.295,1.296c0,0.716-0.58,1.296-1.295,1.296l0,0c-0.717,0-1.297-0.58-1.297-1.296C95.971-0.785,96.553-1.365,97.268-1.365z M90.069-1.365c0.717,0,1.297,0.58,1.297,1.296c0,0.716-0.58,1.296-1.297,1.296l0,0c-0.717,0-1.297-0.58-1.297-1.296C88.772-0.785,89.352-1.365,90.069-1.365z M82.87-1.365c0.717,0,1.297,0.58,1.297,1.296c0,0.716-0.58,1.296-1.297,1.296s-1.295-0.58-1.295-1.296C81.575-0.785,82.153-1.365,82.87-1.365L82.87-1.365z M75.669-1.365c0.718,0,1.298,0.58,1.298,1.296c0,0.716-0.58,1.296-1.298,1.296c-0.715,0-1.295-0.58-1.295-1.296C74.374-0.785,74.954-1.365,75.669-1.365z M68.469-1.365c0.716,0,1.296,0.58,1.296,1.296c0,0.716-0.58,1.296-1.296,1.296s-1.296-0.58-1.296-1.296C67.173-0.785,67.754-1.365,68.469-1.365z M61.269-1.365c0.716,0,1.296,0.58,1.296,1.296c0,0.716-0.58,1.296-1.296,1.296l0,0c-0.716,0-1.296-0.58-1.296-1.296C59.973-0.785,60.553-1.365,61.269-1.365z M54.068-1.365c0.717,0,1.297,0.58,1.297,1.296c0,0.716-0.58,1.296-1.297,1.296c-0.716,0-1.296-0.58-1.296-1.296C52.772-0.785,53.353-1.365,54.068-1.365z M46.869-1.365c0.716,0,1.297,0.58,1.297,1.296c0,0.716-0.581,1.296-1.297,1.296s-1.296-0.58-1.296-1.296C45.573-0.785,46.153-1.365,46.869-1.365z M39.67-1.365c0.716,0,1.296,0.58,1.296,1.296c0,0.716-0.58,1.296-1.296,1.296s-1.296-0.58-1.296-1.296C38.374-0.785,38.954-1.365,39.67-1.365z M32.469-1.365c0.716,0,1.296,0.58,1.296,1.296c0,0.716-0.58,1.296-1.296,1.296s-1.296-0.58-1.296-1.296C31.173-0.785,31.754-1.365,32.469-1.365z M25.269-1.365c0.716,0,1.296,0.58,1.296,1.296c0,0.716-0.58,1.296-1.296,1.296s-1.296-0.58-1.296-1.296C23.973-0.785,24.553-1.365,25.269-1.365z M18.068-1.365c0.717,0,1.297,0.58,1.297,1.296c0,0.716-0.58,1.296-1.297,1.296l0,0c-0.716,0-1.296-0.58-1.296-1.296C16.772-0.785,17.353-1.365,18.068-1.365z M133.268,41.833c0.715,0,1.297,0.58,1.297,1.295c0,0.719-0.578,1.299-1.295,1.301h-0.002c-0.717,0-1.297-0.58-1.297-1.295c-0.002-0.719,0.578-1.299,1.295-1.301C133.268,41.833,133.268,41.833,133.268,41.833z M126.069,41.833c0.717,0,1.299,0.58,1.299,1.295c0,0.719-0.58,1.299-1.295,1.301h-0.004c-0.717,0-1.297-0.58-1.299-1.295c0-0.719,0.58-1.299,1.295-1.301C126.067,41.833,126.069,41.833,126.069,41.833z M118.87,41.833c0.717,0,1.297,0.58,1.299,1.295c0,0.719-0.58,1.299-1.295,1.301c-0.002,0-0.002,0-0.004,0c-0.715,0-1.295-0.58-1.297-1.295c0-0.719,0.576-1.299,1.295-1.301C118.87,41.833,118.87,41.833,118.87,41.833z M111.668,41.833c0.719,0,1.299,0.58,1.299,1.295c0.002,0.719-0.578,1.299-1.297,1.301h-0.002c-0.715,0-1.297-0.58-1.297-1.295c0-0.719,0.578-1.299,1.295-1.301H111.668z M104.469,41.833c0.717,0,1.297,0.58,1.297,1.295c0.002,0.719-0.578,1.299-1.295,1.301c0,0,0,0-0.002,0c-0.717,0-1.299-0.58-1.299-1.295c0-0.719,0.58-1.299,1.297-1.301H104.469z M97.268,41.833c0.717,0,1.297,0.58,1.297,1.295c0,0.719-0.576,1.299-1.295,1.301h-0.002c-0.717,0-1.297-0.58-1.297-1.295c-0.002-0.719,0.578-1.299,1.295-1.301C97.268,41.833,97.268,41.833,97.268,41.833z M75.669,41.833c0.718,0,1.298,0.58,1.298,1.295c0.002,0.719-0.578,1.299-1.296,1.301h-0.002c-0.715,0-1.297-0.58-1.297-1.295c0-0.719,0.58-1.299,1.295-1.301H75.669z M68.469,41.833c0.716,0,1.296,0.58,1.297,1.295c0.001,0.719-0.579,1.299-1.295,1.301c-0.001,0-0.001,0-0.002,0c-0.716,0-1.297-0.58-1.297-1.295c-0.001-0.719,0.579-1.299,1.295-1.301C68.467,41.833,68.468,41.833,68.469,41.833z M61.269,41.833c0.716,0,1.297,0.58,1.297,1.295c0.001,0.719-0.579,1.299-1.295,1.301c0,0-0.001,0-0.002,0c-0.716,0-1.297-0.58-1.297-1.295c-0.001-0.719,0.579-1.299,1.295-1.301C61.268,41.833,61.268,41.833,61.269,41.833z M54.068,41.833c0.717,0,1.298,0.58,1.299,1.295c0,0.719-0.58,1.299-1.295,1.301c-0.001,0-0.003,0-0.004,0c-0.716,0-1.296-0.58-1.297-1.295c-0.001-0.719,0.579-1.299,1.295-1.301C54.067,41.833,54.068,41.833,54.068,41.833z M46.869,41.833c0.716,0,1.297,0.58,1.298,1.295c0,0.719-0.579,1.299-1.295,1.301c-0.001,0-0.002,0-0.003,0c-0.716,0-1.296-0.58-1.297-1.295c0-0.719,0.578-1.299,1.295-1.301C46.868,41.833,46.869,41.833,46.869,41.833z M39.67,41.833c0.716,0,1.296,0.58,1.297,1.295c0.001,0.719-0.579,1.299-1.295,1.301c-0.001,0-0.002,0-0.002,0c-0.716,0-1.297-0.58-1.298-1.295c0-0.719,0.58-1.299,1.295-1.301C39.668,41.833,39.669,41.833,39.67,41.833z M32.469,41.833c0.716,0,1.296,0.58,1.297,1.295c0.001,0.719-0.579,1.299-1.295,1.301c-0.001,0-0.001,0-0.002,0c-0.716,0-1.297-0.58-1.297-1.295c-0.001-0.719,0.579-1.299,1.295-1.301C32.467,41.833,32.468,41.833,32.469,41.833z M25.269,41.833c0.716,0,1.297,0.58,1.297,1.295c0.001,0.719-0.579,1.299-1.295,1.301c0,0-0.001,0-0.002,0c-0.716,0-1.297-0.58-1.297-1.295c-0.001-0.719,0.579-1.299,1.295-1.301C25.268,41.833,25.268,41.833,25.269,41.833z M18.068,41.833c0.717,0,1.298,0.58,1.299,1.295c0,0.719-0.58,1.299-1.295,1.301c-0.001,0-0.003,0-0.004,0c-0.716,0-1.296-0.58-1.297-1.295c-0.001-0.719,0.579-1.299,1.295-1.301C18.067,41.833,18.068,41.833,18.068,41.833z M90.125,41.774c0.715,0,1.295,0.58,1.295,1.295s-0.58,1.295-1.295,1.295l0,0c-0.717,0-1.297-0.58-1.297-1.295S89.409,41.774,90.125,41.774z M82.924,41.774c0.717,0,1.297,0.58,1.297,1.295s-0.58,1.295-1.297,1.295c-0.715,0-1.295-0.58-1.295-1.295S82.209,41.774,82.924,41.774L82.924,41.774z M147.624-1.365c0.715,0,1.295,0.58,1.295,1.296c0,0.716-0.58,1.296-1.295,1.296s-1.295-0.58-1.295-1.296C146.329-0.785,146.909-1.365,147.624-1.365z M140.428-1.365c0.715,0,1.295,0.58,1.295,1.296c0,0.716-0.58,1.296-1.295,1.296c-0.717,0-1.297-0.58-1.297-1.296C139.131-0.785,139.711-1.365,140.428-1.365z M147.624,41.829c0.715,0,1.297,0.58,1.297,1.295c0,0.719-0.578,1.299-1.295,1.301h-0.002c-0.715,0-1.295-0.58-1.295-1.295c-0.002-0.719,0.578-1.299,1.293-1.301C147.622,41.829,147.622,41.829,147.624,41.829z M140.428,41.829c0.715,0,1.297,0.58,1.297,1.295c0,0.719-0.58,1.299-1.295,1.301h-0.002c-0.717,0-1.297-0.58-1.299-1.295c0-0.719,0.58-1.299,1.295-1.301C140.426,41.829,140.428,41.829,140.428,41.829z M10.872-1.366c0.716,0,1.296,0.58,1.296,1.296c0,0.716-0.58,1.296-1.296,1.296l0,0c-0.716,0-1.296-0.58-1.296-1.296C9.576-0.786,10.156-1.366,10.872-1.366z M10.872,41.827c0.716,0,1.297,0.58,1.298,1.295c0,0.719-0.58,1.299-1.295,1.301c-0.001,0-0.002,0-0.003,0c-0.716,0-1.296-0.58-1.297-1.295c-0.001-0.719,0.578-1.299,1.295-1.301C10.871,41.827,10.872,41.827,10.872,41.827z\" fill=\"#0F7391\"/>\n                            <g >\n                                <title >text:TX</title>\n                                <g transform=\"matrix(1, 0, 0, 1, 20.16, 43.2)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g >\n                                                    <g transform=\"rotate(270)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g >\n                                                                        <g transform=\"matrix(0 1 -1 0 46.3397 -9.9725)\" >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">G</text>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g >\n                                <title >text:RX</title>\n                                <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g >\n                                                    <g transform=\"rotate(270)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g >\n                                                                        <g transform=\"matrix(0 1 -1 0 40.9396 -2.8714)\" >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">G</text>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <rect height=\"3.528\" stroke-width=\"0.936\" x=\"145.827\" width=\"3.527\" y=\"-1.905\"  stroke=\"#9A916C\" fill=\"none\"/>\n                            <g transform=\"matrix(1, 0, 0, 1, 19.3128, 132.584)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.0.4.0.0.0.0\"  id=\"c0402\">\n                                                <g >\n                                                    <g >\n                                                        <rect height=\"5.669\" x=\"-10.627\" width=\"2.551\" y=\"-117.011\"  fill=\"#999999\"/>\n                                                    </g>\n                                                    <g >\n                                                        <path stroke-width=\"0.25\"  d=\"M-9.784-112.687\" stroke-miterlimit=\"10\" stroke=\"#FFFFFF\" fill=\"none\"/>\n                                                    </g>\n                                                    <g >\n                                                        <path  d=\"M-10.183-112.566v-3.362c0-0.076,0.052-0.14,0.113-0.14h1.437c0.063,0,0.115,0.063,0.115,0.14v3.598c0,0.074-0.054,0.139-0.115,0.139h-0.329c-0.034,0-0.061,0.033-0.061,0.072v0.17c0,0.021-0.014,0.029-0.027,0.029s-0.026-0.013-0.026-0.029v-0.17c0-0.077,0.055-0.14,0.116-0.14h0.326c0.034,0,0.063-0.033,0.063-0.073v-3.596c0-0.042-0.025-0.073-0.063-0.073h-1.438c-0.032,0-0.062,0.033-0.062,0.073v3.362c0,0.046,0.027,0.076,0.062,0.076h1.319c0.034,0,0.063-0.03,0.063-0.076v-3.135c0-0.041-0.027-0.073-0.063-0.073h-1.186c-0.033,0-0.063,0.032-0.063,0.073v2.909c0,0.045,0.015,0.069,0.021,0.072h1.101c0.034,0,0.061-0.032,0.061-0.072v-2.679c0-0.042-0.025-0.075-0.061-0.075h-0.934c-0.034,0-0.063,0.033-0.063,0.075v2.468c0,0.041,0.026,0.074,0.063,0.074h0.814c0.033,0,0.063-0.033,0.063-0.074v-2.272c0-0.038-0.027-0.072-0.063-0.072h-0.797c-0.015,0-0.027-0.016-0.027-0.031c0-0.021,0.015-0.032,0.027-0.032h0.797c0.063,0,0.114,0.063,0.114,0.139V-113c0,0.077-0.052,0.138-0.114,0.138h-0.814c-0.063,0-0.115-0.061-0.115-0.138v-2.467c0-0.077,0.051-0.141,0.115-0.141h0.934c0.063,0,0.115,0.063,0.115,0.141v2.679c0,0.075-0.051,0.137-0.115,0.137h-1.103c-0.041,0-0.072-0.06-0.072-0.137v-2.909c0-0.076,0.052-0.138,0.114-0.138h1.187c0.063,0,0.115,0.063,0.115,0.138v3.137c0,0.076-0.052,0.141-0.115,0.141h-1.318C-10.133-112.425-10.183-112.488-10.183-112.566z\" fill=\"#CBA580\"/>\n                                                    </g>\n                                                    <g >\n                                                        <g >\n                                                            <g opacity=\"0.2\" >\n                                                                <rect height=\"5.669\" x=\"-8.115\" width=\"0.038\" y=\"-117.011\"  fill=\"#FFFFFF\"/>\n                                                            </g>\n                                                        </g>\n                                                        <g >\n                                                            <g >\n                                                                <path  d=\"M-8.161-116.4h0.085v-0.609h-2.551v0.608c0.217,0.043,0.479,0.097,0.719,0.097C-9.625-116.305-8.408-116.342-8.161-116.4z\" fill=\"#DCDCDC\"/>\n                                                            </g>\n                                                            <g >\n                                                                <path  d=\"M-9.909-112.049c-0.24,0-0.5,0.053-0.719,0.098v0.609h2.551v-0.611h-0.085C-8.408-112.011-9.624-112.049-9.909-112.049z\" fill=\"#DCDCDC\"/>\n                                                            </g>\n                                                            <g opacity=\"0.5\" >\n                                                                <rect height=\"0.608\" x=\"-8.115\" width=\"0.038\" y=\"-117.011\"  fill=\"#FFFFFF\"/>\n                                                            </g>\n                                                            <g opacity=\"0.5\" >\n                                                                <rect height=\"0.61\" x=\"-8.115\" width=\"0.038\" y=\"-111.954\"  fill=\"#FFFFFF\"/>\n                                                            </g>\n                                                            <g >\n                                                                <line x1=\"-10.622\" x2=\"-10.622\"  y2=\"-116.468\" y1=\"-116.468\" fill=\"none\"/>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 14.5557, 123.449)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.0.5.0.0.0.0\"  id=\"con2_usb_micro_b_at_1_\">\n                                                <g transform=\"matrix(1, 0, 0, 1, 18.6038, 120.082)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g gorn=\"0.1.0.0.0.0.0.5.0.0.0.0.0.0.0.0.0\"  id=\"con2_usb_micro_b_at\">\n                                                                    <g >\n                                                                        <rect height=\"0.989\" x=\"-14.023\" width=\"1.235\" y=\"-226.257\"  fill=\"#666666\"/>\n                                                                        <rect height=\"0.09\" x=\"-13.883\" width=\"1.097\" y=\"-226.257\"  fill=\"#999999\"/>\n                                                                    </g>\n                                                                    <g >\n                                                                        <rect height=\"0.99\" x=\"-14.023\" width=\"1.235\" y=\"-224.412\"  fill=\"#666666\"/>\n                                                                        <rect height=\"0.09\" x=\"-13.883\" width=\"1.097\" y=\"-224.412\"  fill=\"#999999\"/>\n                                                                    </g>\n                                                                    <g >\n                                                                        <rect height=\"0.989\" x=\"-14.023\" width=\"1.235\" y=\"-222.571\"  fill=\"#666666\"/>\n                                                                        <rect height=\"0.089\" x=\"-13.883\" width=\"1.097\" y=\"-222.571\"  fill=\"#999999\"/>\n                                                                    </g>\n                                                                    <g >\n                                                                        <rect height=\"0.99\" x=\"-14.023\" width=\"1.235\" y=\"-220.728\"  fill=\"#666666\"/>\n                                                                        <rect height=\"0.088\" x=\"-13.883\" width=\"1.097\" y=\"-220.728\"  fill=\"#999999\"/>\n                                                                    </g>\n                                                                    <g >\n                                                                        <rect height=\"0.986\" x=\"-14.023\" width=\"1.235\" y=\"-218.884\"  fill=\"#666666\"/>\n                                                                        <rect height=\"0.088\" x=\"-13.883\" width=\"1.097\" y=\"-218.884\"  fill=\"#999999\"/>\n                                                                    </g>\n                                                                    <g >\n                                                                        <polygon points=\"-30.749,-212.638 -30.749,-231.481 -13.74,-231.481 -13.74,-212.636 \"  fill=\"#B3B3B3\"/>\n                                                                        <rect height=\"0.994\" x=\"-23.394\" width=\"3.041\" y=\"-212.433\"  fill=\"#666666\"/>\n                                                                        <rect height=\"1.003\" x=\"-23.394\" width=\"3.041\" y=\"-232.716\"  fill=\"#666666\"/>\n                                                                        <rect height=\"18.847\" x=\"-13.869\" width=\"0.13\" y=\"-231.481\"  fill=\"#CCCCCC\"/>\n                                                                        <rect height=\"10.289\" x=\"-29.354\" width=\"15.614\" y=\"-227.219\"  fill=\"#333333\"/>\n                                                                        <polygon points=\"-30.379,-231.713 -30.856,-231.713 -31.938,-232.352 -31.938,-232.716 \"  fill=\"#B3B3B3\"/>\n                                                                        <polygon points=\"-30.856,-231.713 -30.856,-231.712 -31.395,-231.713 -31.938,-232.352 \"  fill=\"#CCCCCC\"/>\n                                                                        <polygon points=\"-31.938,-211.435 -31.938,-211.798 -30.856,-212.437 -30.379,-212.437 \"  fill=\"#B3B3B3\"/>\n                                                                        <polygon points=\"-31.938,-211.798 -31.395,-212.437 -30.856,-212.439 -30.856,-212.437 \"  fill=\"#CCCCCC\"/>\n                                                                        <g >\n                                                                            <g >\n                                                                                <rect height=\"0.48\" x=\"-30.377\" width=\"0.648\" y=\"-218.142\"  fill=\"#F2F2F2\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.479\" x=\"-30.377\" width=\"0.648\" y=\"-220.228\"  fill=\"#F2F2F2\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.479\" x=\"-30.377\" width=\"0.648\" y=\"-222.312\"  fill=\"#F2F2F2\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.478\" x=\"-30.377\" width=\"0.648\" y=\"-224.398\"  fill=\"#F2F2F2\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.478\" x=\"-30.377\" width=\"0.648\" y=\"-226.483\"  fill=\"#F2F2F2\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.097\" x=\"-30.377\" width=\"0.648\" y=\"-226.483\"  fill=\"#808080\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.098\" x=\"-30.377\" width=\"0.648\" y=\"-224.398\"  fill=\"#808080\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.1\" x=\"-30.377\" width=\"0.648\" y=\"-222.312\"  fill=\"#808080\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.1\" x=\"-30.377\" width=\"0.648\" y=\"-220.228\"  fill=\"#808080\"/>\n                                                                            </g>\n                                                                            <g >\n                                                                                <rect height=\"0.1\" x=\"-30.377\" width=\"0.648\" y=\"-218.14\"  fill=\"#808080\"/>\n                                                                            </g>\n                                                                        </g>\n                                                                        <path  d=\"M-30.562-226.996v0.515h0.396v0.478h-0.396v1.607h0.396v0.478h-0.396v1.607h0.396v0.478h-0.396v1.605h0.396v0.48h-0.396v1.605h0.396v0.479h-0.396v0.324v0.27c0,0.078,0.063,0.146,0.146,0.146h1.064c0.08,0,0.146-0.063,0.146-0.146v-10.003c0-0.078-0.063-0.146-0.146-0.146h-1.064c-0.077,0-0.146,0.063-0.146,0.146V-226.996z\" fill=\"#4D4D4D\"/>\n                                                                        <path  d=\"M-14.306-231.713l0.566,0.229v2.534c0,0-0.111-2.303-0.281-2.385s-0.285,0.108-0.285,0.108V-231.713z\" fill=\"#CCCCCC\"/>\n                                                                        <path  d=\"M-14.306-212.437l0.565-0.23v-2.533c0,0-0.112,2.303-0.282,2.385c-0.171,0.082-0.283-0.107-0.283-0.107V-212.437z\" fill=\"#CCCCCC\"/>\n                                                                        <path  d=\"M-13.74-215.825h-1.635v-1.605h1.635v-0.461h-0.564v-8.361h0.564v-0.523h-1.636v-1.604h1.636v-3.325h-17.008v19.27h17.008V-215.825z M-27.596-226.781h-0.813v-1.594h0.881c0.276-0.427,0.761-0.708,1.308-0.708c0.598,0,1.104,0.22,1.369,0.708l0,0h4.479v1.593h-4.48c-0.265,0.486-0.773,0.824-1.371,0.824C-26.823-225.957-27.333-226.293-27.596-226.781z M-27.596-215.894h-0.813v-1.592h0.881c0.276-0.426,0.761-0.707,1.308-0.707c0.598,0,1.104,0.217,1.369,0.707l0,0h4.479v1.592h-4.48c-0.265,0.49-0.773,0.826-1.371,0.826S-27.333-215.402-27.596-215.894z\" fill=\"#E6E6E6\"/>\n                                                                        <polygon points=\"-30.749,-231.306 -30.749,-231.713 -14.306,-231.713 -14.306,-230.181 \"  fill=\"#F2F2F2\"/>\n                                                                        <polygon points=\"-30.749,-212.437 -19.769,-213.007 -14.306,-213.573 -14.306,-212.437 \"  fill=\"#999999\"/>\n                                                                        <rect height=\"1.593\" x=\"-20.505\" width=\"0.131\" y=\"-228.374\"  fill=\"#CCCCCC\"/>\n                                                                        <rect height=\"1.592\" x=\"-20.505\" width=\"0.131\" y=\"-217.484\"  fill=\"#CCCCCC\"/>\n                                                                        <rect height=\"17.387\" x=\"-30.546\" width=\"0.66\" y=\"-230.767\"  fill=\"#B3B3B3\"/>\n                                                                        <rect height=\"17.387\" x=\"-30.749\" width=\"0.313\" y=\"-230.767\"  fill=\"#CCCCCC\"/>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g >\n                                <g >\n                                    <circle cy=\"16.875\" gorn=\"0.1.0.0.0.0.0.6.0.0\" stroke-width=\"0.864\"  stroke=\"#9A916C\" cx=\"39.183\" fill=\"none\" id=\"connector41pin_1_\" r=\"1.781\"/>\n                                    <circle cy=\"9.663\" gorn=\"0.1.0.0.0.0.0.6.0.1\" stroke-width=\"0.864\"  stroke=\"#9A916C\" cx=\"39.183\" fill=\"none\" id=\"connector42pin_1_\" r=\"1.781\"/>\n                                    <circle cy=\"16.875\" gorn=\"0.1.0.0.0.0.0.6.0.2\" stroke-width=\"0.864\"  stroke=\"#9A916C\" cx=\"46.395\" fill=\"none\" id=\"connector43pin_1_\" r=\"1.781\"/>\n                                    <circle cy=\"9.663\" gorn=\"0.1.0.0.0.0.0.6.0.3\" stroke-width=\"0.864\"  stroke=\"#9A916C\" cx=\"46.395\" fill=\"none\" id=\"connector44pin_1_\" r=\"1.781\"/>\n                                    <circle cy=\"16.875\" gorn=\"0.1.0.0.0.0.0.6.0.4\" stroke-width=\"0.864\"  stroke=\"#9A916C\" cx=\"53.607\" fill=\"none\" id=\"connector45pin_1_\" r=\"1.782\"/>\n                                    <circle cy=\"9.663\" gorn=\"0.1.0.0.0.0.0.6.0.5\" stroke-width=\"0.864\"  stroke=\"#9A916C\" cx=\"53.607\" fill=\"none\" id=\"connector46pin_1_\" r=\"1.782\"/>\n                                </g>\n                                <g transform=\"matrix(1, 0, 0, 1, 25.3785, 7.19519)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g gorn=\"0.1.0.0.0.0.0.6.1.0.0.0.0\"  id=\"_x32_x03\">\n                                                    <g transform=\"matrix(0, 1, -1, 0, 17.793, -3.52001)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g >\n                                                                        <g >\n                                                                            <polygon points=\"15.216,-13.683 11.279,-13.683 7.933,-13.683 3.992,-13.683 2.479,-12.169 2.479,-8.232 3.992,-6.72 7.933,-6.72 11.279,-6.72 15.216,-6.72 16.733,-8.232 16.733,-12.169 \"  fill=\"#404040\"/>\n                                                                            <polygon points=\"15.216,-6.489 11.279,-6.489 7.933,-6.489 3.992,-6.489 2.479,-4.978 2.479,-1.037 3.992,0.477 7.933,0.477 11.279,0.477 15.216,0.477 16.733,-1.037 16.733,-4.978 \"  fill=\"#404040\"/>\n                                                                            <polygon points=\"15.216,0.7 11.279,0.7 7.933,0.7 3.992,0.7 2.479,2.215 2.479,6.154 3.992,7.668 7.933,7.668 11.279,7.668 15.216,7.668 16.733,6.154 16.733,2.215 \"  fill=\"#404040\"/>\n                                                                            <polygon points=\"15.216,-13.683 11.279,-13.683 7.933,-13.683 3.992,-13.683 2.479,-12.169 2.479,-8.232 3.992,-6.72 7.933,-6.72 11.279,-6.72 15.216,-6.72 16.733,-8.232 16.733,-12.169 \"  fill=\"#404040\"/>\n                                                                            <polygon points=\"15.216,-6.489 11.279,-6.489 7.933,-6.489 3.992,-6.489 2.479,-4.978 2.479,-1.037 3.992,0.477 7.933,0.477 11.279,0.477 15.216,0.477 16.733,-1.037 16.733,-4.978 \"  fill=\"#404040\"/>\n                                                                            <polygon points=\"15.216,0.7 11.279,0.7 7.933,0.7 3.992,0.7 2.479,2.215 2.479,6.154 3.992,7.668 7.933,7.668 11.279,7.668 15.216,7.668 16.733,6.154 16.733,2.215 \"  fill=\"#404040\"/>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 10.0908 -1.992)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"2.302\" x=\"4.889\" width=\"2.305\" y=\"2.898\"  fill=\"#8D8C8C\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 17.3037 -9.2039)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"2.302\" x=\"12.102\" width=\"2.304\" y=\"2.899\"  fill=\"#8D8C8C\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 2.8799 -9.2009)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"2.302\" x=\"4.889\" width=\"2.303\" y=\"-4.312\"  fill=\"#8D8C8C\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 10.0918 -16.4148)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"2.302\" x=\"12.102\" width=\"2.303\" y=\"-4.313\"  fill=\"#8D8C8C\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -4.3286 -16.4123)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"2.302\" x=\"4.891\" width=\"2.301\" y=\"-11.522\"  fill=\"#8D8C8C\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 2.8823 -23.6252)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"2.302\" x=\"12.103\" width=\"2.301\" y=\"-11.523\"  fill=\"#8D8455\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 2.8852 -23.6262)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"1.188\" x=\"12.662\" width=\"1.188\" y=\"-10.964\"  fill=\"#8C8663\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <polygon points=\"12.104,-11.522 12.663,-10.963 13.846,-10.963 14.405,-11.522 \"  fill=\"#B8AF82\"/>\n                                                                            <polygon points=\"13.846,-9.779 13.846,-10.963 14.405,-11.522 14.405,-9.221 \"  fill=\"#80795B\"/>\n                                                                            <polygon points=\"12.663,-9.779 13.846,-9.779 14.405,-9.221 12.104,-9.221 \"  fill=\"#5E5B43\"/>\n                                                                            <polygon points=\"12.104,-11.522 12.663,-10.963 12.663,-9.779 12.104,-9.221 \"  fill=\"#9A916C\"/>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -4.3301 -16.4128)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"1.187\" x=\"5.449\" width=\"1.186\" y=\"-10.965\"  fill=\"#8C8663\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <polygon points=\"4.892,-11.522 5.449,-10.963 6.634,-10.963 7.192,-11.522 \"  fill=\"#B8AF82\"/>\n                                                                            <polygon points=\"6.634,-9.779 6.634,-10.963 7.192,-11.522 7.192,-9.221 \"  fill=\"#80795B\"/>\n                                                                            <polygon points=\"5.449,-9.779 6.634,-9.779 7.192,-9.221 4.892,-9.221 \"  fill=\"#5E5B43\"/>\n                                                                            <polygon points=\"4.892,-11.522 5.449,-10.963 5.449,-9.779 4.892,-9.221 \"  fill=\"#9A916C\"/>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 10.0947 -16.4167)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"1.188\" x=\"12.661\" width=\"1.188\" y=\"-3.755\"  fill=\"#8C8663\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <polygon points=\"12.104,-4.311 12.663,-3.754 13.846,-3.754 14.405,-4.311 \"  fill=\"#B8AF82\"/>\n                                                                            <polygon points=\"13.846,-2.57 13.846,-3.754 14.405,-4.311 14.405,-2.01 \"  fill=\"#80795B\"/>\n                                                                            <polygon points=\"12.663,-2.57 13.846,-2.57 14.405,-2.01 12.104,-2.01 \"  fill=\"#5E5B43\"/>\n                                                                            <polygon points=\"12.104,-4.311 12.663,-3.754 12.663,-2.57 12.104,-2.01 \"  fill=\"#9A916C\"/>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 2.8804 -9.2034)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"1.186\" x=\"5.448\" width=\"1.188\" y=\"-3.755\"  fill=\"#8C8663\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <polygon points=\"4.892,-4.311 5.449,-3.754 6.634,-3.754 7.192,-4.311 \"  fill=\"#B8AF82\"/>\n                                                                            <polygon points=\"6.634,-2.57 6.634,-3.754 7.192,-4.311 7.192,-2.01 \"  fill=\"#80795B\"/>\n                                                                            <polygon points=\"5.449,-2.57 6.634,-2.57 7.192,-2.01 4.892,-2.01 \"  fill=\"#5E5B43\"/>\n                                                                            <polygon points=\"4.892,-4.311 5.449,-3.754 5.449,-2.57 4.892,-2.01 \"  fill=\"#9A916C\"/>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 17.309 -9.2024)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"1.188\" x=\"12.661\" width=\"1.189\" y=\"3.459\"  fill=\"#8C8663\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <polygon points=\"12.104,2.899 12.663,3.46 13.846,3.46 14.405,2.899 \"  fill=\"#B8AF82\"/>\n                                                                            <polygon points=\"13.846,4.644 13.846,3.46 14.405,2.899 14.405,5.202 \"  fill=\"#80795B\"/>\n                                                                            <polygon points=\"12.663,4.644 13.846,4.644 14.405,5.202 12.104,5.202 \"  fill=\"#5E5B43\"/>\n                                                                            <polygon points=\"12.104,2.899 12.663,3.46 12.663,4.644 12.104,5.202 \"  fill=\"#9A916C\"/>\n                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 10.0952 -1.9895)\" >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <g >\n                                                                                            <rect height=\"1.186\" x=\"5.448\" width=\"1.188\" y=\"3.46\"  fill=\"#8C8663\"/>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                            <polygon points=\"4.892,2.899 5.449,3.46 6.634,3.46 7.192,2.899 \"  fill=\"#B8AF82\"/>\n                                                                            <polygon points=\"6.634,4.644 6.634,3.46 7.192,2.899 7.192,5.202 \"  fill=\"#80795B\"/>\n                                                                            <polygon points=\"5.449,4.644 6.634,4.644 7.192,5.202 4.892,5.202 \"  fill=\"#5E5B43\"/>\n                                                                            <polygon points=\"4.892,2.899 5.449,3.46 5.449,4.644 4.892,5.202 \"  fill=\"#9A916C\"/>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 11.6415, 32.1755)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.0.7.0.0.0.0\"  id=\"chipled_0805_1_\">\n                                                <g transform=\"matrix(0, 1, -1, 0, 5.62951, 1.77951)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(1, 0, 0, 1, 21.5539, 31.3385)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g gorn=\"0.1.0.0.0.0.0.7.0.0.0.0.0.0.0.0.0.0.0.0.0.0\"  id=\"led-0603_2_\">\n                                                                                        <line x1=\"-42.04\" x2=\"-49.276\"  y2=\"-146.289\" y1=\"-146.289\" fill=\"none\"/>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -190.0872 -98.6595)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect height=\"7.349\" x=\"-47.631\" width=\"3.834\" y=\"-148.048\"  fill=\"#F2F2F2\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <path opacity=\"0.7\" enable-background=\"new    \"  d=\"M-46.788-146.291c0,0-0.646,0.469-0.867,0.428c-0.219-0.041-0.541,0.146-0.676,0l0.02-0.426L-46.788-146.291z\" fill=\"#22B573\"/>\n                                                                                        <g >\n                                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -189.9867 -98.7035)\" >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <g >\n                                                                                                            <rect height=\"0.854\" x=\"-46.122\" width=\"0.961\" y=\"-144.772\"  fill=\"#FFFFFF\"/>\n                                                                                                        </g>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -190.4654 -99.1817)\" >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <g >\n                                                                                                            <rect height=\"0.854\" x=\"-45.667\" width=\"0.051\" y=\"-145.251\"  fill=\"#B3B3B3\"/>\n                                                                                                        </g>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <g >\n                                                                                            <polygon points=\"-47.368,-145.865 -48.331,-145.968 -48.331,-145.238 -47.368,-145.341 \"  fill=\"#D1C690\"/>\n                                                                                            <g >\n                                                                                                <path  d=\"M-47.429-145.668c0.002,0,0.005,0,0.009,0c0.266,0.035,0.446,0.105,0.598,0.162c0.209,0.08,0.561,0.781,0.828,0.693c0.026-0.012,0.062,0.014,0.065,0.043c0.009,0.035-0.01,0.066-0.039,0.078c-0.305,0.098-0.674-0.615-0.895-0.699c-0.146-0.063-0.316-0.123-0.57-0.154c-0.028-0.004-0.057-0.033-0.049-0.066C-47.479-145.642-47.456-145.668-47.429-145.668z\" fill=\"#D1C690\"/>\n                                                                                            </g>\n                                                                                            <polygon points=\"-43.948,-142.978 -42.982,-142.875 -42.982,-143.605 -43.948,-143.502 \"  fill=\"#D1C690\"/>\n                                                                                            <g >\n                                                                                                <path  d=\"M-45.601-144.5c0.023,0,0.049,0.021,0.056,0.047c0.063,0.291,1.088,1.152,1.885,1.152c0.033,0,0.059,0.023,0.059,0.064c-0.002,0.031-0.024,0.063-0.059,0.063h-0.002c-0.749,0-1.892-0.771-1.993-1.244c-0.008-0.035,0.014-0.066,0.041-0.078C-45.611-144.5-45.606-144.5-45.601-144.5z\" fill=\"#D1C690\"/>\n                                                                                            </g>\n                                                                                            <path  d=\"M-46.071-144.515c0,0,0.356,0.002,0.385-0.313c-0.069,0-0.385,0-0.385,0V-144.515z\" fill=\"#D1C690\"/>\n                                                                                            <path  d=\"M-45.636-144.195c0,0-0.157-0.309-0.053-0.354c0.105-0.047,0.178-0.053,0.238,0.027C-45.388-144.435-45.636-144.195-45.636-144.195z\" fill=\"#D1C690\"/>\n                                                                                            <path  d=\"M-45.995-144.863c-0.271,0.084-0.619-0.617-0.828-0.697c-0.146-0.063-0.33-0.127-0.598-0.162v0.059c0.266,0.035,0.446,0.105,0.598,0.162c0.209,0.08,0.561,0.783,0.828,0.695V-144.863z\" fill=\"#9D956C\"/>\n                                                                                            <polygon points=\"-43.948,-143.558 -42.982,-143.662 -42.982,-143.605 -43.948,-143.502 \"  fill=\"#9D956C\"/>\n                                                                                            <path  d=\"M-45.544-144.507c0.063,0.291,1.069,1.211,1.885,1.146v0.063c-0.877,0.061-1.826-0.861-1.887-1.152L-45.544-144.507z\" fill=\"#9D956C\"/>\n                                                                                            <path  d=\"M-45.688-144.88c-0.069,0-0.383,0-0.383,0v0.057c0,0,0.313,0,0.383,0V-144.88z\" fill=\"#9D956C\"/>\n                                                                                            <path  d=\"M-45.448-144.57c-0.063-0.08-0.131-0.076-0.236-0.031l-0.002,0.061c0.105-0.049,0.179-0.051,0.238,0.029V-144.57z\" fill=\"#9D956C\"/>\n                                                                                        </g>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -188.1107 -96.849)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect opacity=\"0.5\" enable-background=\"new    \" height=\"4.224\" x=\"-45.656\" width=\"0.051\" y=\"-144.592\"  fill=\"#FFFFFF\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <path opacity=\"0.5\" enable-background=\"new    \"  d=\"M-42.999-142.459v-3.83h-5.315l-0.006,3.83H-42.999z\" fill=\"#F2F2F2\"/>\n                                                                                        <path opacity=\"0.55\" enable-background=\"new    \"  d=\"M-43.049-143.107v0.27c-0.021,0.15,0.012,0.271-0.099,0.271c-0.611,0-4.703,0-4.854,0c-0.168,0-0.177-0.063,0.012-0.063c0.133,0,3.895,0,4.348,0c0.457,0,0.519-0.104,0.519-0.197l-0.002-0.271C-43.127-143.283-43.049-143.283-43.049-143.107z\" fill=\"#FFFFFF\"/>\n                                                                                        <path opacity=\"0.03\" enable-background=\"new    \"  d=\"M-48.177-146.066c0-0.068-0.012-0.141,0.099-0.141c0.61,0,4.667,0,4.816,0c0.168,0,0.177,0.064-0.008,0.064c-0.137,0-3.14,0.004-3.589,0.004C-47.454-146.138-48.177-146.066-48.177-146.066z\"/>\n                                                                                        <path  d=\"M-42.041-146.291h-0.771v0.521c0,0.125-0.08,0.213-0.188,0.27v3.047h1.01v-3.781v-0.053\" fill=\"#D1C690\"/>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -184.974 -99.9876)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect opacity=\"0.5\" enable-background=\"new    \" height=\"1.006\" x=\"-42.519\" width=\"0.053\" y=\"-142.984\"  fill=\"#FFFFFF\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <path  d=\"M-49.388-146.291v0.051v3.781h1.072v-3.463c-0.104-0.059-0.19-0.145-0.19-0.27v-0.102h-0.83\" fill=\"#D1C690\"/>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -191.3289 -93.6307)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect opacity=\"0.5\" enable-background=\"new    \" height=\"1.072\" x=\"-48.874\" width=\"0.051\" y=\"-143.016\"  fill=\"#FFFFFF\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 11.6415, 37.5755)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.0.8.0.0.0.0\"  id=\"chipled_0805_2_\">\n                                                <g transform=\"matrix(0, 1, -1, 0, 5.62951, 1.77951)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(1, 0, 0, 1, 21.5539, 31.3385)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g gorn=\"0.1.0.0.0.0.0.8.0.0.0.0.0.0.0.0.0.0.0.0.0.0\"  id=\"led-0603_3_\">\n                                                                                        <line x1=\"-23.651\" x2=\"-30.887\"  y2=\"-146.552\" y1=\"-146.552\" fill=\"none\"/>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -171.9607 -117.3096)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect height=\"7.35\" x=\"-29.242\" width=\"3.834\" y=\"-148.31\"  fill=\"#F2F2F2\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <path opacity=\"0.7\" enable-background=\"new    \"  d=\"M-28.399-146.554c0,0-0.646,0.469-0.867,0.428c-0.219-0.041-0.541,0.146-0.676,0l0.02-0.426L-28.399-146.554z\" fill=\"#22B573\"/>\n                                                                                        <g >\n                                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -171.862 -117.3516)\" >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <g >\n                                                                                                            <rect height=\"0.854\" x=\"-27.736\" width=\"0.961\" y=\"-145.034\"  fill=\"#FFFFFF\"/>\n                                                                                                        </g>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                            <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -172.3435 -117.8369)\" >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <g >\n                                                                                                            <rect height=\"0.854\" x=\"-27.278\" width=\"0.049\" y=\"-145.517\"  fill=\"#B3B3B3\"/>\n                                                                                                        </g>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <g >\n                                                                                            <polygon points=\"-28.979,-146.129 -29.942,-146.232 -29.942,-145.502 -28.979,-145.607 \"  fill=\"#D1C690\"/>\n                                                                                            <g >\n                                                                                                <path  d=\"M-29.041-145.931c0.002,0,0.006,0,0.01,0c0.266,0.035,0.445,0.104,0.598,0.162c0.209,0.08,0.561,0.781,0.828,0.695c0.025-0.012,0.063,0.012,0.064,0.043c0.01,0.035-0.01,0.068-0.039,0.078c-0.305,0.096-0.674-0.617-0.895-0.701c-0.146-0.061-0.316-0.123-0.57-0.154c-0.027-0.004-0.057-0.031-0.049-0.066C-29.09-145.906-29.067-145.931-29.041-145.931z\" fill=\"#D1C690\"/>\n                                                                                            </g>\n                                                                                            <polygon points=\"-25.559,-143.244 -24.594,-143.14 -24.594,-143.871 -25.559,-143.767 \"  fill=\"#D1C690\"/>\n                                                                                            <g >\n                                                                                                <path  d=\"M-27.213-144.763c0.023,0,0.049,0.021,0.057,0.049c0.063,0.293,1.088,1.15,1.885,1.15c0.033,0,0.059,0.025,0.059,0.063c-0.002,0.033-0.023,0.064-0.059,0.064h-0.002c-0.748,0-1.893-0.771-1.992-1.244c-0.008-0.035,0.014-0.068,0.041-0.078C-27.221-144.763-27.217-144.763-27.213-144.763z\" fill=\"#D1C690\"/>\n                                                                                            </g>\n                                                                                            <path  d=\"M-27.682-144.779c0,0,0.355,0.004,0.385-0.313c-0.07,0-0.385,0-0.385,0V-144.779z\" fill=\"#D1C690\"/>\n                                                                                            <path  d=\"M-27.248-144.459c0,0-0.156-0.309-0.053-0.354c0.105-0.049,0.178-0.053,0.238,0.027C-27-144.699-27.248-144.459-27.248-144.459z\" fill=\"#D1C690\"/>\n                                                                                            <path  d=\"M-27.606-145.127c-0.271,0.084-0.619-0.619-0.828-0.699c-0.146-0.061-0.33-0.127-0.6-0.162v0.063c0.268,0.033,0.447,0.104,0.6,0.16c0.209,0.08,0.561,0.783,0.828,0.697V-145.127z\" fill=\"#9D956C\"/>\n                                                                                            <polygon points=\"-25.559,-143.82 -24.594,-143.921 -24.594,-143.871 -25.559,-143.767 \"  fill=\"#9D956C\"/>\n                                                                                            <path  d=\"M-27.156-144.773c0.064,0.291,1.07,1.211,1.887,1.148v0.061c-0.877,0.063-1.824-0.857-1.889-1.15L-27.156-144.773z\" fill=\"#9D956C\"/>\n                                                                                            <path  d=\"M-27.299-145.146c-0.07,0-0.383,0-0.383,0v0.059c0,0,0.313,0,0.383,0V-145.146z\" fill=\"#9D956C\"/>\n                                                                                            <path  d=\"M-27.059-144.834c-0.064-0.08-0.131-0.076-0.236-0.031l-0.002,0.061c0.105-0.049,0.178-0.051,0.238,0.029V-144.834z\" fill=\"#9D956C\"/>\n                                                                                        </g>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -169.9841 -115.5029)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect opacity=\"0.5\" enable-background=\"new    \" height=\"4.223\" x=\"-27.268\" width=\"0.055\" y=\"-144.855\"  fill=\"#FFFFFF\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <path opacity=\"0.5\" enable-background=\"new    \"  d=\"M-24.61-142.72v-3.832h-5.316l-0.006,3.832H-24.61z\" fill=\"#F2F2F2\"/>\n                                                                                        <path opacity=\"0.55\" enable-background=\"new    \"  d=\"M-24.66-143.373v0.271c-0.02,0.148,0.012,0.27-0.1,0.27c-0.611,0-4.703,0-4.854,0c-0.168,0-0.178-0.063,0.012-0.063c0.133,0,3.895,0,4.348,0c0.457,0,0.52-0.105,0.52-0.197l-0.002-0.271C-24.738-143.546-24.66-143.546-24.66-143.373z\" fill=\"#FFFFFF\"/>\n                                                                                        <path opacity=\"0.03\" enable-background=\"new    \"  d=\"M-29.789-146.332c0-0.066-0.012-0.139,0.1-0.139c0.609,0,4.668,0,4.816,0c0.168,0,0.176,0.064-0.008,0.064c-0.137,0-3.141,0.002-3.59,0.002C-29.065-146.4-29.789-146.332-29.789-146.332z\"/>\n                                                                                        <path  d=\"M-23.653-146.554h-0.771v0.521c0,0.125-0.08,0.213-0.188,0.268v3.051h1.01v-3.785v-0.049\" fill=\"#D1C690\"/>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -166.8494 -118.6396)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect opacity=\"0.5\" enable-background=\"new    \" height=\"1.006\" x=\"-24.131\" width=\"0.053\" y=\"-143.248\"  fill=\"#FFFFFF\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                        <path  d=\"M-31-146.554v0.051v3.783h1.072v-3.465c-0.104-0.057-0.189-0.146-0.189-0.271v-0.102h-0.83\" fill=\"#D1C690\"/>\n                                                                                        <g transform=\"matrix(2.578893e-006 1 -1 2.578893e-006 -173.2058 -112.2832)\" >\n                                                                                            <g >\n                                                                                                <g >\n                                                                                                    <g >\n                                                                                                        <rect opacity=\"0.5\" enable-background=\"new    \" height=\"1.07\" x=\"-30.488\" width=\"0.053\" y=\"-143.28\"  fill=\"#FFFFFF\"/>\n                                                                                                    </g>\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </g>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g >\n                                <g transform=\"matrix(0, -1, 1, 0, 0.777996, 13.82)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g >\n                                                    <polygon points=\"-8.468,48.774 -8.747,48.774 -8.747,42.506 -8.468,42.506 -8.468,37.771 -20.544,37.771 -20.544,53.511 -8.468,53.511 \"  fill=\"#CCCCCC\"/>\n                                                    <polygon points=\"-22.481,42.506 -22.202,42.506 -22.202,48.774 -22.481,48.774 -22.481,53.511 -10.493,53.511 -10.493,37.771 -22.481,37.771 \"  fill=\"#CCCCCC\"/>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -61.1134 30.1666)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <ellipse cy=\"45.64\" ry=\"3.881\"  cx=\"-15.473\" rx=\"3.866\" fill=\"#641D1C\"/>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M-15.661,41.761c-2.137,0-3.867,1.735-3.867,3.879c0,2.143,1.729,3.883,3.867,3.883h0.188c-2.137,0-3.867-1.738-3.867-3.883c0-2.144,1.73-3.879,3.867-3.879H-15.661z\"/>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -61.1139 30.1671)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <ellipse cy=\"45.64\" ry=\"3.738\"  cx=\"-15.473\" rx=\"3.726\" fill=\"#852725\"/>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -61.026 30.255)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <ellipse cy=\"45.64\" ry=\"3.738\"  cx=\"-15.386\" rx=\"3.726\" fill=\"#852725\"/>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <g >\n                                                        <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M-11.749,45.551c0-2.065-1.668-3.738-3.727-3.738s-3.725,1.673-3.725,3.738v0.178c0-2.065,1.668-3.74,3.725-3.74c2.059,0,3.727,1.674,3.727,3.74V45.551z\"/>\n                                                        <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M-19.198,45.551c0,2.066,1.668,3.738,3.727,3.738s3.725-1.672,3.725-3.738v0.178c0,2.063-1.666,3.738-3.725,3.738c-2.061,0-3.727-1.675-3.727-3.738V45.551z\" fill=\"#FFFFFF\"/>\n                                                    </g>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -59.7531 42.5368)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.281\" x=\"-10.977\" width=\"4.738\" y=\"51.004\"  fill=\"#FFFFFF\"/>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -48.7467 31.5304)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.281\" x=\"-10.976\" width=\"4.735\" y=\"39.998\"  fill=\"#FFFFFF\"/>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -54.5255 36.7545)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.277\" x=\"-12.02\" width=\"6.27\" y=\"45.501\"  fill=\"#FFFFFF\"/>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -73.4738 28.8141)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.279\" x=\"-24.699\" width=\"4.738\" y=\"51.004\" />\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -62.4675 17.8097)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.277\" x=\"-24.697\" width=\"4.735\" y=\"40\" />\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                    <g transform=\"matrix(-2.547107e-006 -1 1 -2.547107e-006 -67.6906 23.5895)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.279\" x=\"-25.185\" width=\"6.27\" y=\"45.5\" />\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                                <rect height=\"1.701\" x=\"36.444\" width=\"2.086\" y=\"23.815\"  fill=\"#E6E6E6\"/>\n                                <rect height=\"1.703\" x=\"36.444\" width=\"2.086\" y=\"33.071\"  fill=\"#E6E6E6\"/>\n                                <rect height=\"1.701\" x=\"54.171\" width=\"2.085\" y=\"23.815\"  fill=\"#E6E6E6\"/>\n                                <rect height=\"1.703\" x=\"54.171\" width=\"2.085\" y=\"33.071\"  fill=\"#E6E6E6\"/>\n                            </g>\n                            <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.701\" x=\"50.624\" width=\"0.251\" y=\"35.196\"  fill=\"#FFFFFF\"/>\n                            <polygon points=\"65.973,21.543 81.551,5.953 97.133,21.543 81.551,37.133 \"  fill=\"#333333\"/>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"18.062\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M17.734,1.748c1.046,0,1.893-0.848,1.893-1.893s-0.847-1.894-1.893-1.894h0.328c1.045,0,1.893,0.849,1.893,1.894s-0.848,1.893-1.893,1.893H17.734z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M18.406-2.037c-1.046,0-1.893,0.849-1.893,1.894S17.36,1.75,18.406,1.75h-0.344c-1.045,0-1.892-0.848-1.892-1.893s0.847-1.894,1.892-1.894H18.406z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"17.27\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"18.734\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"17.27\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"25.263\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M24.935,1.748c1.045,0,1.893-0.848,1.893-1.893s-0.848-1.894-1.893-1.894h0.328c1.045,0,1.893,0.849,1.893,1.894s-0.848,1.893-1.893,1.893H24.935z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M25.605-2.037c-1.045,0-1.892,0.849-1.892,1.894s0.847,1.893,1.892,1.893h-0.343c-1.045,0-1.892-0.848-1.892-1.893s0.847-1.894,1.892-1.894H25.605z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"24.47\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"25.935\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"24.47\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"32.463\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M32.135,1.748c1.045,0,1.892-0.848,1.892-1.893s-0.847-1.894-1.892-1.894h0.328c1.045,0,1.892,0.849,1.892,1.894s-0.847,1.893-1.892,1.893H32.135z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M32.806-2.037c-1.045,0-1.892,0.849-1.892,1.894s0.847,1.893,1.892,1.893h-0.343c-1.045,0-1.893-0.848-1.893-1.893s0.848-1.894,1.893-1.894H32.806z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"31.67\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"33.135\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"31.67\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"39.664\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M39.335,1.748c1.045,0,1.892-0.848,1.892-1.893s-0.847-1.894-1.892-1.894h0.328c1.045,0,1.892,0.849,1.892,1.894s-0.847,1.893-1.892,1.893H39.335z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M40.006-2.037c-1.045,0-1.892,0.849-1.892,1.894s0.847,1.893,1.892,1.893h-0.343c-1.045,0-1.893-0.848-1.893-1.893s0.848-1.894,1.893-1.894H40.006z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"38.871\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"40.335\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"38.871\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"46.864\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M46.536,1.748c1.045,0,1.892-0.848,1.892-1.893s-0.847-1.893-1.892-1.893h0.328c1.045,0,1.892,0.849,1.892,1.894s-0.847,1.893-1.892,1.893L46.536,1.748L46.536,1.748z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M47.206-2.037c-1.045,0-1.893,0.849-1.893,1.894s0.848,1.893,1.893,1.893h-0.343c-1.046,0-1.893-0.848-1.893-1.893s0.847-1.894,1.893-1.894H47.206z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"46.071\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"47.536\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"46.071\" width=\"0.121\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"54.063\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M53.735,1.748c1.046,0,1.893-0.848,1.893-1.893s-0.847-1.893-1.893-1.893h0.328c1.045,0,1.893,0.849,1.893,1.894s-0.848,1.893-1.893,1.893L53.735,1.748L53.735,1.748z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M54.407-2.037c-1.046,0-1.893,0.849-1.893,1.894s0.847,1.893,1.893,1.893h-0.344c-1.045,0-1.892-0.848-1.892-1.893s0.847-1.894,1.892-1.894H54.407z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"53.27\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"54.735\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"53.27\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"61.264\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M60.936,1.748c1.045,0,1.893-0.848,1.893-1.893s-0.848-1.893-1.893-1.893h0.328c1.045,0,1.893,0.849,1.893,1.894s-0.848,1.893-1.893,1.893L60.936,1.748L60.936,1.748z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M61.606-2.037c-1.045,0-1.892,0.849-1.892,1.894s0.847,1.893,1.892,1.893h-0.343c-1.045,0-1.892-0.848-1.892-1.893s0.847-1.894,1.892-1.894H61.606z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"60.471\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"61.936\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"60.471\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"68.464\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M68.136,1.748c1.045,0,1.892-0.848,1.892-1.893s-0.847-1.893-1.892-1.893h0.328c1.045,0,1.892,0.849,1.892,1.894s-0.847,1.893-1.892,1.893L68.136,1.748L68.136,1.748z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M68.807-2.037c-1.045,0-1.892,0.849-1.892,1.894s0.847,1.893,1.892,1.893h-0.343c-1.045,0-1.892-0.848-1.892-1.893s0.847-1.894,1.892-1.894H68.807z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"67.671\" width=\"1.587\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"69.136\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"67.671\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"75.663\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M75.336,1.748c1.045,0,1.893-0.848,1.893-1.893s-0.848-1.893-1.893-1.893h0.327c1.046,0,1.894,0.849,1.894,1.894s-0.848,1.893-1.894,1.893L75.336,1.748L75.336,1.748z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M76.008-2.037c-1.045,0-1.894,0.849-1.894,1.894s0.849,1.892,1.894,1.892h-0.345c-1.045,0-1.892-0.848-1.892-1.893s0.847-1.894,1.892-1.894L76.008-2.037L76.008-2.037z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"74.87\" width=\"1.589\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"76.336\" width=\"0.123\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"74.87\" width=\"0.123\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"82.864\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M82.536,1.748c1.045,0,1.895-0.848,1.895-1.893s-0.85-1.893-1.895-1.893h0.328c1.045,0,1.895,0.849,1.895,1.894s-0.85,1.893-1.895,1.893L82.536,1.748L82.536,1.748z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M83.206-2.037c-1.045,0-1.891,0.849-1.891,1.894s0.846,1.893,1.891,1.893h-0.342c-1.045,0-1.895-0.848-1.895-1.893s0.85-1.894,1.895-1.894H83.206z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"82.073\" width=\"1.586\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"83.536\" width=\"0.121\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"82.073\" width=\"0.119\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"90.065\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M89.739,1.748c1.045,0,1.893-0.848,1.893-1.893s-0.848-1.894-1.893-1.894h0.324c1.045,0,1.895,0.849,1.895,1.894s-0.85,1.893-1.895,1.893H89.739z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M90.407-2.037c-1.045,0-1.895,0.849-1.895,1.894s0.85,1.893,1.895,1.893h-0.344c-1.047,0-1.893-0.848-1.893-1.893s0.846-1.894,1.893-1.894H90.407z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"89.27\" width=\"1.588\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"90.735\" width=\"0.123\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"89.27\" width=\"0.123\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"97.266\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M96.936,1.748c1.045,0,1.895-0.848,1.895-1.893s-0.85-1.894-1.895-1.894h0.328c1.045,0,1.895,0.849,1.895,1.894s-0.85,1.893-1.895,1.893H96.936z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M97.608-2.037c-1.045,0-1.893,0.849-1.893,1.894s0.848,1.893,1.893,1.893h-0.344c-1.045,0-1.893-0.848-1.893-1.893s0.848-1.894,1.893-1.894H97.608z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"96.473\" width=\"1.586\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"97.936\" width=\"0.121\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"96.473\" width=\"0.121\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"104.465\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M104.137,1.748c1.045,0,1.893-0.848,1.893-1.893s-0.848-1.894-1.893-1.894h0.328c1.045,0,1.893,0.849,1.893,1.894s-0.848,1.893-1.893,1.893H104.137z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M104.809-2.037c-1.045,0-1.895,0.849-1.895,1.894s0.85,1.893,1.895,1.893h-0.344c-1.045,0-1.893-0.848-1.893-1.893s0.848-1.894,1.893-1.894H104.809z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"103.672\" width=\"1.588\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"105.137\" width=\"0.123\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"103.672\" width=\"0.123\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"111.665\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M111.338,1.748c1.045,0,1.893-0.848,1.893-1.893s-0.848-1.894-1.893-1.894h0.326c1.047,0,1.893,0.849,1.893,1.894s-0.846,1.893-1.893,1.893H111.338z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M112.008-2.037c-1.045,0-1.893,0.849-1.893,1.894s0.848,1.893,1.893,1.893h-0.344c-1.045,0-1.893-0.848-1.893-1.893s0.848-1.894,1.893-1.894H112.008z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"110.872\" width=\"1.588\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"112.338\" width=\"0.121\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"110.872\" width=\"0.121\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"118.866\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M118.538,1.748c1.047,0,1.893-0.848,1.893-1.893s-0.846-1.894-1.893-1.894h0.326c1.045,0,1.895,0.849,1.895,1.894s-0.85,1.893-1.895,1.893H118.538z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M119.209-2.037c-1.047,0-1.895,0.849-1.895,1.894s0.848,1.893,1.895,1.893h-0.346c-1.045,0-1.893-0.848-1.893-1.893s0.848-1.894,1.893-1.894H119.209z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"118.073\" width=\"1.588\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"119.536\" width=\"0.123\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"118.073\" width=\"0.121\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"126.065\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M125.737,1.748c1.047,0,1.895-0.848,1.895-1.893s-0.848-1.894-1.895-1.894h0.328c1.045,0,1.895,0.849,1.895,1.894s-0.85,1.893-1.895,1.893H125.737z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M126.409-2.037c-1.045,0-1.895,0.849-1.895,1.894s0.85,1.893,1.895,1.893h-0.344c-1.047,0-1.895-0.848-1.895-1.893s0.848-1.894,1.895-1.894H126.409z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"125.272\" width=\"1.586\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"126.737\" width=\"0.121\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"125.272\" width=\"0.121\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.145\"  cx=\"133.266\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M132.938,1.748c1.045,0,1.893-0.848,1.893-1.893s-0.848-1.894-1.893-1.894h0.326c1.045,0,1.895,0.849,1.895,1.894s-0.85,1.893-1.895,1.893H132.938z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M133.608-2.037c-1.045,0-1.893,0.849-1.893,1.894s0.848,1.893,1.893,1.893h-0.344c-1.045,0-1.891-0.848-1.891-1.893s0.846-1.894,1.891-1.894H133.608z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"132.473\" width=\"1.588\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"133.936\" width=\"0.123\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"132.473\" width=\"0.123\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"18.094\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M17.766,44.987c1.045,0,1.893-0.85,1.893-1.895S18.811,41.2,17.766,41.2h0.328c1.045,0,1.892,0.848,1.892,1.893s-0.847,1.895-1.892,1.895H17.766z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M18.437,41.204c-1.045,0-1.892,0.846-1.892,1.891s0.847,1.895,1.892,1.895h-0.343c-1.045,0-1.892-0.85-1.892-1.895s0.847-1.891,1.892-1.891H18.437z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"17.301\" width=\"1.587\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"18.766\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"17.301\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"25.294\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M24.966,44.987c1.045,0,1.892-0.85,1.892-1.895S26.011,41.2,24.966,41.2h0.328c1.045,0,1.892,0.848,1.892,1.893s-0.847,1.895-1.892,1.895H24.966z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M25.637,41.204c-1.045,0-1.892,0.846-1.892,1.891s0.847,1.895,1.892,1.895h-0.343c-1.045,0-1.893-0.85-1.893-1.895s0.848-1.891,1.893-1.891H25.637z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"24.501\" width=\"1.587\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"25.966\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"24.501\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"32.495\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M32.166,44.987c1.045,0,1.892-0.85,1.892-1.895S33.211,41.2,32.166,41.2h0.328c1.045,0,1.892,0.848,1.892,1.893s-0.847,1.895-1.892,1.895H32.166z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M32.837,41.204c-1.045,0-1.893,0.846-1.893,1.891s0.848,1.895,1.893,1.895h-0.343c-1.045,0-1.893-0.85-1.893-1.895s0.848-1.891,1.893-1.891H32.837z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"31.702\" width=\"1.587\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"33.166\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"31.702\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"39.694\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M39.367,44.987c1.045,0,1.892-0.85,1.892-1.895S40.412,41.2,39.367,41.2h0.327c1.046,0,1.893,0.848,1.893,1.893s-0.847,1.895-1.893,1.895H39.367z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M40.038,41.204c-1.045,0-1.893,0.846-1.893,1.891s0.848,1.895,1.893,1.895h-0.344c-1.045,0-1.892-0.85-1.892-1.895s0.847-1.891,1.892-1.891H40.038z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"38.901\" width=\"1.588\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"40.367\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"38.901\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"46.895\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M46.566,44.987c1.045,0,1.893-0.85,1.893-1.895S47.611,41.2,46.566,41.2h0.328c1.045,0,1.893,0.848,1.893,1.893s-0.848,1.895-1.893,1.895H46.566z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M47.238,41.204c-1.046,0-1.893,0.846-1.893,1.891s0.847,1.895,1.893,1.895h-0.344c-1.045,0-1.892-0.85-1.892-1.895s0.847-1.891,1.892-1.891H47.238z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"46.102\" width=\"1.587\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"47.566\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"46.102\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"54.095\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M53.767,44.987c1.045,0,1.893-0.85,1.893-1.895S54.812,41.2,53.767,41.2h0.328c1.045,0,1.892,0.848,1.892,1.893s-0.847,1.895-1.892,1.895H53.767z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M54.437,41.204c-1.045,0-1.892,0.846-1.892,1.891s0.847,1.895,1.892,1.895h-0.343c-1.045,0-1.892-0.85-1.892-1.895s0.847-1.891,1.892-1.891H54.437z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"53.302\" width=\"1.587\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"54.767\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"53.302\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"61.295\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M60.967,44.987c1.045,0,1.892-0.85,1.892-1.895S62.012,41.2,60.967,41.2h0.328c1.045,0,1.892,0.848,1.892,1.893s-0.847,1.895-1.892,1.895H60.967z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M61.638,41.204c-1.045,0-1.892,0.846-1.892,1.891s0.847,1.895,1.892,1.895h-0.343c-1.045,0-1.893-0.85-1.893-1.895s0.848-1.891,1.893-1.891H61.638z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"60.502\" width=\"1.587\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"61.967\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"60.502\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"68.496\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M68.167,44.987c1.045,0,1.892-0.85,1.892-1.895S69.212,41.2,68.167,41.2h0.328c1.045,0,1.892,0.848,1.892,1.893s-0.847,1.895-1.892,1.895H68.167z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M68.838,41.204c-1.045,0-1.893,0.846-1.893,1.891s0.848,1.895,1.893,1.895h-0.343c-1.045,0-1.893-0.85-1.893-1.895s0.848-1.891,1.893-1.891H68.838z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"67.703\" width=\"1.587\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"69.167\" width=\"0.122\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"67.703\" width=\"0.122\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"75.697\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M75.368,44.987c1.045,0,1.892-0.85,1.892-1.895S76.413,41.2,75.368,41.2h0.325c1.046,0,1.895,0.848,1.895,1.893s-0.849,1.895-1.895,1.895H75.368z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M76.038,41.204c-1.045,0-1.895,0.846-1.895,1.891s0.85,1.895,1.895,1.895h-0.345c-1.045,0-1.892-0.85-1.892-1.895s0.847-1.891,1.892-1.891H76.038z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"74.901\" width=\"1.589\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"76.366\" width=\"0.123\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"74.901\" width=\"0.123\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.057\"  cx=\"90.096\" fill=\"#E6E6E6\" r=\"1.893\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M89.768,44.95c1.047,0,1.893-0.85,1.893-1.895s-0.846-1.891-1.893-1.891h0.328c1.045,0,1.893,0.846,1.893,1.891s-0.848,1.895-1.893,1.895H89.768z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M90.438,41.168c-1.045,0-1.893,0.846-1.893,1.891s0.848,1.895,1.893,1.895h-0.344c-1.045,0-1.891-0.85-1.891-1.895s0.846-1.891,1.891-1.891H90.438z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"89.303\" width=\"1.588\" y=\"42.264\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"90.768\" width=\"0.123\" y=\"42.264\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"89.303\" width=\"0.123\" y=\"42.264\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"97.297\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M96.969,44.987c1.045,0,1.893-0.85,1.893-1.895S98.014,41.2,96.969,41.2h0.328c1.045,0,1.893,0.848,1.893,1.893s-0.848,1.895-1.893,1.895H96.969z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M97.639,41.204c-1.045,0-1.893,0.846-1.893,1.891s0.848,1.895,1.893,1.895h-0.342c-1.045,0-1.895-0.85-1.895-1.895s0.85-1.891,1.895-1.891H97.639z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"96.504\" width=\"1.586\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"97.969\" width=\"0.121\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"96.504\" width=\"0.119\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"104.497\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M104.168,44.987c1.045,0,1.893-0.85,1.893-1.895s-0.848-1.893-1.893-1.893h0.326c1.045,0,1.895,0.848,1.895,1.893s-0.85,1.895-1.895,1.895H104.168z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M104.84,41.204c-1.045,0-1.895,0.846-1.895,1.891s0.85,1.895,1.895,1.895h-0.346c-1.045,0-1.893-0.85-1.893-1.895s0.848-1.891,1.893-1.891H104.84z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"103.702\" width=\"1.588\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"105.168\" width=\"0.121\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"103.702\" width=\"0.123\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"111.698\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M111.368,44.987c1.045,0,1.895-0.85,1.895-1.895s-0.85-1.893-1.895-1.893h0.328c1.045,0,1.895,0.848,1.895,1.893s-0.85,1.895-1.895,1.895H111.368z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M112.038,41.204c-1.045,0-1.891,0.846-1.891,1.891s0.846,1.895,1.891,1.895h-0.342c-1.045,0-1.895-0.85-1.895-1.895s0.85-1.891,1.895-1.891H112.038z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"110.903\" width=\"1.588\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"112.368\" width=\"0.121\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"110.903\" width=\"0.121\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"118.897\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M118.569,44.987c1.047,0,1.895-0.85,1.895-1.895s-0.848-1.893-1.895-1.893h0.326c1.045,0,1.895,0.848,1.895,1.893s-0.85,1.895-1.895,1.895H118.569z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M119.239,41.204c-1.045,0-1.895,0.846-1.895,1.891s0.85,1.895,1.895,1.895h-0.346c-1.045,0-1.891-0.85-1.891-1.895s0.846-1.891,1.891-1.891H119.239z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"118.102\" width=\"1.588\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"119.567\" width=\"0.123\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"118.102\" width=\"0.123\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"126.098\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M125.768,44.987c1.045,0,1.895-0.85,1.895-1.895s-0.85-1.893-1.895-1.893h0.328c1.045,0,1.895,0.848,1.895,1.893s-0.85,1.895-1.895,1.895H125.768z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M126.44,41.204c-1.047,0-1.893,0.846-1.893,1.891s0.846,1.895,1.893,1.895h-0.342c-1.045,0-1.895-0.85-1.895-1.895s0.85-1.891,1.895-1.891H126.44z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"125.305\" width=\"1.586\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"126.768\" width=\"0.121\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"125.305\" width=\"0.121\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.093\"  cx=\"133.297\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M132.969,44.987c1.045,0,1.893-0.85,1.893-1.895s-0.848-1.893-1.893-1.893h0.328c1.045,0,1.893,0.848,1.893,1.893s-0.848,1.895-1.893,1.895H132.969z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M133.641,41.204c-1.045,0-1.895,0.846-1.895,1.891s0.85,1.895,1.895,1.895h-0.344c-1.045,0-1.893-0.85-1.893-1.895s0.848-1.891,1.893-1.891H133.641z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"132.504\" width=\"1.588\" y=\"42.301\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"133.969\" width=\"0.123\" y=\"42.301\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"132.504\" width=\"0.123\" y=\"42.301\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.146\"  cx=\"10.861\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M10.534,1.748c1.045,0,1.892-0.848,1.892-1.893s-0.847-1.894-1.892-1.894h0.327c1.046,0,1.893,0.849,1.893,1.894s-0.847,1.893-1.893,1.893H10.534z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M11.205-2.038c-1.045,0-1.893,0.849-1.893,1.894s0.848,1.893,1.893,1.893h-0.344c-1.045,0-1.892-0.848-1.892-1.893s0.847-1.894,1.892-1.894H11.205z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"10.067\" width=\"1.588\" y=\"-0.938\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"11.534\" width=\"0.122\" y=\"-0.938\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"10.067\" width=\"0.122\" y=\"-0.938\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.095\"  cx=\"10.863\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M10.535,44.989c1.045,0,1.892-0.848,1.892-1.893s-0.847-1.895-1.892-1.895h0.328c1.045,0,1.892,0.85,1.892,1.895s-0.847,1.893-1.892,1.893H10.535z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M11.206,41.204c-1.045,0-1.893,0.85-1.893,1.895s0.848,1.893,1.893,1.893h-0.343c-1.046,0-1.893-0.848-1.893-1.893s0.847-1.895,1.893-1.895H11.206z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"10.068\" width=\"1.588\" y=\"42.303\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"11.535\" width=\"0.122\" y=\"42.303\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"10.068\" width=\"0.122\" y=\"42.303\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.208\"  cx=\"140.379\" fill=\"#E6E6E6\" r=\"1.893\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M140.051,1.687c1.043,0,1.889-0.849,1.889-1.894c0-1.045-0.846-1.894-1.889-1.894h0.328c1.043,0,1.889,0.849,1.889,1.894c0,1.045-0.846,1.894-1.889,1.894H140.051z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M140.721-2.101c-1.043,0-1.891,0.849-1.891,1.894c0,1.045,0.848,1.894,1.891,1.894h-0.344c-1.043,0-1.891-0.849-1.891-1.894c0-1.045,0.848-1.894,1.891-1.894H140.721z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"139.586\" width=\"1.584\" y=\"-1.001\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"141.049\" width=\"0.121\" y=\"-1.001\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"139.586\" width=\"0.121\" y=\"-1.001\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"-0.208\"  cx=\"147.565\" fill=\"#E6E6E6\" r=\"1.893\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M147.241,1.687c1.043,0,1.887-0.849,1.887-1.894c0-1.045-0.844-1.894-1.887-1.894h0.324c1.043,0,1.891,0.849,1.891,1.894c0,1.045-0.848,1.894-1.891,1.894H147.241z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M147.909-2.101c-1.043,0-1.891,0.849-1.891,1.894c0,1.045,0.848,1.894,1.891,1.894h-0.344c-1.043,0-1.889-0.849-1.889-1.894c0-1.045,0.846-1.894,1.889-1.894H147.909z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.587\" x=\"146.774\" width=\"1.584\" y=\"-1.001\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.587\" x=\"148.235\" width=\"0.123\" y=\"-1.001\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.587\" x=\"146.774\" width=\"0.121\" y=\"-1.001\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.064\"  cx=\"140.411\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M140.083,44.958c1.043,0,1.889-0.85,1.889-1.895s-0.846-1.891-1.889-1.891h0.328c1.043,0,1.889,0.846,1.889,1.891s-0.846,1.895-1.889,1.895H140.083z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M140.752,41.174c-1.045,0-1.889,0.846-1.889,1.891s0.844,1.896,1.889,1.896h-0.342c-1.043,0-1.893-0.852-1.893-1.896s0.85-1.891,1.893-1.891H140.752z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"139.618\" width=\"1.584\" y=\"42.27\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"141.081\" width=\"0.121\" y=\"42.27\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"139.618\" width=\"0.121\" y=\"42.27\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.064\"  cx=\"147.596\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M147.268,44.958c1.043,0,1.891-0.85,1.891-1.895s-0.848-1.891-1.891-1.891h0.328c1.043,0,1.889,0.846,1.889,1.891s-0.846,1.895-1.889,1.895H147.268z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M147.94,41.174c-1.045,0-1.891,0.846-1.891,1.891s0.846,1.896,1.891,1.896h-0.344c-1.043,0-1.889-0.852-1.889-1.896s0.846-1.891,1.889-1.891H147.94z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"146.805\" width=\"1.586\" y=\"42.27\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"148.268\" width=\"0.123\" y=\"42.27\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"146.805\" width=\"0.123\" y=\"42.27\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"43.057\"  cx=\"82.893\" fill=\"#E6E6E6\" r=\"1.893\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M82.567,44.95c1.047,0,1.895-0.85,1.895-1.895s-0.848-1.891-1.895-1.891h0.328c1.045,0,1.895,0.846,1.895,1.891s-0.85,1.895-1.895,1.895H82.567z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M83.239,41.168c-1.045,0-1.895,0.846-1.895,1.891s0.85,1.895,1.895,1.895h-0.346c-1.045,0-1.893-0.85-1.893-1.895s0.848-1.891,1.893-1.891H83.239z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"82.102\" width=\"1.586\" y=\"42.264\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"1.588\" x=\"83.567\" width=\"0.121\" y=\"42.264\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"1.588\" x=\"82.102\" width=\"0.121\" y=\"42.264\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"31.785\"  cx=\"137.315\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M139.208,32.112c0-1.045-0.85-1.893-1.895-1.893s-1.889,0.848-1.889,1.893v-0.328c0-1.045,0.844-1.893,1.889-1.893s1.895,0.848,1.895,1.893V32.112z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M135.426,31.44c0,1.047,0.846,1.895,1.891,1.895s1.895-0.848,1.895-1.895v0.344c0,1.045-0.85,1.895-1.895,1.895s-1.891-0.85-1.891-1.895V31.44z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.586\" x=\"136.522\" width=\"1.588\" y=\"30.991\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.121\" x=\"136.522\" width=\"1.588\" y=\"30.991\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"0.121\" x=\"136.522\" width=\"1.588\" y=\"32.456\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"24.587\"  cx=\"137.315\" fill=\"#E6E6E6\" r=\"1.892\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M139.208,24.915c0-1.045-0.85-1.891-1.895-1.891s-1.889,0.846-1.889,1.891v-0.328c0-1.045,0.844-1.891,1.889-1.891s1.895,0.846,1.895,1.891V24.915z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M135.426,24.243c0,1.045,0.846,1.895,1.891,1.895s1.895-0.85,1.895-1.895v0.344c0,1.045-0.85,1.893-1.895,1.893s-1.891-0.848-1.891-1.893V24.243z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.588\" x=\"136.522\" width=\"1.588\" y=\"23.792\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.123\" x=\"136.522\" width=\"1.588\" y=\"23.792\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"0.123\" x=\"136.522\" width=\"1.588\" y=\"25.256\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"17.475\"  cx=\"137.288\" fill=\"#E6E6E6\" r=\"1.891\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M139.178,17.803c0-1.044-0.848-1.89-1.893-1.89s-1.891,0.846-1.891,1.89v-0.328c0-1.043,0.846-1.89,1.891-1.89s1.893,0.847,1.893,1.89V17.803z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M135.397,17.132c0,1.045,0.846,1.889,1.891,1.889s1.893-0.844,1.893-1.889v0.343c0,1.043-0.848,1.891-1.893,1.891s-1.891-0.848-1.891-1.891V17.132z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.583\" x=\"136.493\" width=\"1.588\" y=\"16.684\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.12\" x=\"136.493\" width=\"1.588\" y=\"16.684\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"0.121\" x=\"136.493\" width=\"1.588\" y=\"18.146\" />\n                                </g>\n                            </g>\n                            <g >\n                                <circle cy=\"10.288\"  cx=\"137.288\" fill=\"#E6E6E6\" r=\"1.891\"/>\n                                <path opacity=\"0.2\" enable-background=\"new    \"  d=\"M139.178,10.615c0-1.043-0.848-1.889-1.893-1.889s-1.891,0.846-1.891,1.889v-0.327c0-1.043,0.846-1.89,1.891-1.89s1.893,0.847,1.893,1.89V10.615z\" fill=\"#FFFFFF\"/>\n                                <path opacity=\"0.1\" enable-background=\"new    \"  d=\"M135.397,9.944c0,1.044,0.846,1.891,1.891,1.891s1.893-0.847,1.893-1.891v0.344c0,1.043-0.848,1.889-1.893,1.889s-1.891-0.846-1.891-1.889V9.944z\" fill=\"#1A1A1A\"/>\n                                <g >\n                                    <rect height=\"1.585\" x=\"136.493\" width=\"1.588\" y=\"9.494\"  fill=\"#CCCCCC\"/>\n                                    <rect opacity=\"0.2\" enable-background=\"new    \" height=\"0.123\" x=\"136.493\" width=\"1.588\" y=\"9.494\"  fill=\"#FFFFFF\"/>\n                                    <rect opacity=\"0.1\" enable-background=\"new    \" height=\"0.122\" x=\"136.493\" width=\"1.588\" y=\"10.957\" />\n                                </g>\n                            </g>\n                            <g >\n                                <title >text:RX</title>\n                                <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g >\n                                                    <g transform=\"rotate(270)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g >\n                                                                        <g transform=\"matrix(0 1 -1 0 41.0822 1.8136)\" >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">3.3</text>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9396 124.1471)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">VBat</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 117.2457)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">C13</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 110.0739)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">C14</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 103.0397)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">C15</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9396 96.7985)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A0</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 82.2477)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A2</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 89.734)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A1</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 75.2047)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A3</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9396 67.9733)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A4</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 60.8297)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A5</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 53.6559)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A6</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9396 46.505)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A7</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 39.2814)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B0</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 32.4088)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B1</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 23.6891)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B10</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 16.8107)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B11</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 40.9406 9.5221)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">RST</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g >\n                                <title >text:TX</title>\n                                <g transform=\"matrix(1, 0, 0, 1, 20.16, 43.2)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g >\n                                                    <g transform=\"rotate(270)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g >\n                                                                        <g transform=\"matrix(0 1 -1 0 -5.0085 -12.2318)\" >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B12</text>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g >\n                                <title >text:RX</title>\n                                <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g >\n                                                    <g transform=\"rotate(270)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g >\n                                                                        <g transform=\"matrix(0 1 -1 0 -10.4085 -4.9891)\" >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B13</text>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g >\n                                <title >text:RX</title>\n                                <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g >\n                                                    <g transform=\"rotate(270)\" >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g >\n                                                                        <g transform=\"matrix(0 1 -1 0 -10.2669 1.8219)\" >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <g >\n                                                                                        <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B14</text>\n                                                                                    </g>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 124.7233)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">3.3</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 119.2389)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">G</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 111.358)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">5V</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 104.1813)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B9</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 97.0905)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B8</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 82.5397)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B6</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 89.7428)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B7</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 75.2135)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B5</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 68.1237)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B4</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 60.8385)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B3</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 52.8151)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A15</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 45.5216)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A12</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 38.4396)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A11</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 31.2833)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A10</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 24.6896)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A9</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 17.528)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">A8</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 -10.4085 9.3888)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">B15</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <path stroke-width=\"0.5\"  d=\"M111.346,33.002c0,2.127-1.828,3.852-4.086,3.852l0,0c-2.256,0-4.086-1.725-4.086-3.852V10.086c0-2.128,1.83-3.853,4.086-3.853l0,0c2.258,0,4.086,1.725,4.086,3.853V33.002z\" stroke=\"#FFFFFF\" fill=\"#FFFFFF\"/>\n                            <rect height=\"25.325\" stroke-width=\"0.5\" x=\"116.202\" width=\"8.137\" y=\"8.384\"  stroke=\"#231F20\" fill=\"#231F20\"/>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 26.5695 120.6041)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">GND</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 19.3176 120.4791)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">CLK</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 12.2321 120.4791)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">DIO</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 20.16, 37.8)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g >\n                                                <g transform=\"rotate(270)\" >\n                                                    <g >\n                                                        <g >\n                                                            <g >\n                                                                <g >\n                                                                    <g transform=\"matrix(0 1 -1 0 5.0036 120.4791)\" >\n                                                                        <g >\n                                                                            <g >\n                                                                                <g >\n                                                                                    <text font-family=\"OCRA\"  font-size=\"2.6726\" fill=\"#FFFFFF\">3.3</text>\n                                                                                </g>\n                                                                            </g>\n                                                                        </g>\n                                                                    </g>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                        <g gorn=\"0.1.0.0.0.0.1\"  id=\"breadboard\">\n                            <g transform=\"matrix(1, 0, 0, 1, 34.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.0.0.0.0.0\"  id=\"connector0pin\">\n                                                <rect height=\"2.298\" x=\"112.409\" width=\"2.298\" y=\"-535.423\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"112.969\" width=\"1.184\" y=\"-534.866\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"112.409,-533.125 112.969,-533.684 112.969,-534.921 112.409,-535.423 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"114.151,-534.864 112.977,-534.864 112.409,-535.423 114.707,-535.423 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"114.151,-533.684 114.151,-534.864 114.707,-535.423 114.707,-533.125 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"112.409,-533.125 112.975,-533.684 114.151,-533.684 114.707,-533.125 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 34.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.1.0.0.0.0\"  id=\"connector47pin\">\n                                                <rect height=\"2.296\" x=\"112.412\" width=\"2.298\" y=\"7.803\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"112.972\" width=\"1.184\" y=\"8.359\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"112.412,10.099 112.972,9.539 112.972,8.304 112.412,7.803 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"114.154,8.362 112.98,8.362 112.412,7.803 114.71,7.803 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"114.154,9.539 114.154,8.362 114.71,7.803 114.71,10.099 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"112.412,10.099 112.978,9.539 114.154,9.539 114.71,10.099 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 134.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.2.0.0.0.0\"  id=\"connector1pin\">\n                                                <rect height=\"2.298\" x=\"5.297\" width=\"2.298\" y=\"-535.427\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"5.857\" width=\"1.184\" y=\"-534.87\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"5.297,-533.13 5.857,-533.688 5.857,-534.925 5.297,-535.427 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"7.039,-534.868 5.866,-534.868 5.297,-535.427 7.594,-535.427 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"7.039,-533.688 7.039,-534.868 7.594,-535.427 7.594,-533.13 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"5.297,-533.13 5.863,-533.688 7.039,-533.688 7.594,-533.13 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 134.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.3.0.0.0.0\"  id=\"connector46pin\">\n                                                <rect height=\"2.297\" x=\"2.179\" width=\"2.298\" y=\"-24.932\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"2.74\" width=\"1.184\" y=\"-24.375\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"2.179,-22.635 2.74,-23.194 2.74,-24.43 2.179,-24.932 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"3.922,-24.372 2.749,-24.372 2.179,-24.932 4.477,-24.932 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"3.922,-23.194 3.922,-24.372 4.477,-24.932 4.477,-22.635 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"2.179,-22.635 2.746,-23.194 3.922,-23.194 4.477,-22.635 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 234.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.4.0.0.0.0\"  id=\"connector2pin\">\n                                                <rect height=\"2.298\" x=\"-101.817\" width=\"2.298\" y=\"-535.427\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-101.255\" width=\"1.184\" y=\"-534.87\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-101.817,-533.13 -101.255,-533.688 -101.255,-534.925 -101.817,-535.427 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-100.075,-534.868 -101.247,-534.868 -101.817,-535.427 -99.519,-535.427 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-100.075,-533.688 -100.075,-534.868 -99.519,-535.427 -99.519,-533.13 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-101.817,-533.13 -101.249,-533.688 -100.075,-533.688 -99.519,-533.13 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 234.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.5.0.0.0.0\"  id=\"connector45pin\">\n                                                <rect height=\"2.296\" x=\"-109.184\" width=\"2.298\" y=\"7.947\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-108.622\" width=\"1.184\" y=\"8.503\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-109.184,10.242 -108.622,9.684 -108.622,8.449 -109.184,7.947 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-107.442,8.506 -108.615,8.506 -109.184,7.947 -106.886,7.947 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-107.442,9.684 -107.442,8.506 -106.886,7.947 -106.886,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-109.184,10.242 -108.617,9.684 -107.442,9.684 -106.886,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 334.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.6.0.0.0.0\"  id=\"connector3pin\">\n                                                <rect height=\"2.298\" x=\"-209.074\" width=\"2.299\" y=\"-535.426\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-208.513\" width=\"1.185\" y=\"-534.869\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-209.074,-533.128 -208.513,-533.687 -208.513,-534.924 -209.074,-535.426 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-207.33,-534.867 -208.504,-534.867 -209.074,-535.426 -206.775,-535.426 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-207.33,-533.687 -207.33,-534.867 -206.775,-535.426 -206.775,-533.128 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-209.074,-533.128 -208.506,-533.687 -207.33,-533.687 -206.775,-533.128 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 334.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.7.0.0.0.0\"  id=\"connector44pin\">\n                                                <rect height=\"2.296\" x=\"-216.3\" width=\"2.299\" y=\"7.947\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-215.74\" width=\"1.185\" y=\"8.503\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-216.3,10.242 -215.74,9.684 -215.74,8.449 -216.3,7.947 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-214.557,8.506 -215.731,8.506 -216.3,7.947 -214.001,7.947 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-214.557,9.684 -214.557,8.506 -214.001,7.947 -214.001,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-216.3,10.242 -215.733,9.684 -214.557,9.684 -214.001,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 434.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.8.0.0.0.0\"  id=\"connector4pin\">\n                                                <rect height=\"2.297\" x=\"-327.948\" width=\"2.298\" y=\"-503.536\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-327.387\" width=\"1.184\" y=\"-502.979\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-327.948,-501.239 -327.387,-501.798 -327.387,-503.034 -327.948,-503.536 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-326.205,-502.977 -327.379,-502.977 -327.948,-503.536 -325.65,-503.536 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-326.205,-501.798 -326.205,-502.977 -325.65,-503.536 -325.65,-501.239 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-327.948,-501.239 -327.381,-501.798 -326.205,-501.798 -325.65,-501.239 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 434.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.9.0.0.0.0\"  id=\"connector43pin\">\n                                                <rect height=\"2.296\" x=\"-388.893\" width=\"2.299\" y=\"-25.501\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-388.332\" width=\"1.184\" y=\"-24.944\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-388.893,-23.204 -388.332,-23.763 -388.332,-24.999 -388.893,-25.501 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-387.15,-24.941 -388.324,-24.941 -388.893,-25.501 -386.594,-25.501 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-387.15,-23.763 -387.15,-24.941 -386.594,-25.501 -386.594,-23.204 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-388.893,-23.204 -388.326,-23.763 -387.15,-23.763 -386.594,-23.204 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 534.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.10.0.0.0.0\"  id=\"connector5pin\">\n                                                <rect height=\"2.298\" x=\"-427.835\" width=\"2.298\" y=\"-523.378\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-427.275\" width=\"1.184\" y=\"-522.821\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-427.835,-521.08 -427.275,-521.639 -427.275,-522.876 -427.835,-523.378 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-426.093,-522.819 -427.267,-522.819 -427.835,-523.378 -425.537,-523.378 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-426.093,-521.639 -426.093,-522.819 -425.537,-523.378 -425.537,-521.08 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-427.835,-521.08 -427.269,-521.639 -426.093,-521.639 -425.537,-521.08 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 534.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.11.0.0.0.0\"  id=\"connector42pin\">\n                                                <rect height=\"2.296\" x=\"-423.443\" width=\"2.298\" y=\"7.946\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-422.882\" width=\"1.184\" y=\"8.502\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-423.443,10.242 -422.882,9.683 -422.882,8.448 -423.443,7.946 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-421.701,8.505 -422.874,8.505 -423.443,7.946 -421.145,7.946 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-421.701,9.683 -421.701,8.505 -421.145,7.946 -421.145,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-423.443,10.242 -422.876,9.683 -421.701,9.683 -421.145,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 634.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.12.0.0.0.0\"  id=\"connector6pin\">\n                                                <rect height=\"2.298\" x=\"-602.701\" width=\"2.299\" y=\"-535.426\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-602.14\" width=\"1.184\" y=\"-534.869\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-602.701,-533.128 -602.14,-533.687 -602.14,-534.924 -602.701,-535.426 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-600.958,-534.867 -602.132,-534.867 -602.701,-535.426 -600.402,-535.426 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-600.958,-533.687 -600.958,-534.867 -600.402,-535.426 -600.402,-533.128 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-602.701,-533.128 -602.134,-533.687 -600.958,-533.687 -600.402,-533.128 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 634.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.13.0.0.0.0\"  id=\"connector41pin\">\n                                                <rect height=\"2.296\" x=\"-530.557\" width=\"2.299\" y=\"7.947\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-529.996\" width=\"1.184\" y=\"8.503\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-530.557,10.242 -529.996,9.684 -529.996,8.449 -530.557,7.947 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-528.815,8.506 -529.988,8.506 -530.557,7.947 -528.258,7.947 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-528.815,9.684 -528.815,8.506 -528.258,7.947 -528.258,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-530.557,10.242 -529.991,9.684 -528.815,9.684 -528.258,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 734.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.14.0.0.0.0\"  id=\"connector7pin\">\n                                                <rect height=\"2.298\" x=\"-717.046\" width=\"2.299\" y=\"-535.284\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-716.485\" width=\"1.184\" y=\"-534.727\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-717.046,-532.987 -716.485,-533.545 -716.485,-534.782 -717.046,-535.284 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-715.304,-534.725 -716.477,-534.725 -717.046,-535.284 -714.747,-535.284 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-715.304,-533.545 -715.304,-534.725 -714.747,-535.284 -714.747,-532.987 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-717.046,-532.987 -716.479,-533.545 -715.304,-533.545 -714.747,-532.987 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 734.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.15.0.0.0.0\"  id=\"connector40pin\">\n                                                <rect height=\"2.296\" x=\"-637.953\" width=\"2.298\" y=\"7.947\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-637.393\" width=\"1.184\" y=\"8.503\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-637.953,10.242 -637.393,9.684 -637.393,8.449 -637.953,7.947 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-636.212,8.506 -637.385,8.506 -637.953,7.947 -635.656,7.947 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-636.212,9.684 -636.212,8.506 -635.656,7.947 -635.656,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-637.953,10.242 -637.387,9.684 -636.212,9.684 -635.656,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 834.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.16.0.0.0.0\"  id=\"connector8pin\">\n                                                <rect height=\"2.298\" x=\"-809.847\" width=\"2.299\" y=\"-535.284\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-809.286\" width=\"1.184\" y=\"-534.727\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-809.847,-532.987 -809.286,-533.545 -809.286,-534.782 -809.847,-535.284 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-808.103,-534.725 -809.277,-534.725 -809.847,-535.284 -807.547,-535.284 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-808.103,-533.545 -808.103,-534.725 -807.547,-535.284 -807.547,-532.987 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-809.847,-532.987 -809.279,-533.545 -808.103,-533.545 -807.547,-532.987 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 834.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.17.0.0.0.0\"  id=\"connector39pin\">\n                                                <rect height=\"2.296\" x=\"-745.071\" width=\"2.299\" y=\"7.804\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-744.51\" width=\"1.185\" y=\"8.361\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-745.071,10.1 -744.51,9.541 -744.51,8.306 -745.071,7.804 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-743.328,8.364 -744.501,8.364 -745.071,7.804 -742.772,7.804 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-743.328,9.541 -743.328,8.364 -742.772,7.804 -742.772,10.1 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-745.071,10.1 -744.503,9.541 -743.328,9.541 -742.772,10.1 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 934.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.18.0.0.0.0\"  id=\"connector9pin\">\n                                                <rect height=\"2.298\" x=\"-816.332\" width=\"2.298\" y=\"-535.286\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-815.772\" width=\"1.184\" y=\"-534.729\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-816.332,-532.988 -815.772,-533.547 -815.772,-534.783 -816.332,-535.286 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-814.59,-534.727 -815.764,-534.727 -816.332,-535.286 -814.035,-535.286 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-814.59,-533.547 -814.59,-534.727 -814.035,-535.286 -814.035,-532.988 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-816.332,-532.988 -815.766,-533.547 -814.59,-533.547 -814.035,-532.988 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 934.035, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.19.0.0.0.0\"  id=\"connector38pin\">\n                                                <rect height=\"2.296\" x=\"-852.325\" width=\"2.299\" y=\"7.804\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-851.764\" width=\"1.184\" y=\"8.361\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-852.325,10.1 -851.764,9.541 -851.764,8.306 -852.325,7.804 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-850.582,8.364 -851.756,8.364 -852.325,7.804 -850.026,7.804 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-850.582,9.541 -850.582,8.364 -850.026,7.804 -850.026,10.1 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-852.325,10.1 -851.758,9.541 -850.582,9.541 -850.026,10.1 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1034.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.20.0.0.0.0\"  id=\"connector10pin\">\n                                                <rect height=\"2.298\" x=\"-923.452\" width=\"2.299\" y=\"-535.427\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-922.89\" width=\"1.184\" y=\"-534.87\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-923.452,-533.13 -922.89,-533.688 -922.89,-534.925 -923.452,-535.427 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-921.708,-534.868 -922.882,-534.868 -923.452,-535.427 -921.153,-535.427 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-921.708,-533.688 -921.708,-534.868 -921.153,-535.427 -921.153,-533.13 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-923.452,-533.13 -922.884,-533.688 -921.708,-533.688 -921.153,-533.13 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1034.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.21.0.0.0.0\"  id=\"connector37pin\">\n                                                <rect height=\"2.296\" x=\"-959.448\" width=\"2.299\" y=\"7.946\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-958.887\" width=\"1.184\" y=\"8.502\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-959.448,10.242 -958.887,9.683 -958.887,8.448 -959.448,7.946 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-957.705,8.505 -958.878,8.505 -959.448,7.946 -957.148,7.946 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-957.705,9.683 -957.705,8.505 -957.148,7.946 -957.148,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-959.448,10.242 -958.88,9.683 -957.705,9.683 -957.148,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1134.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.22.0.0.0.0\"  id=\"connector11pin\">\n                                                <rect height=\"2.298\" x=\"-1030.708\" width=\"2.298\" y=\"-535.427\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1030.147\" width=\"1.184\" y=\"-534.87\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1030.708,-533.13 -1030.147,-533.688 -1030.147,-534.925 -1030.708,-535.427 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1028.965,-534.868 -1030.139,-534.868 -1030.708,-535.427 -1028.41,-535.427 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1028.965,-533.688 -1028.965,-534.868 -1028.41,-535.427 -1028.41,-533.13 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1030.708,-533.13 -1030.141,-533.688 -1028.965,-533.688 -1028.41,-533.13 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1134.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.23.0.0.0.0\"  id=\"connector36pin\">\n                                                <rect height=\"2.297\" x=\"-997.833\" width=\"2.298\" y=\"-17.704\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-997.273\" width=\"1.184\" y=\"-17.147\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-997.833,-15.407 -997.273,-15.966 -997.273,-17.202 -997.833,-17.704 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-996.091,-17.145 -997.265,-17.145 -997.833,-17.704 -995.536,-17.704 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-996.091,-15.966 -996.091,-17.145 -995.536,-17.704 -995.536,-15.407 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-997.833,-15.407 -997.267,-15.966 -996.091,-15.966 -995.536,-15.407 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1234.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.24.0.0.0.0\"  id=\"connector12pin\">\n                                                <rect height=\"2.298\" x=\"-1137.962\" width=\"2.299\" y=\"-535.427\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1137.402\" width=\"1.184\" y=\"-534.87\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1137.962,-533.13 -1137.402,-533.688 -1137.402,-534.925 -1137.962,-535.427 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1136.22,-534.868 -1137.394,-534.868 -1137.962,-535.427 -1135.664,-535.427 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1136.22,-533.688 -1136.22,-534.868 -1135.664,-535.427 -1135.664,-533.13 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1137.962,-533.13 -1137.396,-533.688 -1136.22,-533.688 -1135.664,-533.13 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1234.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.25.0.0.0.0\"  id=\"connector35pin\">\n                                                <rect height=\"2.296\" x=\"-1097.862\" width=\"2.299\" y=\"-3.389\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1097.301\" width=\"1.184\" y=\"-2.833\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1097.862,-1.093 -1097.301,-1.652 -1097.301,-2.887 -1097.862,-3.389 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1096.12,-2.83 -1097.293,-2.83 -1097.862,-3.389 -1095.563,-3.389 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1096.12,-1.652 -1096.12,-2.83 -1095.563,-3.389 -1095.563,-1.093 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1097.862,-1.093 -1097.295,-1.652 -1096.12,-1.652 -1095.563,-1.093 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1334.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.26.0.0.0.0\"  id=\"connector13pin\">\n                                                <rect height=\"2.298\" x=\"-1245.075\" width=\"2.299\" y=\"-535.426\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1244.513\" width=\"1.185\" y=\"-534.869\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1245.075,-533.128 -1244.513,-533.687 -1244.513,-534.924 -1245.075,-535.426 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1243.331,-534.867 -1244.504,-534.867 -1245.075,-535.426 -1242.776,-535.426 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1243.331,-533.687 -1243.331,-534.867 -1242.776,-535.426 -1242.776,-533.128 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1245.075,-533.128 -1244.507,-533.687 -1243.331,-533.687 -1242.776,-533.128 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1334.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.27.0.0.0.0\"  id=\"connector34pin\">\n                                                <rect height=\"2.297\" x=\"-1324.312\" width=\"2.3\" y=\"-35.422\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1323.75\" width=\"1.185\" y=\"-34.865\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1324.312,-33.125 -1323.75,-33.684 -1323.75,-34.92 -1324.312,-35.422 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1322.567,-34.862 -1323.741,-34.862 -1324.312,-35.422 -1322.012,-35.422 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1322.567,-33.684 -1322.567,-34.862 -1322.012,-35.422 -1322.012,-33.125 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1324.312,-33.125 -1323.744,-33.684 -1322.567,-33.684 -1322.012,-33.125 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1434.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.28.0.0.0.0\"  id=\"connector14pin\">\n                                                <rect height=\"2.298\" x=\"-1352.329\" width=\"2.3\" y=\"-535.426\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1351.768\" width=\"1.184\" y=\"-534.869\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1352.329,-533.128 -1351.768,-533.687 -1351.768,-534.924 -1352.329,-535.426 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1350.586,-534.867 -1351.76,-534.867 -1352.329,-535.426 -1350.029,-535.426 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1350.586,-533.687 -1350.586,-534.867 -1350.029,-535.426 -1350.029,-533.128 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1352.329,-533.128 -1351.762,-533.687 -1350.586,-533.687 -1350.029,-533.128 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1434.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.29.0.0.0.0\"  id=\"connector33pin\">\n                                                <rect height=\"2.296\" x=\"-1297.772\" width=\"2.299\" y=\"-10.616\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1297.211\" width=\"1.184\" y=\"-10.059\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1297.772,-8.32 -1297.211,-8.879 -1297.211,-10.114 -1297.772,-10.616 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1296.03,-10.056 -1297.204,-10.056 -1297.772,-10.616 -1295.473,-10.616 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1296.03,-8.879 -1296.03,-10.056 -1295.473,-10.616 -1295.473,-8.32 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1297.772,-8.32 -1297.206,-8.879 -1296.03,-8.879 -1295.473,-8.32 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1534.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.30.0.0.0.0\"  id=\"connector15pin\">\n                                                <rect height=\"2.298\" x=\"-1459.443\" width=\"2.3\" y=\"-535.427\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1458.882\" width=\"1.185\" y=\"-534.87\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1459.443,-533.13 -1458.882,-533.688 -1458.882,-534.925 -1459.443,-535.427 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1457.7,-534.868 -1458.874,-534.868 -1459.443,-535.427 -1457.144,-535.427 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1457.7,-533.688 -1457.7,-534.868 -1457.144,-535.427 -1457.144,-533.13 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1459.443,-533.13 -1458.875,-533.688 -1457.7,-533.688 -1457.144,-533.13 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1534.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.31.0.0.0.0\"  id=\"connector32pin\">\n                                                <rect height=\"2.296\" x=\"-1466.815\" width=\"2.3\" y=\"7.946\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1466.254\" width=\"1.185\" y=\"8.502\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1466.815,10.242 -1466.254,9.683 -1466.254,8.448 -1466.815,7.946 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1465.072,8.505 -1466.246,8.505 -1466.815,7.946 -1464.516,7.946 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1465.072,9.683 -1465.072,8.505 -1464.516,7.946 -1464.516,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1466.815,10.242 -1466.248,9.683 -1465.072,9.683 -1464.516,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1634.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.32.0.0.0.0\"  id=\"connector16pin\">\n                                                <rect height=\"2.298\" x=\"-1566.702\" width=\"2.3\" y=\"-535.427\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1566.14\" width=\"1.184\" y=\"-534.87\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1566.702,-533.13 -1566.14,-533.688 -1566.14,-534.925 -1566.702,-535.427 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1564.958,-534.868 -1566.132,-534.868 -1566.702,-535.427 -1564.402,-535.427 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1564.958,-533.688 -1564.958,-534.868 -1564.402,-535.427 -1564.402,-533.13 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1566.702,-533.13 -1566.134,-533.688 -1564.958,-533.688 -1564.402,-533.13 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1634.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.33.0.0.0.0\"  id=\"connector31pin\">\n                                                <rect height=\"2.296\" x=\"-1573.929\" width=\"2.3\" y=\"7.946\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1573.367\" width=\"1.184\" y=\"8.502\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1573.929,10.242 -1573.367,9.683 -1573.367,8.448 -1573.929,7.946 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1572.186,8.505 -1573.359,8.505 -1573.929,7.946 -1571.629,7.946 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1572.186,9.683 -1572.186,8.505 -1571.629,7.946 -1571.629,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1573.929,10.242 -1573.361,9.683 -1572.186,9.683 -1571.629,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1734.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.34.0.0.0.0\"  id=\"connector17pin\">\n                                                <rect height=\"2.298\" x=\"-1673.814\" width=\"2.3\" y=\"-535.287\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1673.253\" width=\"1.184\" y=\"-534.73\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1673.814,-532.989 -1673.253,-533.548 -1673.253,-534.785 -1673.814,-535.287 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1672.071,-534.728 -1673.245,-534.728 -1673.814,-535.287 -1671.514,-535.287 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1672.071,-533.548 -1672.071,-534.728 -1671.514,-535.287 -1671.514,-532.989 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1673.814,-532.989 -1673.247,-533.548 -1672.071,-533.548 -1671.514,-532.989 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1734.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.35.0.0.0.0\"  id=\"connector30pin\">\n                                                <rect height=\"2.296\" x=\"-1681.043\" width=\"2.3\" y=\"7.946\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1680.482\" width=\"1.184\" y=\"8.502\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1681.043,10.242 -1680.482,9.683 -1680.482,8.448 -1681.043,7.946 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1679.3,8.505 -1680.474,8.505 -1681.043,7.946 -1678.743,7.946 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1679.3,9.683 -1679.3,8.505 -1678.743,7.946 -1678.743,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1681.043,10.242 -1680.476,9.683 -1679.3,9.683 -1678.743,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1834.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.36.0.0.0.0\"  id=\"connector18pin\">\n                                                <rect height=\"2.297\" x=\"-1781.07\" width=\"2.301\" y=\"-535.424\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1780.508\" width=\"1.185\" y=\"-534.867\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1781.07,-533.127 -1780.508,-533.685 -1780.508,-534.922 -1781.07,-535.424 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1779.325,-534.865 -1780.5,-534.865 -1781.07,-535.424 -1778.77,-535.424 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1779.325,-533.685 -1779.325,-534.865 -1778.77,-535.424 -1778.77,-533.127 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1781.07,-533.127 -1780.502,-533.685 -1779.325,-533.685 -1778.77,-533.127 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1834.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.37.0.0.0.0\"  id=\"connector29pin\">\n                                                <rect height=\"2.296\" x=\"-1788.299\" width=\"2.301\" y=\"7.946\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1787.737\" width=\"1.185\" y=\"8.502\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1788.299,10.242 -1787.737,9.683 -1787.737,8.448 -1788.299,7.946 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1786.554,8.505 -1787.729,8.505 -1788.299,7.946 -1785.999,7.946 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1786.554,9.683 -1786.554,8.505 -1785.999,7.946 -1785.999,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1788.299,10.242 -1787.731,9.683 -1786.554,9.683 -1785.999,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1934.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.38.0.0.0.0\"  id=\"connector19pin\">\n                                                <rect height=\"2.298\" x=\"-1888.891\" width=\"2.3\" y=\"-518.276\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1888.33\" width=\"1.184\" y=\"-517.719\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1888.891,-515.978 -1888.33,-516.537 -1888.33,-517.774 -1888.891,-518.276 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1887.148,-517.717 -1888.322,-517.717 -1888.891,-518.276 -1886.591,-518.276 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1887.148,-516.537 -1887.148,-517.717 -1886.591,-518.276 -1886.591,-515.978 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1888.891,-515.978 -1888.324,-516.537 -1887.148,-516.537 -1886.591,-515.978 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 1934.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.39.0.0.0.0\"  id=\"connector28pin\">\n                                                <rect height=\"2.296\" x=\"-1895.412\" width=\"2.3\" y=\"7.947\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1894.851\" width=\"1.184\" y=\"8.503\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1895.412,10.242 -1894.851,9.684 -1894.851,8.449 -1895.412,7.947 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1893.669,8.506 -1894.843,8.506 -1895.412,7.947 -1893.112,7.947 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1893.669,9.684 -1893.669,8.506 -1893.112,7.947 -1893.112,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1895.412,10.242 -1894.845,9.684 -1893.669,9.684 -1893.112,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2034.04, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.40.0.0.0.0\"  id=\"connector20pin\">\n                                                <rect height=\"2.298\" x=\"-1988.352\" width=\"2.299\" y=\"-535.426\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-1987.791\" width=\"1.185\" y=\"-534.869\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-1988.352,-533.128 -1987.791,-533.687 -1987.791,-534.924 -1988.352,-535.426 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-1986.608,-534.867 -1987.782,-534.867 -1988.352,-535.426 -1986.052,-535.426 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-1986.608,-533.687 -1986.608,-534.867 -1986.052,-535.426 -1986.052,-533.128 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-1988.352,-533.128 -1987.784,-533.687 -1986.608,-533.687 -1986.052,-533.128 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2034.04, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.41.0.0.0.0\"  id=\"connector27pin\">\n                                                <rect height=\"2.296\" x=\"-2002.668\" width=\"2.299\" y=\"7.947\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-2002.107\" width=\"1.185\" y=\"8.503\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-2002.668,10.242 -2002.107,9.684 -2002.107,8.449 -2002.668,7.947 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-2000.924,8.506 -2002.099,8.506 -2002.668,7.947 -2000.369,7.947 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-2000.924,9.684 -2000.924,8.506 -2000.369,7.947 -2000.369,10.242 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-2002.668,10.242 -2002.101,9.684 -2000.924,9.684 -2000.369,10.242 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2134.03, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.42.0.0.0.0\"  id=\"connector21pin\">\n                                                <rect height=\"2.298\" x=\"-2095.516\" width=\"2.3\" y=\"-535.421\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-2094.955\" width=\"1.185\" y=\"-534.864\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-2095.516,-533.123 -2094.955,-533.682 -2094.955,-534.919 -2095.516,-535.421 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-2093.772,-534.862 -2094.947,-534.862 -2095.516,-535.421 -2093.217,-535.421 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-2093.772,-533.682 -2093.772,-534.862 -2093.217,-535.421 -2093.217,-533.123 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-2095.516,-533.123 -2094.948,-533.682 -2093.772,-533.682 -2093.217,-533.123 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2134.03, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.43.0.0.0.0\"  id=\"connector26pin\">\n                                                <rect height=\"2.296\" x=\"-2109.833\" width=\"2.3\" y=\"7.945\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-2109.272\" width=\"1.185\" y=\"8.501\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-2109.833,10.241 -2109.272,9.682 -2109.272,8.447 -2109.833,7.945 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-2108.089,8.503 -2109.263,8.503 -2109.833,7.945 -2107.533,7.945 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-2108.089,9.682 -2108.089,8.503 -2107.533,7.945 -2107.533,10.241 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-2109.833,10.241 -2109.265,9.682 -2108.089,9.682 -2107.533,10.241 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2234.03, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.44.0.0.0.0\"  id=\"connector22pin\">\n                                                <rect height=\"2.297\" x=\"-2094.751\" width=\"2.299\" y=\"-492.053\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-2094.19\" width=\"1.184\" y=\"-491.497\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-2094.751,-489.757 -2094.19,-490.315 -2094.19,-491.551 -2094.751,-492.053 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-2093.008,-491.495 -2094.182,-491.495 -2094.751,-492.053 -2092.452,-492.053 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-2093.008,-490.315 -2093.008,-491.495 -2092.452,-492.053 -2092.452,-489.757 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-2094.751,-489.757 -2094.184,-490.315 -2093.008,-490.315 -2092.452,-489.757 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2234.03, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.45.0.0.0.0\"  id=\"connector25pin\">\n                                                <rect height=\"2.296\" x=\"-2217.062\" width=\"2.3\" y=\"7.945\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-2216.5\" width=\"1.184\" y=\"8.501\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-2217.062,10.241 -2216.5,9.682 -2216.5,8.447 -2217.062,7.945 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-2215.318,8.503 -2216.492,8.503 -2217.062,7.945 -2214.762,7.945 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-2215.318,9.682 -2215.318,8.503 -2214.762,7.945 -2214.762,10.241 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-2217.062,10.241 -2216.494,9.682 -2215.318,9.682 -2214.762,10.241 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2334.03, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.46.0.0.0.0\"  id=\"connector23pin\">\n                                                <rect height=\"2.298\" x=\"-2281.625\" width=\"2.3\" y=\"-518.27\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-2281.064\" width=\"1.184\" y=\"-517.713\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-2281.625,-515.972 -2281.064,-516.531 -2281.064,-517.768 -2281.625,-518.27 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-2279.882,-517.711 -2281.056,-517.711 -2281.625,-518.27 -2279.325,-518.27 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-2279.882,-516.531 -2279.882,-517.711 -2279.325,-518.27 -2279.325,-515.972 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-2281.625,-515.972 -2281.058,-516.531 -2279.882,-516.531 -2279.325,-515.972 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 2334.03, 34.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.47.0.0.0.0\"  id=\"connector24pin\">\n                                                <rect height=\"2.296\" x=\"-2324.291\" width=\"2.3\" y=\"7.945\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"-2323.73\" width=\"1.184\" y=\"8.501\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"-2324.291,10.241 -2323.73,9.682 -2323.73,8.447 -2324.291,7.945 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"-2322.548,8.503 -2323.722,8.503 -2324.291,7.945 -2321.991,7.945 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"-2322.548,9.682 -2322.548,8.503 -2321.991,7.945 -2321.991,10.241 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"-2324.291,10.241 -2323.724,9.682 -2322.548,9.682 -2321.991,10.241 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                            <g transform=\"matrix(1, 0, 0, 1, 34.035, 534.05)\" >\n                                <g >\n                                    <g >\n                                        <g >\n                                            <g gorn=\"0.1.0.0.0.0.1.48.0.0.0.0\"  id=\"connector48pin\">\n                                                <rect height=\"2.296\" x=\"98.121\" width=\"2.297\" y=\"-492.137\"  fill=\"#8D8C8C\"/>\n                                                <rect height=\"1.182\" x=\"98.68\" width=\"1.184\" y=\"-491.582\"  fill=\"#8C8663\"/>\n                                                <polygon points=\"98.121,-489.841 98.68,-490.4 98.68,-491.636 98.121,-492.137 \"  fill=\"#B8AF82\"/>\n                                                <polygon points=\"99.862,-491.58 98.688,-491.58 98.121,-492.137 100.418,-492.137 \"  fill=\"#80795B\"/>\n                                                <polygon points=\"99.862,-490.4 99.862,-491.58 100.418,-492.137 100.418,-489.841 \"  fill=\"#5E5B43\"/>\n                                                <polygon points=\"98.121,-489.841 98.686,-490.4 99.862,-490.4 100.418,-489.841 \"  fill=\"#9A916C\"/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
      "boardwireframe.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 77 47\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linecap=\"round\" id=\"svg4631\">\n  <path d=\"M72 44.6H6.5l-2.2-2.2v-9.3L0 28.8V8.6l5-5V1.4h67c2 0 3.6 1.6 3.6 3.6v10l-1 1.2v13.6l1 1.1V41c0 2-1.6 3.6-3.6 3.6m-8.6-17c-1.4 0-1.4 2 0 2 1.3 0 1.3-2 0-2zm0-11.1c-1.4 0-1.4 2 0 2 1.3 0 1.3-2 0-2zM57.2 2.6c-4.1 0-4.1 6.2 0 6.2 4.2 0 4.2-6.2 0-6.2zm0 34.6c-4.1 0-4.1 6.2 0 6.2 4.2 0 4.2-6.2 0-6.2zM50.4 3.7c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm-7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm-7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm-7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm-7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm0 35.9c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm7.2 0c-1.9 0-1.9 2.8 0 2.8s1.9-2.8 0-2.8zm-39.6-36c-4.2 0-4.2 6.3 0 6.3s4.2-6.2 0-6.2zm0 32.5c-4.2 0-4.2 6.2 0 6.2s4.2-6.2 0-6.2z\" id=\"path4485\" fill=\"none\" fill-rule=\"nonzero\" stroke=\"#3e3b2b\"/>\n  <path d=\"M19.3 30.2v-2.9m24-13.2v-2.3m8.7 0V14M9.5 32v-2.8\" fill=\"none\" stroke=\"#fff\" stroke-width=\".9\" id=\"path4487\"/>\n  <path d=\"M60.2 30v-2.2m0-9.6v-2.3M73 33.8h2.5m0 0V12.2m0 0H73\" fill=\"none\" stroke=\"#fff\" stroke-width=\".4\" id=\"path4489\"/>\n  <path d=\"M26.5 28l1 2.8m0 0h-2.2m0 0l1.2-2.9\" fill=\"none\" stroke=\"#fff\" stroke-width=\".4\" id=\"path4491\"/>\n  <path d=\"M28.8 25.5v7.7m0 0h-4.7m0 0v-7.7m0 0h4.7\" fill=\"none\" stroke=\"#fff\" stroke-width=\".4\" id=\"path4493\"/>\n  <path d=\"M26.5 18.3l-1.2-2.8m0 0h2.3m0 0l-1.1 2.8\" fill=\"none\" stroke=\"#fff\" stroke-width=\".4\" id=\"path4495\"/>\n  <path d=\"M24.1 20.7v-7.6m0 0h4.7m0 0v7.6m0 0h-4.7m18.1-2.3h-1.7m0 0V20m13.6-1.7h1.7m0 0V20M40.5 32v1.7m0 0h1.7M55.8 32v1.7m0 0h-1.7\" fill=\"none\" stroke=\"#fff\" stroke-width=\".4\" id=\"path4497\"/>\n  <path d=\"M37.9 21.9h-5.7m5.7-6.3h-5.7M32 23h.9m0 0h.3m0 0l-.6-.6m0 0l-.6.6m0 0h.3m0 0l.3-.3\" fill=\"none\" stroke=\"#fff\" stroke-width=\".4\" id=\"path4503\"/>\n  <path d=\"M68.4 7.3l.9-.7v1.5l-1-.8zm.8.7V6.7 8z\" fill=\"none\" stroke=\"#fff\" stroke-width=\".4\" id=\"path4505\"/>\n  <path d=\"M68 8.4V6.3h.4v2.1H68z\" fill=\"#fff\" fill-rule=\"nonzero\" id=\"path4507\"/>\n  <path d=\"M13.3 14.5v12m-8.6 0v-12\" fill=\"none\" stroke=\"#fff\" stroke-width=\".6\" id=\"path4509\"/>\n  <path d=\"M68.3 43.2V41m.1-36V2.9\" fill=\"none\" stroke=\"#fff\" stroke-width=\".9\" id=\"path4511\"/>\n  <path d=\"M10.8 12a5.1 5.1 0 1 1 0-10.3 5.1 5.1 0 0 1 0 10.2zm0 32.3a5.1 5.1 0 1 1 0-10.2 5.1 5.1 0 0 1 0 10.2z\" fill=\"none\" stroke=\"#fff\" stroke-width=\".6\" stroke-linecap=\"butt\" id=\"path4513\"/>\n  <path d=\"M23.4 20.8v-4.6M14 20.8v-4.6m5.9 5.3h-2.3\" fill=\"none\" stroke=\"#fff\" stroke-width=\".6\" id=\"path4515\"/>\n  <path d=\"M43.2 21.6c0-.3.3-.5.5-.5h9c.2 0 .5.2.5.5v9a.5.5 0 0 1-.5.4h-9a.5.5 0 0 1-.5-.5v-9z\" fill=\"#9a916c\" id=\"path4535\"/>\n  <path d=\"M50.4 7.2a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm-7.2 0a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm-7.2 0A2 2 0 1 1 36 3a2 2 0 0 1 0 4.2zm-7.2 0a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm-7.2 0a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm0 35.9a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm7.2 0a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm7.2 0a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm7.2 0a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2zm7.2 0a2 2 0 1 1 0-4.2 2 2 0 0 1 0 4.2z\" fill=\"none\" stroke=\"#9a916c\" stroke-width=\"1.3\" stroke-linecap=\"butt\" id=\"path4537\"/>\n  <path d=\"M10.8 10.6a3.8 3.8 0 1 1 0-7.6 3.8 3.8 0 0 1 0 7.6zm0 32.4a3.8 3.8 0 1 1 0-7.6 3.8 3.8 0 0 1 0 7.6z\" fill=\"none\" stroke=\"#9a916c\" stroke-width=\"1.4\" stroke-linecap=\"butt\" id=\"path4543\"/>\n  <path d=\"M60.8 30V16h.7v14h-.7z\" fill=\"#b4b4b4\" fill-rule=\"nonzero\" id=\"path4567\"/>\n  <path d=\"M60.7 33.8h13.6V12.2H60.7z\" id=\"path4571\" fill=\"#dcdcdc\" fill-rule=\"nonzero\"/>\n  <path d=\"M74.3 33.2V12.8l1.7.6v19.2l-1.7.6z\" fill=\"#f0f0f0\" fill-rule=\"nonzero\" id=\"path4575\"/>\n  <path d=\"M74.3 33.8v-.6l1.7.6v.5l-1.7-.5zm0-21v-.6l1.7-.5v.5l-1.7.6z\" fill=\"#b4b4b4\" fill-rule=\"nonzero\" id=\"path4577\"/>\n  <path d=\"M41.1 19.6c0-.4.3-.6.6-.6h13c.3 0 .6.2.6.6v12.9a.6.6 0 0 1-.7.6H41.7a.6.6 0 0 1-.6-.6V19.6z\" fill=\"#333\" id=\"path4591\"/>\n  <path d=\"M43.4 20.6a.7.7 0 1 1-1.4 0 .7.7 0 0 1 1.4 0z\" fill=\"#666\" id=\"path4593\"/>\n  <path d=\"M34.4 29.9c-.1-.3-.2-.7 0-.7.1-.1.3.1.5.4.2.4.2.7 0 .8l-.5-.5zm-1.6.1s0-.4.3-.6c.3-.3.6-.4.7-.3.1 0 0 .4-.3.7-.3.2-.6.4-.7.2m1.8-1.4c0-.1.3-.3.7-.3.3-.1.7 0 .7.1 0 .2-.3.4-.7.4-.3 0-.7 0-.7-.2m-1.6-.2c-.4-.1-.6-.4-.5-.5 0-.2.4-.1.7 0 .4.2.6.5.5.6H33m1-1c.1-.4.3-.6.4-.6.2 0 .3.3.2.7 0 .4-.2.7-.4.6-.1 0-.2-.3-.2-.7m2.7 5.3v-1.6s0-1-.7-1.5l-.3-.2.4.2c.8.2 1.6-.4 1.6-.4l1.3-1c.2-.1.3-.2.3-.4s-.2-.2-.5-.3l-1.5-.5s-1-.4-1.6.1l-.3.2.2-.2c.5-.7.2-1.7.2-1.7l-.5-1.5c-.1-.3-.2-.4-.4-.4s-.2 0-.4.3l-1 1.3s-.6.8-.3 1.6l.1.3-.2-.3c-.5-.7-1.5-.6-1.5-.6H30c-.3 0-.4 0-.5.2l.1.5 1 1.3s.5.8 1.4.8h.4l-.4.1c-.8.3-1 1.2-1 1.2l-.6 1.6v.5h.6l1.5-.5s1-.2 1.3-1v-.4.4c0 .8.9 1.4.9 1.4l1.3 1h.5c.2 0 .2-.2.2-.5\" id=\"path4625\" fill-rule=\"nonzero\"/>\n</svg>\n",
      "config.ts": "//  TODO: Sync with codal-libopencm3\nnamespace config {\n    export const PIN_PA0 = DAL.CM_PIN_PA0;\n    export const PIN_PA1 = DAL.CM_PIN_PA1;\n    export const PIN_PA2 = DAL.CM_PIN_PA2;\n    export const PIN_PA3 = DAL.CM_PIN_PA3;\n    export const PIN_PA4 = DAL.CM_PIN_PA4;\n    // export const PIN_PC13 = DAL.CM_PIN_PC13;\n    export const PIN_LED = DAL.CM_PIN_LED;\n    export const PIN_SCL1 = DAL.CM_PIN_I2C_SCL1;\n    export const PIN_SDA1 = DAL.CM_PIN_I2C_SDA1;\n    export const PIN_NSS1 = DAL.CM_PIN_SPI_NSS1;\n    export const PIN_SCK1 = DAL.CM_PIN_SPI_SCK1;\n    export const PIN_MISO1 = DAL.CM_PIN_SPI_MISO1;\n    export const PIN_MOSI1 = DAL.CM_PIN_SPI_MOSI1;\n    export const PIN_TX2 = DAL.CM_PIN_USART_TX2;\n    export const PIN_RX2 = DAL.CM_PIN_USART_RX2;\n}\n",
      "device.d.ts": "//  TODO: Sync with codal-libopencm3\ndeclare namespace pins {\n    //% fixedInstance shim=pxt::getPin(CM_PIN_PA0)\n    const PA0: PwmPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_PA1)\n    const PA1: PwmPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_PA2)\n    const PA2: PwmPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_PA3)\n    const PA3: PwmPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_PA4)\n    const PA4: PwmPin;\n    \n    //% fixedInstance shim=pxt::getPin(CM_PIN_LED)\n    const LED: DigitalInOutPin;\n\n    //% fixedInstance shim=pxt::getPin(CM_PIN_I2C_SCL1)\n    const SCL1: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_I2C_SDA1)\n    const SDA1: DigitalInOutPin;\n\n    //% fixedInstance shim=pxt::getPin(CM_PIN_SPI_NSS1)\n    const NSS1: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_SPI_SCK1)\n    const SCK1: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_SPI_MISO1)\n    const MISO1: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_SPI_MOSI1)\n    const MOSI1: DigitalInOutPin;\n\n    //% fixedInstance shim=pxt::getPin(CM_PIN_USART_TX2)\n    const TX2: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(CM_PIN_USART_RX2)\n    const RX2: DigitalInOutPin;\n}\n\ndeclare namespace input {\n}\n\n",
      "ns.ts": "\n//% color=\"#d65cd6\"\nnamespace input {\n}\n\n//% color=\"#F55D3E\"\nnamespace music {\n\n}\n\n//% color=\"#00b295\"\nnamespace control {\n\n}\n\n//% color=\"#EF2D56\" advanced=false\nnamespace pins {\n\n}\n\n//% color=\"#006E90\"\nnamespace serial {\n\n}\n\n//% color=\"#40bf4a\"\nnamespace loops {\n\n}\n",
      "pxt.json": "{\n    \"name\": \"stm32bluepill\",\n    \"description\": \"Support for STM32 Blue Pill\",\n    \"files\": [\n        \"README.md\",\n        \"device.d.ts\",\n        \"config.ts\",\n        \"ns.ts\",\n        \"board.json\",\n        \"board.svg\",\n        \"boardwireframe.svg\"\n    ],\n    \"core\": true,\n    \"compileServiceVariant\": \"stm32bluepill\",\n    \"dependencies\": {\n        \"core---stm32bluepill\": \"*\"\n    },\n    \"public\": true,\n    \"features\": [\n        \"pinpa0\",\n        \"pinpa1\",\n        \"pinpa2\",\n        \"pinpa3\",\n        \"pinpa4\",\n        \"pinpc13\",\n        \"pinled\",\n        \"pinscl1\",\n        \"pinsda1\",\n        \"pinsnss1\",\n        \"pinssck1\",\n        \"pinsmiso1\",\n        \"pinsmosi1\",\n        \"pinstx2\",\n        \"pinsrx2\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"0.5.73\"\n    }\n}"
    },
    "tests": {
      "README.md": "# tests\n\nA unit test framework\n\n## Defining tests\n\nTests are registered as event handlers. They will automatically run once ``on start`` is finished.\n\n```blocks\ntests.test(\"lgB set speed 10\", () => {\n    motors.largeB.setSpeed(10);\n    pause(100)\n    tests.assertClose(\"speedB\", 10, motors.largeB.speed(), 2)\n});\n```\n\n## Assertions\n\nThe library has various asserts that will register fault. Note that since exceptions are not available, assertion failure **do not** stop the program execution.\n\n* **assert** checks a boolean condition\n\n```blocks\ntests.assert(\"speed positive\", motors.largeB.speed() > 0)\n```\n\n* **assert close** checks that a numberical value is within a particular range\n\n```blocks\ntests.assertClose(\"speed\", motors.largeB.speed(), 10, 2)\n```\n\n```package\ntests\n```",
      "pxt.json": "{\n    \"name\": \"tests\",\n    \"description\": \"A unit test library\",\n    \"files\": [\n        \"README.md\",\n        \"tests.ts\",\n        \"targetoverrides.ts\"\n    ],\n    \"testFiles\": [],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.5.73\"\n    }\n}",
      "targetoverrides.ts": "// override this file in targets for target specific setup\n",
      "tests.ts": "/**\n * Various test event in the execution cycle\n */\nenum TestEvent {\n    //% block=\"run setup\"\n    RunSetUp = 0,\n    //% block=\"run teardown\"\n    RunTearDown = 1,\n    //% block=\"test setup\"\n    TestSetUp = 2,\n    //% block=\"test teardown\"\n    TestTearDown = 3\n}\n\n/**\n * A Unit tests framework\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace tests {\n    class Test {\n        name: string;\n        handler: () => void;\n        errors: string[];\n\n        constructor(name: string, handler: () => void) {\n            this.name = name;\n            this.handler = handler;\n            this.errors = [];\n        }\n\n        run() {\n            // clear state\n            if (_runSetup)\n                _runSetup();\n\n            console.log(`> ${this.name}`)\n            this.handler()\n\n            if (this.errors.length)\n                console.log('')\n\n            // ensure clean state after test\n            if (_runTearDown)\n                _runTearDown();\n        }\n    }\n\n    let _tests: Test[] = undefined;\n    let _currentTest: Test = undefined;\n    let _runSetup: () => void = undefined;\n    let _runTearDown: () => void = undefined;\n    let _testSetUp: () => void = undefined;\n    let _testTearDown: () => void = undefined;\n\n    function run() {\n        if (!_tests) return;\n\n        if (_testSetUp)\n            _testSetUp();\n\n        const start = control.millis();\n        console.log(`${_tests.length} tests found`)\n        console.log(` `)\n        for (let i = 0; i < _tests.length; ++i) {\n            const t = _currentTest = _tests[i];\n            t.run();\n            _currentTest = undefined;\n        }\n\n        if (_testTearDown)\n            _testTearDown();\n\n        console.log(` `)\n        console.log(`${_tests.length} tests, ${_tests.map(t => t.errors.length).reduce((p, c) => p + c, 0)} errs in ${Math.ceil((control.millis() - start) / 1000)}s`)\n    }\n\n    /**\n     * Registers a test to run\n     */\n    //% blockId=testtest block=\"test %name\"\n    //% weight=100\n    export function test(name: string, handler: () => void): void {\n        if (!name || !handler) return;\n        if (!_tests) {\n            _tests = [];\n            control.runInParallel(function () {\n                // should run after on start\n                pause(100)\n                run()\n            })\n        }\n        _tests.push(new Test(name, handler));\n    }\n\n    /**\n     * Checks a boolean condition\n     */\n    //% blockId=testAssert block=\"assert %message|%condition\"\n    //% weight=80\n    //% blockGap=8\n    export function assert(message: string, condition: boolean) {\n        if (!condition) {\n            console.log(`!!! ${message || ''}`)\n            if (_currentTest)\n                _currentTest.errors.push(message);\n        }\n    }\n\n    /**\n     * Checks that 2 values are close to each other\n     * @param expected what the value should be\n     * @param actual what the value was\n     * @param tolerance the acceptable error margin, eg: 5\n     */\n    //% blockId=testAssertClose block=\"assert %message|%expected|close to %actual|by %tolerance\"\n    //% weight=79\n    //% inlineInputMode=inline\n    export function assertClose(name: string, expected: number, actual: number, tolerance: number) {\n        assert(`${name} ${expected} != ${actual} +-${tolerance}`, Math.abs(expected - actual) <= tolerance);\n    }\n\n    /**\n     * Registers code to be called at various points in the test execution\n     * @param handler\n     */\n    //% blockGap=8\n    //% weight=10\n    export function onEvent(event: TestEvent, handler: () => void) {\n        switch(event) {\n            case TestEvent.RunSetUp: _runSetup = handler; break;\n            case TestEvent.RunTearDown: _runTearDown = handler; break;\n            case TestEvent.TestSetUp: _testSetUp = handler; break;\n            case TestEvent.TestTearDown: _testTearDown = handler; break;\n        }\n    }\n}\n"
    },
    "serial": {
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum BaudRate {\n    //% block=115200\n    BaudRate115200 = 115200,\n    //% block=57600\n    BaudRate57600 = 57600,\n    //% block=38400\n    BaudRate38400 = 38400,\n    //% block=31250\n    BaudRate31250 = 31250,\n    //% block=28800\n    BaudRate28800 = 28800,\n    //% block=19200\n    BaudRate19200 = 19200,\n    //% block=14400\n    BaudRate14400 = 14400,\n    //% block=9600\n    BaudRate9600 = 9600,\n    //% block=4800\n    BaudRate4800 = 4800,\n    //% block=2400\n    BaudRate2400 = 2400,\n    //% block=1200\n    BaudRate1200 = 1200,\n    //% block=300\n    BaudRate300 = 300,\n    }\n\n\n    declare const enum SerialEvent {\n    //% block=\"data received\"\n    DataReceived = 3,  // CODAL_SERIAL_EVT_RX_FULL\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "pxt.json": "{\n    \"name\": \"serial\",\n    \"description\": \"UART communicatoin\",\n    \"files\": [\n        \"serial.cpp\",\n        \"serial.ts\",\n        \"enums.d.ts\",\n        \"shims.d.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.5.73\"\n    },\n    \"icon\": \"/docs/static/libs/serial.png\"\n}",
      "serial.cpp": "#include \"pxt.h\"\n\nenum class BaudRate {\n  //% block=115200\n  BaudRate115200 = 115200,\n  //% block=57600\n  BaudRate57600 = 57600,\n  //% block=38400\n  BaudRate38400 = 38400,\n  //% block=31250\n  BaudRate31250 = 31250,\n  //% block=28800\n  BaudRate28800 = 28800,\n  //% block=19200\n  BaudRate19200 = 19200,\n  //% block=14400\n  BaudRate14400 = 14400,\n  //% block=9600\n  BaudRate9600 = 9600,\n  //% block=4800\n  BaudRate4800 = 4800,\n  //% block=2400\n  BaudRate2400 = 2400,\n  //% block=1200\n  BaudRate1200 = 1200,\n  //% block=300\n  BaudRate300 = 300\n};\n\nenum SerialEvent {\n    //% block=\"data received\"\n    DataReceived = CODAL_SERIAL_EVT_RX_FULL    \n};\n\nnamespace pxt {\n  class WSerial {\n    public:\n      CODAL_SERIAL serial;\n      WSerial()\n        : serial(*LOOKUP_PIN(TX), *LOOKUP_PIN(RX))\n        {\n          serial.setBaud((int)BaudRate::BaudRate115200);\n        }\n  };\n\nSINGLETON_IF_PIN(WSerial,TX);\n\n}\n\nnamespace serial {\n    /**\n    * Read the buffered received data as a string\n    */\n    //% help=serial/read-string\n    //% blockId=serial_read_string block=\"serial|read string\"\n    //% weight=18\n    //% group=\"Read\"\n    String readString() {\n      auto service = getWSerial();\n      if (!service) return mkString(\"\");\n      int n = service->serial.getRxBufferSize();\n      if (n == 0) \n        return mkString(\"\");\n      auto s = service->serial.read(n, SerialMode::ASYNC);\n      return PSTR(s);\n    }\n\n    /**\n    * Read the buffered received data as a buffer\n    */\n    //% help=serial/read-buffer\n    //% blockId=serial_read_buffer block=\"serial|read buffer\"\n    //% weight=17\n    //% group=\"Read\"\n    Buffer readBuffer() {\n      auto service = getWSerial();\n      if (!service) return mkBuffer(NULL, 0);\n      int n = service->serial.getRxBufferSize();\n      if (n == 0) \n        return mkBuffer(NULL, 0);\n\n      auto buf = mkBuffer(NULL, n);\n      auto read = service->serial.read(buf->data, buf->length, SerialMode::ASYNC);\n      if (read == DEVICE_SERIAL_IN_USE) { // someone else is reading\n        decrRC(buf);\n        return mkBuffer(NULL, 0);\n      }\n      if (buf->length != read) {\n        auto buf2 = mkBuffer(buf->data, read);\n        decrRC(buf);\n        buf = buf2;\n      }        \n      return buf;\n    }\n\n    void send(const char* buffer, int length) {\n      // TODO: fix CODAL abstraction\n      // getWSerial()->serial.send((uint8_t*)buffer, length * sizeof(char));\n      auto service = getWSerial();\n      if (!service) return;\n      service->serial.printf(\"%s\", buffer);\n    }\n\n    /**\n     * Write some text to the serial port.\n     */\n    //% help=serial/write-string\n    //% weight=87\n    //% blockId=serial_writestring block=\"serial|write string %text\"\n    //% group=\"Write\"\n    void writeString(String text) {\n      auto service = getWSerial();\n      if (!service) return;\n      if (NULL == text) return;\n      send(text->data, text->length);\n    }\n\n    /**\n    * Send a buffer across the serial connection.\n    */\n    //% help=serial/write-buffer weight=6\n    //% blockId=serial_writebuffer block=\"serial|write buffer %buffer\"\n    //% group=\"Write\"\n    void writeBuffer(Buffer buffer) {\n      auto service = getWSerial();\n      if (!service) return;\n      if (NULL == buffer) return;\n      service->serial.send(buffer->data, buffer->length);\n    }\n\n    /**\n      Sends the console message through the TX, RX pins\n      **/\n    //% blockId=serialsendtoconsole block=\"serial attach to console\"\n    //% group=\"Configuration\"\n    void attachToConsole() {\n      auto service = getWSerial();\n      if (!service) return;\n      setSendToUART(serial::send);\n    }\n\n    /**\n    Set the baud rate of the serial port\n    */\n    //% help=serial/set-baud-rate\n    //% group=\"Configuration\"\n    void setBaudRate(BaudRate rate) {\n      auto service = getWSerial();\n      if (!service) return;\n      service->serial.setBaud((int)rate);\n    }\n\n    /**\n    * Set the serial input and output to use pins instead of the USB connection.\n    * @param tx the new transmission pin\n    * @param rx the new reception pin\n    * @param rate the new baud rate\n    */\n    //% weight=10\n    //% help=serial/redirect\n    //% blockId=serial_redirect block=\"serial|redirect to|TX %tx|RX %rx\"\n    //% tx.fieldEditor=\"gridpicker\" tx.fieldOptions.columns=3\n    //% tx.fieldOptions.tooltips=\"false\"\n    //% rx.fieldEditor=\"gridpicker\" rx.fieldOptions.columns=3\n    //% rx.fieldOptions.tooltips=\"false\"\n    //% blockGap=8 inlineInputMode=inline\n    //% group=\"Configuration\"\n    void redirect(DigitalInOutPin tx, DigitalInOutPin rx, BaudRate rate) {\n      auto service = getWSerial();\n      if (!service) return;\n      if (NULL == tx || NULL == rx)\n        return;\n      service->serial.redirect(*tx, *rx);\n      setBaudRate(rate);\n    }\n\n    /**\n    * Registers code when serial events happen\n    **/\n    //% weight=9\n    //% help=serial/on-event\n    //% blockId=serial_onevent block=\"serial on %event\"\n    //% blockGap=8\n    //% group=\"Events\"\n    void onEvent(SerialEvent event, Action handler) {\n      auto service = getWSerial();\n      if (!service) return;\n      auto id = service->serial.id;\n      registerWithDal(id, event, handler);\n    }\n}",
      "serial.ts": "/**\n * Reading and writing data over a serial connection.\n */\n//% weight=2 color=#002050 icon=\"\\uf287\"\n//% advanced=true\n//% groups='[\"Write\", \"Read\", \"Events\", \"Configuration\"]'\nnamespace serial {\n    /**\n     * Write a line of text to the serial port.\n     * @param value to send over serial\n     */\n    //% weight=90\n    //% help=serial/write-line blockGap=8\n    //% blockId=serial_writeline block=\"serial|write line %text\"\n    //% group=\"Write\"\n    export function writeLine(text: string): void {\n        writeString(text + \"\\r\\n\");\n    }\n\n    /**\n     * Write a number to the serial port.\n     */\n    //% help=serial/write-number\n    //% weight=89 blockGap=8\n    //% blockId=serial_writenumber block=\"serial|write number %value\"\n    //% group=\"Write\"\n    export function writeNumber(value: number): void {\n        writeString(value.toString());\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the serial port.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=serial/write-value\n    //% blockId=serial_writevalue block=\"serial|write value %name|= %value\"\n    //% group=\"Write\"\n    export function writeValue(name: string, value: number): void {\n        const prefix = name ? name + \":\" : \"\";\n        serial.writeLine(prefix + value);\n    }\n}\n",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace serial {\n\n    /**\n     * Read the buffered received data as a string\n     */\n    //% help=serial/read-string\n    //% blockId=serial_read_string block=\"serial|read string\"\n    //% weight=18\n    //% group=\"Read\" shim=serial::readString\n    function readString(): string;\n\n    /**\n     * Read the buffered received data as a buffer\n     */\n    //% help=serial/read-buffer\n    //% blockId=serial_read_buffer block=\"serial|read buffer\"\n    //% weight=17\n    //% group=\"Read\" shim=serial::readBuffer\n    function readBuffer(): Buffer;\n\n    /**\n     * Write some text to the serial port.\n     */\n    //% help=serial/write-string\n    //% weight=87\n    //% blockId=serial_writestring block=\"serial|write string %text\"\n    //% group=\"Write\" shim=serial::writeString\n    function writeString(text: string): void;\n\n    /**\n     * Send a buffer across the serial connection.\n     */\n    //% help=serial/write-buffer weight=6\n    //% blockId=serial_writebuffer block=\"serial|write buffer %buffer\"\n    //% group=\"Write\" shim=serial::writeBuffer\n    function writeBuffer(buffer: Buffer): void;\n\n    /**\n    Sends the console message through the TX, RX pins\n     **/\n    //% blockId=serialsendtoconsole block=\"serial attach to console\"\n    //% group=\"Configuration\" shim=serial::attachToConsole\n    function attachToConsole(): void;\n\n    /**\n    Set the baud rate of the serial port\n     */\n    //% help=serial/set-baud-rate\n    //% group=\"Configuration\" shim=serial::setBaudRate\n    function setBaudRate(rate: BaudRate): void;\n\n    /**\n     * Set the serial input and output to use pins instead of the USB connection.\n     * @param tx the new transmission pin\n     * @param rx the new reception pin\n     * @param rate the new baud rate\n     */\n    //% weight=10\n    //% help=serial/redirect\n    //% blockId=serial_redirect block=\"serial|redirect to|TX %tx|RX %rx\"\n    //% tx.fieldEditor=\"gridpicker\" tx.fieldOptions.columns=3\n    //% tx.fieldOptions.tooltips=\"false\"\n    //% rx.fieldEditor=\"gridpicker\" rx.fieldOptions.columns=3\n    //% rx.fieldOptions.tooltips=\"false\"\n    //% blockGap=8 inlineInputMode=inline\n    //% group=\"Configuration\" shim=serial::redirect\n    function redirect(tx: DigitalInOutPin, rx: DigitalInOutPin, rate: BaudRate): void;\n\n    /**\n     * Registers code when serial events happen\n     **/\n    //% weight=9\n    //% help=serial/on-event\n    //% blockId=serial_onevent block=\"serial on %event\"\n    //% blockGap=8\n    //% group=\"Events\" shim=serial::onEvent\n    function onEvent(event: SerialEvent, handler: () => void): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "test.ts": "let i = 0;\nforever(function () {\n    serial.writeLine((++i).toString())\n})"
    },
    "datalogger": {
      "README.md": "# Data logger\n\nA tiny libraty to create CSV log files.",
      "datalogger.ts": "/**\n * A tiny data logging framework\n */\n//% weight=80 color=#00a0a0 icon=\"\" blockGap=8\n//% groups='[\"Data\", \"Configuration\"]'\nnamespace datalogger {\n    export let SEPARATOR = \"\\t\";\n    /**\n     * A storage for log data\n     */\n    export class Storage {\n        constructor() {\n        }\n        /**\n         * Initializes the storage\n         */\n        init(): void { }\n        /**\n         * Appends the headers in log\n         */\n        appendHeaders(headers: string[]): void { }\n        /**\n         * Appends a row of data\n         */\n        appendRow(values: number[]): void { }\n        /**\n         * Flushes any buffered data\n         */\n        flush(): void { }\n    }\n\n    let _headers: string[] = undefined;\n    let _headersWritten: boolean = false;\n    let _row: number[] = undefined;\n    let _start: number;\n    let _storage: Storage;\n    let _enabled = true;\n    let _samplingInterval = -1;\n    let _sampleCount = 0;\n    let _lastSampleTime = -1;\n    let _console = false;\n\n    function clear() {\n        _headers = undefined;\n        _row = undefined;\n    }\n\n    function initRow() {\n        if (!_storage || _row) return;\n\n        if (!_headers) {\n            _headers = [];\n            _headersWritten = false;\n            _start = control.millis();\n            _storage.init();\n        }\n        _row = [];\n        _sampleCount = 1;\n        _lastSampleTime = control.millis();\n        const s = (_lastSampleTime - _start) / 1000;\n        addValue(\"time (s)\", s);\n    }\n\n    function commitRow() {\n        // write row if any data\n        if (_row && _row.length > 0 && _storage) {\n            // write headers for the first row\n            if (!_headersWritten) {\n                _storage.appendHeaders(_headers);\n                if (_console)\n                    console.log(_headers.slice(1, _headers.length).join(', '));\n                _headersWritten = true;\n            }\n            // commit row data\n            if (_samplingInterval <= 0 || control.millis() - _lastSampleTime >= _samplingInterval) {\n                // average data\n                if (_sampleCount > 1) {\n                    for(let i = 1; i < _row.length; ++i) {\n                        _row[i] /= _sampleCount;\n                    }\n                }\n                // append row\n                _storage.appendRow(_row);\n                if (_console) {\n                    // drop time\n                    console.log(_row.slice(1, _row.length).join(','));\n                }\n                // clear values\n                _row = undefined;\n                _sampleCount = 1;\n                _lastSampleTime = -1;\n            } else {\n                // don't store the data yet\n                _sampleCount++;\n            }\n        }\n    }\n\n    /**\n     * Starts a new row of data\n     */\n    //% group=\"Data\"\n    //% weight=100\n    //% blockId=datalogAddRow block=\"data logger add row\"\n    export function addRow(): void {\n        if (!_enabled || !_storage) return;\n\n        commitRow();\n        initRow();\n    }\n\n    /**\n     * Adds a cell to the row of data\n     * @param name name of the cell, eg: \"x\"\n     * @param value value of the cell, eg: 0\n     */\n    //% group=\"Data\"\n    //% weight=99\n    //% blockId=datalogAddValue block=\"data logger add %name|=%value\"\n    //% blockGap=12\n    export function addValue(name: string, value: number) {\n        if (!_row) return;\n        // happy path\n        if (_headers[_row.length] === name)\n            _row.push(value);\n        else {\n            let i = _headers.indexOf(name);\n            if (i < 0) {\n                _headers.push(name);\n                i = _headers.length - 1;\n            }\n            _row[i] += value;\n        }\n    }\n\n    /**\n     * \n     * @param storage custom storage solution\n     */\n    //%\n    export function setStorage(storage: Storage) {\n        flush();\n        _storage = storage;\n        clear();\n    }\n\n    /**\n     * Commits any buffered row to disk\n     */\n    //%\n    export function flush() {\n        if (_headers && _storage)\n            _storage.flush();\n    }\n\n    /**\n     * Sets the minimum number of milli seconds between rows\n     * @param millis milliseconds between each sample, eg: 50\n     */\n    //% group=\"Configuration\"\n    //% blockId=datalogSetSamplingInterval block=\"set data logger sampling interval to $millis|(ms)\"\n    //% millis.shadow=timePicker\n    export function setSampleInterval(millis: number) {\n        _samplingInterval = millis >> 0;\n    }\n\n    /**\n     * Turns on or off datalogging\n     * @param enabled \n     */\n    //% group=\"Configuration\"\n    //% blockId=datalogEnabled block=\"data logger $enabled\"\n    //% enabled.shadow=toggleOnOff\n    export function setEnabled(enabled: boolean) {\n        flush();\n        _enabled = enabled;\n    }\n\n    /**\n     * Send the data logger output to the console\n     * @param enabled \n     */\n    //% group=\"Configuration\"\n    //% blockId=\"datalogConsole\" block=\"data logger to console $enabled\"\n    //% enabled.shadow=toggleOnOff\n    export function sendToConsole(enabled: boolean) {\n        _console = enabled;\n    }\n}\n",
      "pxt.json": "{\n    \"name\": \"datalogger\",\n    \"description\": \"Tiny data logging framework\",\n    \"files\": [\n        \"README.md\",\n        \"datalogger.ts\",\n        \"storagedatalogger.ts\",\n        \"targetoverrides.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"storage\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.5.73\"\n    },\n    \"icon\": \"/docs/static/libs/datalogger.png\"\n}",
      "storagedatalogger.ts": "namespace datalogger {\n    const FILENAME = \"datalog.csv\";\n    /**\n        * A storage for datalog data\n    */\n    export class FileStorage extends Storage {\n        filename: string;\n        constructor(filename: string) {\n            super()\n            this.filename = filename;\n        }\n        /**\n         * Initializes the storage\n         */\n        init(): void { \n\n        }\n        /**\n         * Appends the headers in datalog\n         */\n        appendHeaders(headers: string[]): void { \n            const line = headers.join(datalogger.SEPARATOR);\n            storage.appendLine(this.filename, `sep=${datalogger.SEPARATOR}`);\n            storage.appendLine(this.filename, line);\n        }\n        /**\n         * Appends a row of data\n         */\n        appendRow(values: number[]): void { \n            const line = values.join(datalogger.SEPARATOR);\n            storage.appendLine(this.filename, line);\n        }\n        /**\n         * Flushes any buffered data\n         */\n        flush(): void { \n\n        }\n    }\n}",
      "targetoverrides.ts": "// add target specific things here\nnamespace datalogger {\n    datalogger.setStorage(new FileStorage(\"log.csv\"));\n}",
      "test.ts": "let k = 0;\nforever(function () {\n    datalogger.addRow()\n    datalogger.addValue(\"x\", k)\n    datalogger.addValue(\"y\", 1 / k)\n})\n"
    }
  },
  "bundledcoresvgs": {}
}